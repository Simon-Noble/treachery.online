@using Treachery.Shared
@inherits MapComponent

@if (h.Game.CurrentPhase >= Phase.MetheorAndStormSpell)
{
    float y = 2 * Skin.Current.FORCETOKEN_RADIUS;
    float x = 1.5f * Skin.Current.FORCETOKEN_RADIUS;
    float leaderDiameter = 3.5f * Skin.Current.FORCETOKEN_RADIUS;
    float leaderPctHeight = .25f * leaderDiameter * Skin.Current.BattleWheelHeroHeight / Skin.Current.BattleWheelHeroWidth;
    float spacing = 0.9f;

    foreach (var p in h.Game.Players)
    {
        string color = Skin.Current.GetFactionColor(p.Faction);

        if (p.ForcesKilled > 0 || p.SpecialForcesKilled > 0)
        {
            if (p.ForcesKilled > 0)
            {
                <MapForce X=@(x + Skin.Current.FORCETOKEN_RADIUS) Y=@(y + Skin.Current.FORCETOKEN_RADIUS) Special=@false Amount=@p.ForcesKilled Faction=@p.Faction />
            }

            if (p.SpecialForcesKilled > 0)
            {
                var dX = (p.ForcesKilled > 0) ? 2 * Skin.Current.FORCETOKEN_RADIUS : 0;
                <MapForce X=@(x + Skin.Current.FORCETOKEN_RADIUS + dX) Y=@(y + Skin.Current.FORCETOKEN_RADIUS) Special=@true Amount=@p.SpecialForcesKilled Faction=@p.Faction />
            }

            y += spacing * 2 * Skin.Current.FORCETOKEN_RADIUS;
        }

        var corpses = p.Leaders
            .Where(l => !h.Game.IsAlive(l))
            .Select(l => new Tuple<Treachery.Shared.Leader, LeaderState>(l, h.Game.LeaderState[l]))
            .OrderBy(l => l.Item2.TimeOfDeath).Select(l => l.Item1);

        int corpseNr = 0;
        if (corpses.Any())
        {
            y += spacing * (leaderPctHeight * (corpses.Count() - 1));
            int dy = 0;
            int displaceX = (int)(0.2f * leaderDiameter);
            foreach (var leader in corpses)
            {
                var l = new Point((int)x, (int)y - dy);

                if (h.Game.LeaderState[leader].IsFaceDownDead)
                {
                    <Image X="@(l.X + displaceX)" Y="@(l.Y)" Diameter="@(leaderDiameter)"
                           Src="@Skin.Current.GetFactionFacedownImageURL(p.Faction)"
                           Popover="@Popover(leader)"
                           ShadowColor="@Skin.Current.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1" />
                }
                else
                {
                    <MapLeader h="h" ToShow="leader" X=@(l.X + displaceX) Y=@(l.Y) Diameter="leaderDiameter"/>
                }

                displaceX *= -1;
                dy += (int)leaderPctHeight;
                corpseNr++;
            }

            y += spacing * leaderDiameter;
        }

        if (p.Faction == Faction.Green && !h.Game.MessiahIsAlive)
        {
            var l = new Point((int)x, (int)y);
            <Image X="@(x)" Y="@(y)" Diameter="@(0.5f * leaderDiameter)"
                   Src="@Skin.Current.Messiah_URL"
                   ShadowColor="@Skin.Current.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1" Popover="@Skin.Current.Describe(Concept.Messiah)"/>
            
            y += spacing * leaderDiameter;
        }

        NextColumnIfNecessary(ref y, ref x, spacing);
    }
}

@code {

    private static void NextColumnIfNecessary(ref float y, ref float x, float spacing)
    {
        if (y > 13 * Skin.Current.FORCETOKEN_RADIUS - 0.5f * x)
        {
            y = 2 * Skin.Current.FORCETOKEN_RADIUS;
            x += 5 * Skin.Current.FORCETOKEN_RADIUS;
        }
    }

    private string Popover(Leader l) => Player.Is(l.Faction) || Player.Is(Faction.Purple) ? Support.GetHeroHoverHTML(l, Game) : "?";
}
