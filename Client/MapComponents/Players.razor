@using Treachery.Shared
@inherits MapComponent

@{
    if (Game.CurrentPhase > Phase.SelectingFactions)
    {
        var techtokenOrbitRadius = Skin.Current.MapRadius + 30;

        foreach (var p in Game.Players)
        {
            float radiusModifier = 1;
            var position = PlayerTokenPosition(Game, p.PositionAtTable);
            if (h.HighlightPlayer(p))
            {
                radiusModifier = 1.6f;
            }
            var x = position.X - radiusModifier * Skin.Current.PlayerTokenRadius;
            var y = position.Y - radiusModifier * Skin.Current.PlayerTokenRadius;

            <Circle X="@position.X" Y="@position.Y" Radius="@(1.5f * Skin.Current.PlayerTokenRadius)" FillColor="@Skin.Current.TABLEPOSITION_BACKGROUNDCOLOR" />

            <Image X="@(x)" Y="@(y)" Diameter=@(radiusModifier * Skin.Current.PlayerTokenRadius * 2) Src="@Skin.Current.GetFactionTableImageURL(p.Faction)" 
                   ShadowColor="@Skin.Current.SHADOW_LIGHT" ShadowX="3" ShadowY="3" ShadowBlur="3" 
                   Title="@p.Name" Popover="@Intel(p)"/>

            if (p.Ally != Faction.None)
            {
                <Image X="@(position.X)" Y="@(position.Y + 20)" Diameter=@(1.2f * Skin.Current.PlayerTokenRadius) Src="@Skin.Current.GetFactionTableImageURL(p.Ally)" 
                       ShadowColor="@Skin.Current.SHADOW_LIGHT" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Intel(p.AlliedPlayer)"/>
            }

            var positionSector = Math.Floor((float)p.PositionAtTable * Map.NUMBER_OF_SECTORS / Game.MaximumNumberOfPlayers);
            double ttRad = (TWOPI / 180) + 0.02 + (4.5 - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;

            foreach (var tt in p.TechTokens)
            {
                ttRad += (TWOPI / 90);
                <Image X="@(Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius)"
                       Y="@(Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius)"
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(tt)" ShadowColor="@Skin.Current.SHADOW_DARK" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Support.GetTechTokenHTML(tt)"/>
            }

            var skilledLeader = Game.GetSkilledLeader(p);
            if (skilledLeader != null && Game.IsInFrontOfShield(skilledLeader))
            {
                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius;

                <Image X="@(ttx)"
                       Y="@(tty)"
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(skilledLeader)" ShadowColor="@Skin.Current.SHADOW_DARK" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Support.GetSkilledLeaderHTML(skilledLeader, h.Game.Skill(skilledLeader))"/>

                <MapText ToShow="@Skin.Current.Describe(Game.Skill(skilledLeader))"
                         X="@(ttx + Skin.Current.PlayerTokenRadius)" Y="@(tty + 2 * Skin.Current.PlayerTokenRadius)"
                         Font="@Skin.Current.SKILL_FONT" FontColor="@Skin.Current.SKILL_FONTCOLOR"
                         BorderWidth="@Skin.Current.SKILL_FONT_BORDERWIDTH" BorderColor="@Skin.Current.SKILL_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Center" MaxWidth="2.2f * Skin.Current.PlayerTokenRadius"/>
            }

            if (p.Faction == Faction.White && Game.LatestRevealedNoFieldValue >= 0)
            {
                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad)) * techtokenOrbitRadius - Skin.Current.PlayerTokenRadius;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad)) * techtokenOrbitRadius - Skin.Current.PlayerTokenRadius;

                <Image X="@(ttx + Skin.Current.FORCETOKEN_RADIUS)" Y="@(tty + Skin.Current.FORCETOKEN_RADIUS)" Diameter=@(2 * Skin.Current.FORCETOKEN_RADIUS) Src="@Skin.Current.FactionSpecialForceImage_URL[Faction.White]" 
                       ShadowColor="@Skin.Current.SHADOW_DARK" ShadowX="1" ShadowY="1" ShadowBlur="1"
                       Popover="@Skin.Current.Format("Latest revealed No-Field value: {0}", Game.LatestRevealedNoFieldValue)"/>

                <MapText ToShow="@Game.LatestRevealedNoFieldValue.ToString()"
                         X="@(ttx + 2 * Skin.Current.FORCETOKEN_RADIUS)" Y="@(tty + 2.5f * Skin.Current.FORCETOKEN_RADIUS)"
                         Font="@Skin.Current.TURN_FONT" FontColor="@Skin.Current.TURN_FONT_COLOR"
                         BorderWidth="@Skin.Current.TURN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.TURN_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Center"/>
            }

            var align = TextAlignment.Center;
            int textPositionX = position.X;
            if (position.X < 200)
            {
                align = TextAlignment.Left;
                textPositionX = (int)(position.X - 1.6 * Skin.Current.PlayerTokenRadius);
            }
            else if (position.X > Skin.Current.MapDimensions.X - 200)
            {
                align = TextAlignment.Right;
                textPositionX = (int)(position.X + 1.6 * Skin.Current.PlayerTokenRadius);
            }

            <MapText ToShow="@p.Name"
                     X="@(textPositionX)" Y="@(y + 60)"
                     Font="@Skin.Current.PLAYERNAME_FONT" FontColor="@Skin.Current.PLAYERNAME_FONTCOLOR"
                     BorderWidth="@Skin.Current.PLAYERNAME_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PLAYERNAME_FONT_BORDERCOLOR"
                     Align="@align" MaxWidth="6 * Skin.Current.PlayerTokenRadius"/>
        }
    }
}

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Browser.EnablePopovers();
    }

    private string Intel(Player p)
    {
        string result = "";
        result += Skin.Current.Format("<h5>{0} plays <span class=\"badge badge-primary badge-pill\" style=\"{1}\">{2}</span></h5>", p.Name, Support.Color(p.Faction), p.Faction);
        foreach (var v in LeaderManager.Leaders.Where(l => l.Faction == p.Faction))
        {
            result += Support.GetLeaderHTML(v);
        }

        result += "<div class=\"row m-0 mt-1 justify-content-center\">";

        result += "<div class=\"col-2 col-lg-1 p-0\">Reserves:</div>";

        result += string.Format("<div class=\"col-2 col-lg-1 p-0\"><img class=\"img-fluid m-0 p-0\" width=\"24\" height=\"24\" src=\"{0}\" title=\"{1}\" /><strong>&nbsp;{2}</strong></div>",
            Skin.Current.GetFactionForceImageURL(p.Faction),
            p.ForceName,
            p.ForcesInReserve);

        if (p.HasSpecialForces)
        {
            result += string.Format("<div class=\"col-2 col-lg-1 p-0\"><img class=\"img-fluid m-0 p-0\" width=\"24\" height=\"24\" src=\"{0}\" title=\"{1}\" /><strong>&nbsp;{2}</strong></div>",
                Skin.Current.GetFactionSpecialForceImageURL(p.Faction),
                p.SpecialForceName,
                p.SpecialForcesInReserve);
        }

        result += "</div>";

        result += "<div class=\"mt-1 text-left\">" + Skin.Current.GetFactionInfo_HTML(h.Game, p.Faction) + "</div>";
        return result;
    }

    private string IntelOfTechtokensAndSkilledLeaders(Player p)
    {
        string result = "";

        if (p.Faction == Faction.White && h.Game.LatestRevealedNoFieldValue >= 0)
        {
            result += string.Format("<div class=\"mt-1\">Latest revealed No-Field value: <strong>{0}</strong></div>", h.Game.LatestRevealedNoFieldValue);
        }

        foreach (var v in p.TechTokens)
        {
            result += Support.GetTechTokenHTML(v);
        }

        var skilledLeader = h.Game.GetSkilledLeader(p);
        if (skilledLeader != null && h.Game.IsInFrontOfShield(skilledLeader))
        {
            result += Support.GetSkilledLeaderHTML(skilledLeader, h.Game.Skill(skilledLeader));
        }

        return result;
    }

} 