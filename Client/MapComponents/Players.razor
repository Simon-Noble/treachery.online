<!--
* Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using System.Drawing
@inherits MapComponent

<div @ref=@element>

    @if (Game.CurrentPhase > Phase.SelectingFactions)
    {
        foreach (var p in Game.Players)
        {
            var forcesToDraw = new List<MapForce>();

            float radiusModifier = 1;
            if (h.Status.PlayerShouldBeHighlighted(p))
            {
                radiusModifier = 1.5f;
            }

            var position = PlayerTokenPosition(Game, p.PositionAtTable);
            var x = position.X - radiusModifier * Skin.Current.PlayerTokenRadius;
            var y = position.Y - radiusModifier * Skin.Current.PlayerTokenRadius;
            var factionTokenDiameter = (radiusModifier * Skin.Current.PlayerTokenRadius * 2);
            var positionSector = (float)Math.Floor((float)p.PositionAtTable * Map.NUMBER_OF_SECTORS / Game.MaximumNumberOfPlayers);

            <Circle X="@position.X" Y="@position.Y" Radius="@(1.35f * Skin.Current.PlayerTokenRadius)" FillColor="@Skin.Current.TABLEPOSITION_BACKGROUNDCOLOR" />

            <Image X="@(x)" Y="@(y)" Diameter=@factionTokenDiameter Src="@Skin.Current.GetFactionTableImageURL(p.Faction)" 
                   ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Intel(p)"/>

            if (p.Ally != Faction.None)
            {
                <Image X="@(position.X)" Y="@(position.Y + 0.25f * Skin.Current.PlayerTokenRadius)" Diameter=@(1.2f * Skin.Current.PlayerTokenRadius) Src="@Skin.Current.GetFactionTableImageURL(p.Ally)" 
                       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Intel(p.AlliedPlayer)"/>
            }

            float positionOnCircle = (TWOPI / 180) + (4.5f - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;
                        
            //Homeworlds
            foreach (var homeworld in p.Homeworlds)
            {
                positionOnCircle += 0.06f;

                var homeworldXY = Pos(positionOnCircle, Skin.Current.PlayerTokenRadius);

                <Image X=homeworldXY.X Y=@homeworldXY.Y
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(homeworld.World)" ShadowColor="@Skin.Current.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1"
                       Popover="@HomeworldIntel(homeworld)" OnClick="e => OnClick(e, homeworld)"/>

                if (h.Status.HighlightedTerritories.Contains(homeworld.Territory))
                {
                    <Circle X=@(homeworldXY.X + Skin.Current.PlayerTokenRadius) Y=@(@homeworldXY.Y + Skin.Current.PlayerTokenRadius) Radius=@Skin.Current.PlayerTokenRadius 
                            FillColor="@Skin.Current.HIGHLIGHT_OVERLAY_COLOR" StrokeWidth="1" StrokeColor="red"/>
                }

                var verticalRoomRequired = Game.BattalionsIn(homeworld).Count() * Skin.Current.FORCETOKEN_RADIUS;
                var reservesY = homeworldXY.Y + Skin.Current.PlayerTokenRadius + 0.5f * (Skin.Current.PlayerTokenRadius - verticalRoomRequired);

                foreach (var b in Game.BattalionsIn(homeworld)) {

                    var reservesX = homeworldXY.X + 0.8f * Skin.Current.PlayerTokenRadius;

                    if (b.AmountOfForces > 0)
                    {
                        forcesToDraw.Add(new MapForce() { X = reservesX, Y = reservesY, Special = false, Amount = b.AmountOfForces, Faction = b.Faction });
                        reservesX += Skin.Current.FORCETOKEN_RADIUS;
                    }

                    if (b.AmountOfSpecialForces > 0)
                    {
                        forcesToDraw.Add(new MapForce() { X = reservesX, Y = reservesY, Special = true, Amount = b.AmountOfSpecialForces, Faction = b.Faction });
                    }

                    reservesY += Skin.Current.FORCETOKEN_RADIUS;
                }
            }

            foreach (var tt in p.TechTokens)
            {
                positionOnCircle += (TWOPI / 90);
                <Image XY=@Pos(positionOnCircle, Skin.Current.PlayerTokenRadius)
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(tt)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Popup.Get(tt)" PopoverStyle=""/>
            }

            foreach (var skilledLeader in Game.GetSkilledLeaders(p).Where(l => Game.IsInFrontOfShield(l))) {

                positionOnCircle += (TWOPI / 90);

                <Image XY=@Pos(positionOnCircle, Skin.Current.PlayerTokenRadius)
                        Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                        Src="@Skin.Current.GetImageURL(skilledLeader)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                        Popover="@Popup.Get(skilledLeader, h.Game.Skill(skilledLeader))" PopoverStyle=""/>

                <MapText ToShow="@Skin.Current.Describe(Game.Skill(skilledLeader))"
                        XY=@Pos(positionOnCircle)
                        Font="@Skin.Current.SKILL_FONT" FontColor="@Skin.Current.SKILL_FONTCOLOR"
                        BorderWidth="@Skin.Current.SKILL_FONT_BORDERWIDTH" BorderColor="@Skin.Current.SKILL_FONT_BORDERCOLOR"
                        Align="@TextAlignment.Center" MaxWidth="2.2f * Skin.Current.PlayerTokenRadius"
                        Popover="@Popup.Get(skilledLeader, h.Game.Skill(skilledLeader))" PopoverStyle="" />
            }

            if (p.Faction == Faction.White && Game.LatestRevealedNoFieldValue >= 0)
            {
                positionOnCircle += (TWOPI / 90);

                <Image XY=@Pos(positionOnCircle, Skin.Current.FORCETOKEN_RADIUS) Diameter=@(2 * Skin.Current.FORCETOKEN_RADIUS) Src="@Skin.Current.FactionSpecialForceImage_URL[Faction.White]"
                       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
                       Popover="@Skin.Current.Format("Latest revealed No-Field: {0}", Game.LatestRevealedNoFieldValue)"/>

                <MapText ToShow="@Game.LatestRevealedNoFieldValue.ToString()"
                         XY=@Pos(positionOnCircle)
                         Font="@Skin.Current.FORCETOKEN_FONT" FontColor="@Skin.Current.FORCETOKEN_FONTCOLOR"
                         BorderWidth="@Skin.Current.FORCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.FORCETOKEN_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Center"/>
            }

            if (p.Faction == Faction.Pink && Game.PinkLoyalLeader != null)
            {
                positionOnCircle += (TWOPI / 90);

                <Image XY=@Pos(positionOnCircle, Skin.Current.PlayerTokenRadius)
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(Game.PinkLoyalLeader)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
            Popover="@Skin.Current.Format("{0} is Loyal to {1}", Game.PinkLoyalLeader, Faction.Pink)" PopoverStyle="" />
            }

            var totalSpiceToReceiveLater = p.Bribes + p.BankedResources + p.Extortion;

            if (totalSpiceToReceiveLater > 0)
            {
                positionOnCircle += (TWOPI / 90);
                string tooltip = Skin.Current.Format("To be collected during {0}", MainPhase.Contemplate);

                <Image 
                    XY=@Pos(positionOnCircle, Skin.Current.FORCETOKEN_RADIUS) 
                    Diameter=@(2 * Skin.Current.FORCETOKEN_RADIUS)
                    Src="@Skin.Current.Harvester_URL"
                    Title=@tooltip
                    BackgroundCircleColor="#black"
                    BackgroundCircleDiameter=@(1.5f * Skin.Current.FORCETOKEN_RADIUS)
                    ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText 
                    ToShow=@totalSpiceToReceiveLater.ToString()
                    XY=@Pos(positionOnCircle)
                    Font="@Skin.Current.RESOURCETOKEN_FONT" FontColor="@Skin.Current.RESOURCETOKEN_FONTCOLOR"
                    Title=@tooltip
                    BorderWidth="@Skin.Current.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.RESOURCETOKEN_FONT_BORDERCOLOR"
                    Align="@TextAlignment.Center"/>
            }

            if (p.ResourcesAfterBidding > 0)
            {
                positionOnCircle += (TWOPI / 90);
                string tooltip = Skin.Current.Format("Subbed {0}", Concept.Resource);

                <Image 
                    XY=@Pos(positionOnCircle, Skin.Current.FORCETOKEN_RADIUS) 
                    Diameter=@(2 * Skin.Current.FORCETOKEN_RADIUS) 
                    Popover=@tooltip
                    Src="@Skin.Current.Harvester_URL"
                    Title=@tooltip
                    BackgroundCircleColor="black"
                    BackgroundCircleDiameter=@(1.5f * Skin.Current.FORCETOKEN_RADIUS)
                    ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText ToShow=@tooltip
                    XY=@Pos(positionOnCircle)
                    Font="@Skin.Current.RESOURCETOKEN_FONT" FontColor="@Skin.Current.RESOURCETOKEN_FONTCOLOR"
                    Title=@tooltip
                    BorderWidth="@Skin.Current.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.RESOURCETOKEN_FONT_BORDERCOLOR"
                    Align="@TextAlignment.Center"/>
            }

            foreach (var f in forcesToDraw)
            {
                <MapForce X=@f.X Y=@f.Y Special=@f.Special Amount=@f.Amount Faction=@f.Faction Threatened=@false ShowPopover="true" Font="@Skin.Current.SKILL_FONT" Diameter="@Skin.Current.FORCETOKEN_RADIUS" />
            }

            <MapText ToShow="@p.Name"
                     X="@position.X" Y="@y"
                     Font="@Skin.Current.PLAYERNAME_FONT" FontColor="@Skin.Current.PLAYERNAME_FONTCOLOR"
                     BorderWidth="@Skin.Current.PLAYERNAME_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PLAYERNAME_FONT_BORDERCOLOR"
                     Align="TextAlignment.Center" MaxWidth="6 * Skin.Current.PlayerTokenRadius"/>
        }
    }

</div>

@code {

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    private Situation situation = new();
    protected override bool ShouldRender() => situation.RequiresUpdate(Game);

    private bool EnableCameras => h.VideoDevice != null && Game.Players.Count(p => !p.IsBot) > 1 && h.Player != null;

    private string Intel(Player p)
    {
        string result = Skin.Current.Format("<p><strong>{0} plays {1}</strong></p>", p.Name, p.Faction);

        foreach (var v in LeaderManager.Leaders.Where(l => l.Faction == p.Faction))
        {
            result += GetLeaderHTML(v);
        }

        result += "<div class=\"row m-0 mt-1 justify-content-center\">";

        result += "</div>";

        result += "<div class=\"mt-1 text-start\">" + Skin.Current.GetFactionInfo_HTML(h.Game, p.Faction) + "</div>";
        return result;
    }

    private string GetLeaderHTML(Leader l)
    {
        if (l == null)
        {
            return "";
        }
        else
        {
            return string.Format("<img class='img-fluid' src='{0}' width=80 style='filter:drop-shadow(-3px 3px 2px black);'/>", Skin.Current.GetImageURL(l));
        }
    }

    private string DetermineVideoStreamId(Player p) => "video" + p.PositionAtTable;

    private string HomeworldIntel(Homeworld w)
    {
        if (Game.Applicable(Rule.Homeworlds))
        {
            return Popup.Get(w, Game.GetStatusOf(w));
        }
        else
        {
            return Skin.Current.Format("{0} Reserves", w.Faction);
        }
    }

    private async Task OnClick(MouseEventArgs e, Location l)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs() { Location = l, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

    internal class MapForce
    {
        internal float X;
        internal float Y;
        internal bool Special;
        internal int Amount;
        internal Faction Faction;
    }

    private PointF Pos(float positionOnCircle, float radiusOfToken = 0) {

        var mapradius = 1.05f * Skin.Current.MapRadius;
        return new PointF(
            X = Skin.Current.PlanetCenter.X + (float)(Math.Cos(positionOnCircle) * mapradius) - radiusOfToken, 
            Y = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(positionOnCircle) * mapradius) - radiusOfToken);
    }
    
}