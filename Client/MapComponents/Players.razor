<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent

<div @ref=@element>

    @if (Game.CurrentPhase > Phase.SelectingFactions)
    {
        var techtokenOrbitRadius = 1.01f * Skin.Current.MapRadius;

        foreach (var p in Game.Players)
        {
            float radiusModifier = 1;
            if (h.Status.PlayerShouldBeHighlighted(p))
            {
                radiusModifier = 1.5f;
            }

            var position = PlayerTokenPosition(Game, p.PositionAtTable);
            var x = position.X - radiusModifier * Skin.Current.PlayerTokenRadius;
            var y = position.Y - radiusModifier * Skin.Current.PlayerTokenRadius;
            var factionTokenDiameter = (radiusModifier * Skin.Current.PlayerTokenRadius * 2);

            var positionSector = Math.Floor((float)p.PositionAtTable * Map.NUMBER_OF_SECTORS / Game.MaximumNumberOfPlayers);

            double vidRad = (TWOPI / 180) - 0.17 + (4.5 - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;
            var factionLogoIsOnRightSideOfMap = x > 0.5f * Skin.Current.PlanetCenter.X;
            var videoposition = factionLogoIsOnRightSideOfMap ? x + factionTokenDiameter + 1 : x - 2*factionTokenDiameter - 1;
            
            if (p == h.Player && EnableCameras)
            {
                <Videocapture h=@h 
                    X=@(Skin.Current.PlanetCenter.X + (float)(Math.Cos(vidRad) * techtokenOrbitRadius) - factionTokenDiameter)
                    Y=@(Skin.Current.PlanetCenter.Y + (float)(Math.Sin(vidRad) * techtokenOrbitRadius) - factionTokenDiameter) 
                    Width=2*factionTokenDiameter Height=2*factionTokenDiameter SymbolOnRight=!factionLogoIsOnRightSideOfMap/>
            }

            if (p != h.Player)
            {
                <Videostream h=@h 
                    X=@(Skin.Current.PlanetCenter.X + (float)(Math.Cos(vidRad) * techtokenOrbitRadius) - factionTokenDiameter) 
                    Y=@(Skin.Current.PlanetCenter.Y + (float)(Math.Sin(vidRad) * techtokenOrbitRadius) - factionTokenDiameter) 
                    Width=2*factionTokenDiameter Height=2*factionTokenDiameter StreamId=@DetermineVideoStreamId(p)/>
            }

            <Circle X="@position.X" Y="@position.Y" Radius="@(1.35f * Skin.Current.PlayerTokenRadius)" FillColor="@Skin.Current.TABLEPOSITION_BACKGROUNDCOLOR" />

            <Image X="@(x)" Y="@(y)" Diameter=@factionTokenDiameter Src="@Skin.Current.GetFactionTableImageURL(p.Faction)" 
                   ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Intel(p)"/>

            if (p.Ally != Faction.None)
            {
                <Image X="@(position.X)" Y="@(position.Y + 0.25f * Skin.Current.PlayerTokenRadius)" Diameter=@(1.2f * Skin.Current.PlayerTokenRadius) Src="@Skin.Current.GetFactionTableImageURL(p.Ally)" 
                       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Intel(p.AlliedPlayer)"/>
            }

            double ttRad = (TWOPI / 180) + 0.06 + (4.5 - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;
                        
            //Homeworlds
            var deltaX = 0f;
            foreach (var homeworld in p.Homeworlds)
            {
                var homeworldX = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad) * Skin.Current.MapRadius) - Skin.Current.PlayerTokenRadius + deltaX;
                var homeworldY = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad) * Skin.Current.MapRadius) - Skin.Current.PlayerTokenRadius;

                <Image X=homeworldX Y=@homeworldY
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(homeworld.World)" ShadowColor="@Skin.Current.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1"
                       Popover="@Popup.Get(homeworld, Game.GetStatusOf(homeworld))" />

                var reservesX = homeworldX + 0.75f * Skin.Current.PlayerTokenRadius;
                var reservesY = homeworldY + 1.25f * Skin.Current.PlayerTokenRadius;

                foreach (var b in Game.BattalionsIn(homeworld)) {

                    if (b.AmountOfForces > 0)
                    {
                        <MapForce X=@reservesX Y=@reservesY Special=@false Amount=@b.AmountOfForces Faction=@p.Faction Threatened=@false ShowPopover="true" Font="@Skin.Current.SKILL_FONT" Diameter="@Skin.Current.FORCETOKEN_RADIUS" />
                        reservesX += Skin.Current.FORCETOKEN_RADIUS;
                    }

                    if (b.AmountOfSpecialForces > 0)
                    {
                        <MapForce X=@reservesX Y=@reservesY Special=@true Amount=@b.AmountOfSpecialForces Faction=@p.Faction Threatened=@false ShowPopover="true" Font="@Skin.Current.SKILL_FONT" Diameter="@Skin.Current.FORCETOKEN_RADIUS" />
                    }

                    reservesY += Skin.Current.FORCETOKEN_RADIUS;
                }

                deltaX += 1.5f * Skin.Current.PlayerTokenRadius;
            }

            ttRad += 0.04;
 
            foreach (var tt in p.TechTokens)
            {
                ttRad += (TWOPI / 90);
                <Image X="@(Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius)"
                       Y="@(Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius)"
                       Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                       Src="@Skin.Current.GetImageURL(tt)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Popup.Get(tt)" PopoverStyle=""/>
            }

            foreach (var skilledLeader in Game.GetSkilledLeaders(p).Where(l => Game.IsInFrontOfShield(l))) {

                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad) * techtokenOrbitRadius) - Skin.Current.PlayerTokenRadius;

                <Image X="@(ttx)"
                        Y="@(tty)"
                        Diameter=@(2 * Skin.Current.PlayerTokenRadius)
                        Src="@Skin.Current.GetImageURL(skilledLeader)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                        Popover="@Popup.Get(skilledLeader, h.Game.Skill(skilledLeader))" PopoverStyle=""/>

                <MapText ToShow="@Skin.Current.Describe(Game.Skill(skilledLeader))"
                        X="@(ttx + Skin.Current.PlayerTokenRadius)" Y="@(tty + Skin.Current.PlayerTokenRadius)"
                        Font="@Skin.Current.SKILL_FONT" FontColor="@Skin.Current.SKILL_FONTCOLOR"
                        BorderWidth="@Skin.Current.SKILL_FONT_BORDERWIDTH" BorderColor="@Skin.Current.SKILL_FONT_BORDERCOLOR"
                        Align="@TextAlignment.Center" MaxWidth="2.2f * Skin.Current.PlayerTokenRadius"
                        Popover="@Popup.Get(skilledLeader, h.Game.Skill(skilledLeader))" PopoverStyle="" />
            }

            if (p.Faction == Faction.White && Game.LatestRevealedNoFieldValue >= 0)
            {
                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;

                <Image X="@(ttx)" Y="@(tty)" Diameter=@(2 * Skin.Current.FORCETOKEN_RADIUS) Src="@Skin.Current.FactionSpecialForceImage_URL[Faction.White]" 
                       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
                       Popover="@Skin.Current.Format("Latest revealed No-Field: {0}", Game.LatestRevealedNoFieldValue)"/>

                <MapText ToShow="@Game.LatestRevealedNoFieldValue.ToString()"
                         X="@(ttx + Skin.Current.FORCETOKEN_RADIUS)" Y="@(tty + Skin.Current.FORCETOKEN_RADIUS)"
                         Font="@Skin.Current.FORCETOKEN_FONT" FontColor="@Skin.Current.FORCETOKEN_FONTCOLOR"
                         BorderWidth="@Skin.Current.FORCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.FORCETOKEN_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Center"/>
            }

            var totalSpiceToReceiveLater = p.Bribes + p.BankedResources;

            if (totalSpiceToReceiveLater > 0)
            {
                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;

                string tooltip = "Bribes";

                <Image X=ttx Y=tty Width=@(2 * Skin.Current.FORCETOKEN_RADIUS) Height=@(2 * Skin.Current.FORCETOKEN_RADIUS) 
                    Src="@Skin.Current.Harvester_URL"
                    Title=@tooltip
                    ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText ToShow=@totalSpiceToReceiveLater.ToString()
                     X=@(ttx + Skin.Current.FORCETOKEN_RADIUS) Y=@(tty + Skin.Current.FORCETOKEN_RADIUS)
                     Font="@Skin.Current.RESOURCETOKEN_FONT" FontColor="@Skin.Current.RESOURCETOKEN_FONTCOLOR"
                     Title=@tooltip
                     BorderWidth="@Skin.Current.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.RESOURCETOKEN_FONT_BORDERCOLOR"
                     Align="@TextAlignment.Center"/>
            }

            if (p.ResourcesAfterBidding > 0)
            {
                ttRad += (TWOPI / 90);
                var ttx = Skin.Current.PlanetCenter.X + (float)(Math.Cos(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;
                var tty = Skin.Current.PlanetCenter.Y + (float)(Math.Sin(ttRad)) * techtokenOrbitRadius - Skin.Current.FORCETOKEN_RADIUS;

                string tooltip = Skin.Current.Format("Subbed {0}", Concept.Resource);

                <Image X=ttx Y=tty Width=@(2 * Skin.Current.FORCETOKEN_RADIUS) Height=@(2 * Skin.Current.FORCETOKEN_RADIUS) Popover=@tooltip
                    Src="@Skin.Current.Harvester_URL"
                    Title=@tooltip
                    ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText ToShow=@tooltip
                     X=@(ttx + Skin.Current.FORCETOKEN_RADIUS) Y=@(tty + Skin.Current.FORCETOKEN_RADIUS)
                     Font="@Skin.Current.RESOURCETOKEN_FONT" FontColor="@Skin.Current.RESOURCETOKEN_FONTCOLOR"
                     Title=@tooltip
                     BorderWidth="@Skin.Current.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.RESOURCETOKEN_FONT_BORDERCOLOR"
                     Align="@TextAlignment.Center"/>
            }

            <MapText ToShow="@p.Name"
                     X="@position.X" Y="@y"
                     Font="@Skin.Current.PLAYERNAME_FONT" FontColor="@Skin.Current.PLAYERNAME_FONTCOLOR"
                     BorderWidth="@Skin.Current.PLAYERNAME_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PLAYERNAME_FONT_BORDERCOLOR"
                     Align="TextAlignment.Center" MaxWidth="6 * Skin.Current.PlayerTokenRadius"/>
        }
    }

</div>

@code {

    private Situation situation = new();
    protected override bool ShouldRender() => situation.RequiresUpdate(Game);

    private bool EnableCameras => h.VideoDevice != null && Game.Players.Count(p => !p.IsBot) > 1 && h.Player != null;

    private string Intel(Player p)
    {
        string result = Skin.Current.Format("<p><strong>{0} plays {1}</strong></p>", p.Name, p.Faction);

        foreach (var v in LeaderManager.Leaders.Where(l => l.Faction == p.Faction))
        {
            result += GetLeaderHTML(v);
        }

        result += "<div class=\"row m-0 mt-1 justify-content-center\">";

        result += "</div>";

        result += "<div class=\"mt-1 text-start\">" + Skin.Current.GetFactionInfo_HTML(h.Game, p.Faction) + "</div>";
        return result;
    }

    private string GetLeaderHTML(Leader l)
    {
        if (l == null)
        {
            return "";
        }
        else
        {
            return string.Format("<img class='img-fluid' src='{0}' width=80 style='filter:drop-shadow(-3px 3px 2px black);'/>", Skin.Current.GetImageURL(l));
        }
    }

    private string DetermineVideoStreamId(Player p) => "video" + p.PositionAtTable;

} 