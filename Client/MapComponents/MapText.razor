@using Treachery.Shared;

@inherits MapComponent

@if (Popover != null) {

    <span 
        style="position: absolute; white-space: nowrap; left: @Px(AlignedX); top: @Px(Y-TextHeight); user-select: none; font: @Font; color: @FontColor; max-width: @Px(MaxWidth); @Border" 
        data-trigger="hover" data-toggle="popover" data-html="true" data-animation="false" data-delay="50" data-container="body" data-content="@Popover" data-template="@PopoverTemplate">
        @ToShow
    </span>
}
else
{
    <span 
        style="position: absolute; white-space: nowrap; left: @Px(AlignedX); top: @Px(Y-TextHeight); pointer-events: none; user-select: none; font: @Font; color: @FontColor; max-width: @Px(MaxWidth); @Border">
        @ToShow
    </span>
}

@code {

    [Parameter]
    public string ToShow { get; set; }

    [Parameter]
    public string Font { get; set; }

    [Parameter]
    public string FontColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 0;

    [Parameter]
    public string BorderColor { get; set; } = "black";

    [Parameter]
    public TextAlignment Align { get; set; } = TextAlignment.Left;

    [Parameter]
    public float MaxWidth { get; set; } = 4096;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Popover { get; set; } = null;

    private float TextWidth;
    private float TextHeight;
    private float AlignedX;
    protected override async Task OnParametersSetAsync()
    {
        var textDimensions = await Browser.MeasureText(ToShow, Font);

        TextWidth = textDimensions.Width;
        TextHeight = textDimensions.Height;

        AlignedX = Align switch
        {
            TextAlignment.Center => X - 0.5f * TextWidth,
            TextAlignment.Right => X - TextWidth,
            _ => X
        };
    }

    private string Border => Skin.TextBorder(BorderWidth, BorderColor);
}
