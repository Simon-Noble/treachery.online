@inherits MapComponent

<span style="position: absolute; white-space: nowrap; left: @Px(AlignedX); top: @Px(Y-20); font: @Font; color: @FontColor; max-width: @Px(MaxWidth); -webkit-text-stroke-width: @Px(BorderWidth); -webkit-text-stroke-color: @BorderColor;">
    @ChildContent
</span>

@code {

    [Parameter]
    public string Font { get; set; }

    [Parameter]
    public string FontColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 0;

    [Parameter]
    public string BorderColor { get; set; } = "black";

    [Parameter]
    public TextAlignment Align { get; set; } = TextAlignment.Left;

    [Parameter]
    public float MaxWidth { get; set; } = 4096;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private float AlignedX;
    protected override async Task OnInitializedAsync()
    {
        AlignedX = await GetAlignedX();
    }

    private async Task<float> GetAlignedX()
    {
        float width = await Browser.MeasureText(ChildContent.ToString(), Font);
        Console.WriteLine("Width of " + ChildContent.ToString() + ": " + width);

        switch (Align)
        {
            case TextAlignment.Center: return X - 0.5f * await Browser.MeasureText(ChildContent.ToString(), Font);
            case TextAlignment.Right: return X - await Browser.MeasureText(ChildContent.ToString(), Font);
            default: return X;
        }
    }
}
