<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@inherits MapComponent
@implements IDisposable;

@if (Popover != null) {

    <span 
        @ref=@element
        style=@Style
        data-bs-trigger="hover" data-bs-toggle="popover" data-bs-html="true" data-bs-animation="false" data-bs-delay="50" data-container="body" data-bs-content="@Popover" data-bs-template="@PopoverTemplate">
        @ToShow
        @ChildContent
    </span>
}
else
{
    <span 
        @ref=@element
        style="@Style;user-select:none;">
        @ToShow
        @ChildContent
    </span>
}

@code {

    [Parameter]
    public string ToShow { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Font { get; set; }

    [Parameter]
    public string FontColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 0;

    [Parameter]
    public string BorderColor { get; set; } = "black";

    [Parameter]
    public TextAlignment Align { get; set; } = TextAlignment.Left;

    [Parameter]
    public float MaxWidth { get; set; } = 4096;

    [Parameter]
    public string Popover { get; set; } = null;

    private float TextWidth;
    private float TextHeight;
    private float AlignedX;

    protected override async Task OnParametersSetAsync()
    {
        var textDimensions = await Browser.MeasureText(ToShow, Font);

        TextWidth = textDimensions.Width;
        TextHeight = 0.45f * textDimensions.Height;

        AlignedX = Align switch
        {
            TextAlignment.Center => X - 0.5f * TextWidth,
            TextAlignment.Right => X - TextWidth,
            _ => X
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null)
        {
            await Browser.EnablePopovers(element);
        }
    }

    private string Style => string.Format("position:absolute;white-space:nowrap;left:{0};top:{1};user-select:none;font:{2};color:{3};max-width:{4};{5};", Px(AlignedX), Px(Y - TextHeight), Font, FontColor, Px(MaxWidth), Support.TextBorder(BorderWidth, BorderColor));

    public void Dispose()
    {
        if (Popover != null)
        {
            _ = Browser.RemovePopovers(element);
        }
    }
}
