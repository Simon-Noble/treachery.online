<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->
@using Treachery.Shared;
@inherits MapComponent
@implements IDisposable;

@if (Popover != null && !PopoverAsTooltip)
{

    <span @ref=@element
          style=@style
          data-bs-trigger="hover" data-bs-toggle="popover" data-bs-html="true" data-bs-animation="false" data-bs-delay="50" data-container="body" data-bs-content="@Popover" data-bs-template="@PopoverTemplate">
        @ToShow
        @ChildContent
    </span>
}
else
{
    <span title=@Popover
          style="@style;user-select:none;">
        @ToShow
        @ChildContent
    </span>
}

@code {

    [Parameter]
    public string ToShow { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Font { get; set; }

    [Parameter]
    public string FontColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 0;

    [Parameter]
    public string BorderColor { get; set; } = "black";

    [Parameter]
    public TextAlignment Align { get; set; } = TextAlignment.Left;

    [Parameter]
    public float MaxWidth { get; set; } = 0;

    [Parameter]
    public string Popover { get; set; }
    private string _popover = null;
    private bool _popoverNeedsUpdate = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; }

    private string style;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsUpdate = true;
        }

        var transformX = Align switch
        {
            TextAlignment.Left => "",
            TextAlignment.Center => "translateX(-50%)",
            TextAlignment.Right => "translateX(-100%)",
            _ => ""
        };

        var textAlign = Align switch
        {
            TextAlignment.Left => "left",
            TextAlignment.Center => "center",
            TextAlignment.Right => "right",
            _ => ""
        };

        var border = Support.TextBorder(BorderWidth, BorderColor);
        var pointerevents = Popover != null ? "cursor:pointer;pointer-events:all" : "pointer-events:none";

        var maxWidth = MaxWidth > 0 ? $"max-width:{Px(MaxWidth)}" : "";
        var wrapping = MaxWidth > 0 ? "" : "white-space:nowrap";

        style = $"position:absolute;text-align:{textAlign};transform:{transformX}translateY(-40%);left:{Px(X)};top:{Px(Y)};user-select:none;font:{Font};color:{FontColor};{maxWidth};{wrapping};{border};{pointerevents};";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!PopoverAsTooltip)
        {
            if (firstRender && Popover != null)
            {
                await Browser.EnablePopover(element);
            }
            else if (_popoverNeedsUpdate)
            {
                _popoverNeedsUpdate = false;
                await Browser.RefreshPopover(element);
            }
        }
    }

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(element);
        }
    }
}
