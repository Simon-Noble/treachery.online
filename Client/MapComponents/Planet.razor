<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent
@implements IDisposable;
 
<svg @ref=@element width="@Skin.Current.MapDimensions.X" height="@Skin.Current.MapDimensions.Y" viewBox="0 0 @Skin.Current.MapDimensions.X @Skin.Current.MapDimensions.Y" 
     version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" 
     style="position: absolute; left: 0px; top: 0px; height: 100%; width: 100%;" pointer-events="none">

    <!-- Clipping areas of each sector -->
    @for (int i = 0; i < Map.NUMBER_OF_SECTORS; i++) {

        <clipPath id="@SectorClipName(@i)">
            <path d="
                M @Round(ScaleX * Skin.Current.PlanetCenter.X),@Round(ScaleY * Skin.Current.PlanetCenter.Y)
                L @Round(ScaleX * StartX(i)),@Round(ScaleY * StartY(i)) 
                A @Round(ScaleX * Skin.Current.PlanetRadius) @Round(ScaleY * Skin.Current.PlanetRadius) @Angle 0 0 @Round(ScaleX * EndX(i)) @Round(ScaleY * EndY(i))
                Z"/>
        </clipPath>
    }

    <clipPath id="@SectorClipName(-1)">
        <rect x="0" y="0" width="@Skin.Current.MapDimensions.X" height="@Skin.Current.MapDimensions.Y"/>
    </clipPath>

    <!-- Shield Wall -->
    @if (Game.ShieldWallDestroyed)
    {
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ShieldWall)" fill="@Skin.Current.BLOWNSHIELDWALL_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.Arrakeen.Territory)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.Carthag.Territory)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ImperialBasin)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
    }

    <!-- SSW -->
    @if (Game.Applicable(Rule.SSW) && Game.IsSpecialStronghold(Game.Map.ShieldWall))
    {
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ShieldWall)" fill="#FF6F34" fill-opacity="0.6" stroke="transparent"/>
    }

    <!-- Highlighted Territories -->
    @foreach (var territory in h.Status.HighlightedTerritories.Where(t => t != Game.Map.HiddenMobileStronghold.Territory)) {

        <path d="@Skin.Current.GetTerritoryBorder(territory)" fill="@Skin.Current.HIGHLIGHT_OVERLAY_COLOR" fill-opacity="1" stroke="red" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
    }

    <!-- Locations -->
    @foreach (var location in Game.Map.Locations().Where(l => l != Game.Map.HiddenMobileStronghold && l is not Homeworld)) {

        <g clip-path="url(#@SectorClipName(location.Sector))">
            <g
                fill="@LocationColor(location)"
                cursor="pointer" pointer-events="all" @onclick="@(e => OnClick(e, location))"
                data-bs-trigger="hover" data-bs-toggle="popover" data-bs-html="true" data-bs-animation="false" data-bs-delay="50" data-bs-content="@Intel(location)" data-bs-template="@PopoverTemplate">

                    <path d="@Skin.Current.GetTerritoryBorder(location.Territory)"/>
            </g>
        </g>
    }

</svg>



@code {

    private Situation situation = new();
    protected override bool ShouldRender() => situation.RequiresUpdate(Game);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {

            await Browser.EnablePopovers(element);
        }
        else
        {
            await Browser.RefreshPopovers(element);
        }
    }

    private string LocationColor(Location l) {

        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return Skin.Current.STORM_OVERLAY_COLOR;
        }

        if (Game.AtomicsAftermath == l.Territory)
        {
            return Skin.Current.BLOWNSHIELDWALL_OVERLAY_COLOR;
        }

        if (Game.HasStormPrescience(Player) && NextStormWillPassOver(l))
        {
            return Skin.Current.STORM_PRESCIENCE_OVERLAY_COLOR;
        }

        return "transparent";
    }

    private string LocationTexture(Location l) {

        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return "url(#clouds)";
        }

        return "";
    }

    private bool NextStormWillPassOver(Location l)
    {
        for (int i = 1; i <= Game.NextStormMoves; i++)
        {
            if ((Game.SectorInStorm + i) % Map.NUMBER_OF_SECTORS == l.Sector)
            {
                return true;
            }
        }

        return false;
    }

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    private async Task OnClick(MouseEventArgs e, Location l)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs() { Location = l, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

    private float Angle => 360f / Map.NUMBER_OF_SECTORS;

    private float StartX(int sector) => (float)Math.Cos(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.X;
    private float StartY(int sector) => (float)Math.Sin(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.Y;
    private float EndX(int sector) => (float)Math.Cos(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.X;
    private float EndY(int sector) => (float)Math.Sin(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.Y;

    private float ScaleX = 563f / Skin.Current.MapDimensions.X;

    private float ScaleY = 626f / Skin.Current.MapDimensions.Y;

    private string PointerEvents => OnLocationClick.HasDelegate ? "all" : "none";

    private string SectorClipName(int i) => "clipOfSector" + i;

    public void Dispose()
    {
        _ = Browser.RemovePopovers(element);
    }
}
