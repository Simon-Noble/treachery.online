<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent
 
<svg width="@Skin.Current.MapDimensions.X" height="@Skin.Current.MapDimensions.Y" viewBox="0 0 @Skin.Current.MapDimensions.X @Skin.Current.MapDimensions.Y" 
     version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" 
     style="position: absolute; left: 0px; top: 0px; height: 100%; width: 100%;" pointer-events="none">

    <!-- Clipping areas of each sector -->
    @for (int i = 0; i < Map.NUMBER_OF_SECTORS; i++) {

        <clipPath id="@SectorClipName(@i)">
            <path d="
                M @Round(ScaleX * Skin.Current.PlanetCenter.X),@Round(ScaleY * Skin.Current.PlanetCenter.Y)
                L @Round(ScaleX * StartX(i)),@Round(ScaleY * StartY(i)) 
                A @Round(ScaleX * Skin.Current.PlanetRadius) @Round(ScaleY * Skin.Current.PlanetRadius) @Angle 0 0 @Round(ScaleX * EndX(i)) @Round(ScaleY * EndY(i))
                Z"/>
        </clipPath>
    }

    <clipPath id="@SectorClipName(-1)">
        <rect x="0" y="0" width="@Skin.Current.MapDimensions.X" height="@Skin.Current.MapDimensions.Y"/>
    </clipPath>

    <!-- Shield Wall -->
    @if (Game.ShieldWallDestroyed)
    {
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ShieldWall)" fill="@Skin.Current.BLOWNSHIELDWALL_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.Arrakeen.Territory)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.Carthag.Territory)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ImperialBasin)" fill="@Skin.Current.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
    }

    <!-- SSW -->
    @if (Game.Applicable(Rule.SSW) && Game.IsSpecialStronghold(Game.Map.ShieldWall))
    {
        <path d="@Skin.Current.GetTerritoryBorder(Game.Map.ShieldWall)" fill="#FF6F34" fill-opacity="0.6" stroke="transparent"/>
    }

    <!-- Highlighted Territories -->
    @foreach (var territory in h.HighlightedTerritories.Where(t => t != Game.Map.HiddenMobileStronghold.Territory)) {

        <path d="@Skin.Current.GetTerritoryBorder(territory)" fill="@Skin.Current.HIGHLIGHT_OVERLAY_COLOR" fill-opacity="1" stroke="red" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
    }

    <!-- Locations -->
    @foreach (var location in Game.Map.Locations.Where(l => l != Game.Map.HiddenMobileStronghold)) {

        <g clip-path="url(#@SectorClipName(location.Sector))">
            <g
                fill="@LocationColor(location)"
                cursor="pointer" pointer-events="all" @onclick="@(e => OnClick(e, location))" 
                data-bs-trigger="hover" data-bs-toggle="popover" data-bs-html="true" data-bs-animation="false" data-bs-delay="50" data-bs-content="@Intel(location)" data-bs-template="@PopoverTemplate">

                    <path d="@Skin.Current.GetTerritoryBorder(location.Territory)"/>
            </g>
        </g>
    }

</svg>

@if (h.Game.Map.HiddenMobileStronghold.Visible)
{
    bool isInFrontOfPlayerToken = h.Game.Players.Any(p => Near(h.Game.Map.HiddenMobileStronghold.Center, PlayerTokenPosition(h.Game, p.PositionAtTable), Skin.Current.PlayerTokenRadius));

    <Image X="@(h.Game.Map.HiddenMobileStronghold.Center.X - 0.9f * HiddenMobileStronghold.Radius)" 
           Y="@(h.Game.Map.HiddenMobileStronghold.Center.Y - HiddenMobileStronghold.Radius)" 
           Width=@(HiddenMobileStronghold.Radius + Math.Abs(HiddenMobileStronghold.DX)) Height="@(2 * HiddenMobileStronghold.Radius)" 
           Src="@Skin.Current.HMS_URL" 
           ShadowColor="@Skin.Current.SHADOW" ShadowX="5" ShadowY="5" ShadowBlur="1"
           Opacity="@(!isInFrontOfPlayerToken && h.ShowWheelsAndHMS ? 0.95f : 0.4f)"
           Popover="@Intel(h.Game.Map.HiddenMobileStronghold)"
           OnClick="@(e => OnClick(e, h.Game.Map.HiddenMobileStronghold))"/>

    @if (h.ShowWheelsAndHMS && (hovered == h.Game.Map.HiddenMobileStronghold || h.HighlightedTerritories.Contains(h.Game.Map.HiddenMobileStronghold.Territory)))
    {
        <Circle X="(h.Game.Map.HiddenMobileStronghold.Center.X + 0.1f * HiddenMobileStronghold.Radius)" Y="h.Game.Map.HiddenMobileStronghold.Center.Y" Radius="(0.9f * HiddenMobileStronghold.Radius)"
                FillColor="@Skin.Current.HIGHLIGHT_OVERLAY_COLOR" FillOpacity="1" StrokeColor="red" StrokeWidth="1"/>
    }
}

@code {

    private Location hovered = null;

    private string LocationColor(Location l) {

        if (l == hovered)
        {
            return Skin.Current.HIGHLIGHT_OVERLAY_COLOR;
        }
        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return Skin.Current.STORM_OVERLAY_COLOR;
        }
        if (Game.HasStormPrescience(Player) && NextStormWillPassOver(l))
        {
            return Skin.Current.STORM_PRESCIENCE_OVERLAY_COLOR;
        }

        return "transparent";
    }

    private string LocationTexture(Location l) {

        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return "url(#clouds)";
        }

        return "";
    }

    private bool NextStormWillPassOver(Location l)
    {
        for (int i = 1; i <= Game.NextStormMoves; i++)
        {
            if ((Game.SectorInStorm + i) % Map.NUMBER_OF_SECTORS == l.Sector)
            {
                return true;
            }
        }

        return false;
    }

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    [Parameter]
    public EventCallback<TerritoryEventArgs> OnTerritoryClick { get; set; }

    private async Task OnClick(MouseEventArgs e, Location l)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs() { Location = l, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

    private void OnHovered(MouseEventArgs e, Location l)
    {
        hovered = l;
    }

    private void OnExited(MouseEventArgs e, Location l)
    {
        hovered = null;
    }

    private float Angle => 360f / Map.NUMBER_OF_SECTORS;

    private float StartX(int sector) => (float)Math.Cos(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.X;
    private float StartY(int sector) => (float)Math.Sin(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.Y;
    private float EndX(int sector) => (float)Math.Cos(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.X;
    private float EndY(int sector) => (float)Math.Sin(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Skin.Current.PlanetRadius + Skin.Current.PlanetCenter.Y;

    private float ScaleX = 563f / Skin.Current.MapDimensions.X;

    private float ScaleY = 626f / Skin.Current.MapDimensions.Y;

    private string PointerEvents => OnLocationClick.HasDelegate || OnTerritoryClick.HasDelegate ? "all" : "none";

    private string SectorClipName(int i) => "clipOfSector" + i;

    
    protected string Intel(Location intelligenceLocation)
    {
        string result = "<div style='width:300px'>";

        var owner = Game.StrongholdOwnership.ContainsKey(intelligenceLocation) ? Game.StrongholdOwnership[intelligenceLocation] : Faction.None;
        if (owner != Faction.None)
        {
            result += Support.GetOwnedStrongholdHTML(intelligenceLocation, owner);
        }
        else
        {
            result += Skin.Current.Format("<h5>{0}</h5>", intelligenceLocation.Territory.Name);
            if (intelligenceLocation.Name != "")
            {
                result += "<div class='mt-0 mb-2'><strong>Sector: " + intelligenceLocation.Name + "</strong></div>";
            }
        }

        if (Skin.Current.ShowVerboseToolipsOnMap)
        {
            if (intelligenceLocation == Game.Map.PolarSink)
            {
                result += Skin.Current.Format("<p>Safe haven: no battles are fought here.</p>");
            }

            if (intelligenceLocation.Territory.IsStronghold || Game.IsSpecialStronghold(intelligenceLocation.Territory))
            {
                result += Skin.Current.Format("<p>Yields a victory point at end of turn.</p>");
            }

            if (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag)
            {
                result += Skin.Current.Format("<p><strong>Harvesters: </strong>when occupied, grants a {0} collection rate of 3-per-force.</p>", Concept.Resource);
                result += Skin.Current.Format("<p><strong>Ornithopters: </strong>when occupied, your forces can move up to 3 territories.</p>", Concept.Resource);
            }

            if (Game.Applicable(Rule.IncreasedResourceFlow))
            {
                if (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag || intelligenceLocation == Game.Map.TueksSietch)
                {
                    int bonus = (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag) ? 2 : 1;
                    result += Skin.Current.Format("<p>Yields <strong>{0} {1}</strong> at end of turn when occupied.</p>", bonus, Concept.Resource);
                }
            }

            result += Skin.Current.Format("<p>{0} from {1}.</p>", ProtectedFromMonsterText(intelligenceLocation), Concept.Monster);
            result += Skin.Current.Format("<p>{0} from Storms.</p>", ProtectedFromStormText(intelligenceLocation));

            if (intelligenceLocation.Sector == Game.SectorInStorm)
            {
                result += "<p>Currently in Storm.</p>";
            }

            if (intelligenceLocation.SpiceBlowAmount > 0)
            {
                result += Skin.Current.Format("<p>May contain <strong>{0} {1}</strong> after {2}.</p>", intelligenceLocation.SpiceBlowAmount, Concept.Resource, MainPhase.Blow);
            }
        }

        result += "<div class=\"row m-0 bg-dark text-center\">";

        if (Game.ResourcesOnPlanet.ContainsKey(intelligenceLocation))
        {
            result += string.Format("<div class=\"col p-0\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                Skin.Current.Harvester_URL,
                Game.ResourcesOnPlanet[intelligenceLocation]);
        }

        if (Game.ForcesOnPlanetExcludingEmptyLocations.ContainsKey(intelligenceLocation))
        {
            foreach (var b in Game.ForcesOnPlanet[intelligenceLocation])
            {
                var p = Game.GetPlayer(b.Faction);
                if (b.AmountOfSpecialForces > 0 || b.AmountOfForces > 0)
                {
                    if (b.AmountOfForces > 0)
                    {
                        result += string.Format("<div class=\"col p-0\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                            Skin.Current.GetFactionForceImageURL(p.Faction),
                            b.AmountOfForces);
                    }

                    if (b.AmountOfSpecialForces > 0)
                    {
                        result += string.Format("<div class=\"col p-0\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                            Skin.Current.GetFactionSpecialForceImageURL(p.Faction),
                            b.Faction == Faction.White && h.Faction != Faction.White ? "?" : "" + (b.Faction == Faction.White ? Game.CurrentNoFieldValue : b.AmountOfSpecialForces));
                    }
                }
            }
        }

        foreach (var hero in Game.LeaderState.Where(state => state.Key is IHero && state.Value.Alive && state.Value.CurrentTerritory == intelligenceLocation.Territory).Select(state => state.Key))
        {
            result += string.Format("<div class=\"col p-0\"><img class=\"img-fluid m-0 p-0\" width=\"64\" height=\"64\" src=\"{0}\" /></div>",
                        Skin.Current.GetImageURL(hero));
        }

        result += "</div>";

        return result;
    }

    private string ProtectedFromMonsterText(Treachery.Shared.Location l)
    {
        return l.Territory.IsProtectedFromWorm ? "Protected" : "NOT protected";
    }

    private string ProtectedFromStormText(Treachery.Shared.Location l)
    {
        return h.Game.IsProtectedFromStorm(l) ? "Protected" : "NOT protected";
    }
}
