@using Treachery.Shared
@inherits MapComponent

@{
    if (Game.CurrentMainPhase > MainPhase.Setup)
    {
        float posX = Skin.Current.MapDimensions.X;
        float posY = 0;
        foreach (var phase in Enumerations.GetValues<MainPhase>(typeof(MainPhase)).Where(p => p >= MainPhase.Storm && p <= MainPhase.Contemplate))
        {
            if (phase == Game.CurrentMainPhase)
            {
                posY += activeFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_ACTIVE_FONT" FontColor="@Skin.Current.PHASE_ACTIVE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_ACTIVE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    var diameter = 2 * Skin.Current.PlayerTokenRadius;

                    <Image X="@(posX - diameter)" Y="@(posY - Skin.Current.PlayerTokenRadius)" Diameter=diameter Src="@Skin.Current.GetImageURL(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.5f * activeFontHeight;
            }
            else
            {
                posY += passiveFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_FONT" FontColor="@Skin.Current.PHASE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    <Image X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY - 0.5f * Skin.Current.PlayerTokenRadius)" Diameter=Skin.Current.PlayerTokenRadius Src="@Skin.Current.GetImageURL(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - 0.5f * Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.5f * passiveFontHeight;
            }
        }
    }
}

@code {

    private float activeFontHeight;
    private float passiveFontHeight;   

    protected override async Task OnInitializedAsync()
    {
        activeFontHeight = (await Browser.MeasureText("X", Skin.Current.PHASE_ACTIVE_FONT)).Height;
        passiveFontHeight = (await Browser.MeasureText("X", Skin.Current.PHASE_FONT)).Height;   
    }
}