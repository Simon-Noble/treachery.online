<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent

@{
    if (Game.CurrentTurn >= 1)
    {
        <MapText ToShow="@string.Format("Turn {0} of {1}", h.Game.CurrentTurn, h.Game.MaximumNumberOfTurns)"
                 X="Skin.Current.MapDimensions.X"
                 Y="(0.75f * turnFontHeight)"
                 Font="@Skin.Current.TURN_FONT"
                 FontColor="@Skin.Current.TURN_FONT_COLOR"
                 BorderWidth="@Skin.Current.TURN_FONT_BORDERWIDTH"
                 BorderColor="@Skin.Current.TURN_FONT_BORDERCOLOR"
                 Align="@TextAlignment.Right"/>
    }

    if (h.Host != null && h.Host.JoinedObservers.Count(o => o != h.ServerSettings.AdminName) > 0)
    {
        <MapText ToShow="@string.Format("observers: {0}", Observers.Count())"
                 X="@(Skin.Current.PlanetCenter.X)"
                 Y="@(Skin.Current.MapDimensions.Y - turnFontHeight)"
                 Popover="@ObserverPopover"
                 Font="@Skin.Current.FORCETOKEN_FONT"
                 FontColor="@Skin.Current.FORCETOKEN_FONTCOLOR"
                 BorderWidth="@Skin.Current.FORCETOKEN_FONT_BORDERWIDTH"
                 BorderColor="@Skin.Current.FORCETOKEN_FONT_BORDERCOLOR"
                 Align="@TextAlignment.Center"/>
    }

    if (Game.CurrentMainPhase > MainPhase.Setup)
    {
        float posX = Skin.Current.MapDimensions.X;
        float posY = 1.2f * turnFontHeight;

        foreach (var phase in Enumerations.GetValues<MainPhase>(typeof(MainPhase)).Where(p => p >= MainPhase.Storm && p <= MainPhase.Contemplate))
        {
            if (phase == Game.CurrentMainPhase)
            {
                posY += 0.7f * activeFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_ACTIVE_FONT" FontColor="@Skin.Current.PHASE_ACTIVE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_ACTIVE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    var diameter = 2 * Skin.Current.PlayerTokenRadius;

                    <Image X="@(posX - diameter)" Y="@(posY - Skin.Current.PlayerTokenRadius)" Diameter=diameter Src="@Skin.Current.GetImageURL(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.7f * activeFontHeight;
            }
            else
            {
                posY += passiveFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_FONT" FontColor="@Skin.Current.PHASE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    <Image X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY - 0.5f * Skin.Current.PlayerTokenRadius)" Diameter=Skin.Current.PlayerTokenRadius Src="@Skin.Current.GetImageURL(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - 0.5f * Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.6f * passiveFontHeight;
            }
        }
    }
}

@code {

    private float turnFontHeight;
    private float activeFontHeight;
    private float passiveFontHeight;   

    protected override async Task OnInitializedAsync()
    {
        turnFontHeight = (await Browser.MeasureText("Turn", Skin.Current.TURN_FONT)).Height;
        activeFontHeight = 0.6f * (await Browser.MeasureText("X", Skin.Current.PHASE_ACTIVE_FONT)).Height;
        passiveFontHeight = 0.6f * (await Browser.MeasureText("X", Skin.Current.PHASE_FONT)).Height;   
    }

    private string ObserverPopover => string.Join(", ", Observers);

    private IEnumerable<string> Observers => h.Host.JoinedObservers.Where(o => o != h.ServerSettings.AdminName);
}