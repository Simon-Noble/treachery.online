@inherits MapComponent

<div style='position:absolute;left:@Px(X);top:@Px(Y);width=@Px(Width);height=@Px(Height);border-radius:@Px(0.5f*Width);overflow:hidden'>

    <video id="@VideoId" autoplay width=@Px(Width) @onclick=@ToggleCapture title="Click to start or stop camera"/>

    @if (capturedDevice == null && h.VideoDevice != null) {

        <a class="btn btn-link p-1" style='position:absolute' @onclick=@ToggleCapture title="Start Camera">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="white" class="bi bi-play-fill" viewBox="0 0 16 16">
                <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
            </svg>
        </a>
    }

</div>

@code {

    private CaptureDevice capturedDevice;

    private string VideoId => "videocapture" + Id;

    protected override async Task OnInitializedAsync()
    {
        var devices = await Browser.GetCaptureDevices();

        if (h.VideoDevice == null)
        {
            h.VideoDevice = devices.FirstOrDefault(d => d.Kind == "videoinput");
        }

        if (h.AudioDevice == null)
        {
            h.AudioDevice = devices.FirstOrDefault(d => d.Kind == "audioinput");
        }
    }

    private void ToggleCapture()
    {
        if (capturedDevice == null)
        {
            //_ = Browser.CaptureMedia(audioDeviceId, true, false);
            capturedDevice = h.VideoDevice;
            Console.WriteLine("Continue capture from " + capturedDevice.Label);
            _ = Browser.CaptureMedia(capturedDevice.DeviceId, VideoId, false, true);
        }
        else
        {
            _ = Browser.StopCapture(capturedDevice.DeviceId);
            capturedDevice = null;
        }
    }
}
