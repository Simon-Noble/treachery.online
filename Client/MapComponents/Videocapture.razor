@inherits MapComponent

@if (capturedVideoDevice == null && h.VideoDevice != null && h.AudioDevice != null) {

    <svg xmlns="http://www.w3.org/2000/svg" style='@SymbolStyle' width="10" height="10" fill=@SymbolFill class="bi bi-camera-video-fill" viewBox="0 0 16 16" @onclick=@ToggleCapture title="Start @h.VideoDevice.Label" @onmouseover=SymbolMouseOver @onmouseout=SymbolMouseOut>
        <path fill-rule="evenodd" d="M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5z"/>
    </svg>
}
else
{
    <div style='position:absolute;left:@Px(EffectiveX);top:@Px(EffectiveY);width:@Px(EffectiveHeight);height:@Px(EffectiveHeight);border-radius:@Px(0.5f*EffectiveHeight);overflow:hidden;filter:drop-shadow(0px 0px 1px gold);'>
        <video id="@VideoId" height=@Px(EffectiveHeight) style="position:absolute;left:@Px(-0.3f*EffectiveHeight)" @onclick=@ToggleCapture title="Click to stop camera" @onmouseover=VideoMouseOver @onmouseout=VideoMouseOut/>
    </div>
}

@code {

    [Parameter]
    public bool SymbolOnRight { get; set; } 

    private CaptureDevice capturedVideoDevice;
    private CaptureDevice capturedAudioDevice;

    private string VideoId => "videocapture" + Id;

    private bool _videoHovered = false;
    private void VideoMouseOver()
    {
        if (capturedVideoDevice != null)
        {
            _videoHovered = true;
        }
    }
    private void VideoMouseOut()
    {
        _videoHovered = false;
    }
    private bool _symbolHovered = false;
    private void SymbolMouseOver()
    {
        _symbolHovered = true;
    }
    private void SymbolMouseOut()
    {
        _symbolHovered = false;
    }

    private float EffectiveX => _videoHovered ? X - 0.5f * Height : X;
    private float EffectiveY => _videoHovered ? Y - 0.5f * Height : Y;
    private float EffectiveHeight => _videoHovered ? 2 * Height : Height;

    private string SymbolFill => _symbolHovered ? "white" : "#FFFFFFBB";
    private string SymbolStyle
    {
        get
        {
            var left = SymbolOnRight? X + Height - 10: X;
            return string.Format("position:absolute;left:{0};top:{1};", Px(left), Px(Y + 0.5f * Height - 5));
        }
    }

    private void ToggleCapture()
    {
        if (capturedVideoDevice == null)
        {
            capturedVideoDevice = h.VideoDevice;
            capturedAudioDevice = h.AudioDevice;
            _ = Browser.CaptureMedia(VideoId, capturedAudioDevice.DeviceId, capturedVideoDevice.DeviceId);
        }
        else
        {
            _ = Browser.StopCapture(VideoId);
            capturedVideoDevice = null;
            capturedAudioDevice = null;
        }
    }

    private string SymbolAlign => SymbolOnRight ? "text-right" : "";
}
