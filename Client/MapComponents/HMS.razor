@using Treachery.Shared
@inherits MapComponent

@if (h.Game.Map.HiddenMobileStronghold.Visible)
{
    bool isInFrontOfPlayerToken = h.Game.Players.Any(p => Near(h.Game.Map.HiddenMobileStronghold.Center, PlayerTokenPosition(h.Game, p.PositionAtTable), 100));

    <Image X="@(h.Game.Map.HiddenMobileStronghold.Center.X - HiddenMobileStronghold.RADIUS)" 
           Y="@(h.Game.Map.HiddenMobileStronghold.Center.Y - HiddenMobileStronghold.RADIUS)" 
           Width=@(HiddenMobileStronghold.RADIUS + Math.Abs(HiddenMobileStronghold.DX)) Height="@(2 * HiddenMobileStronghold.RADIUS)" 
           Src="@Skin.Current.HMS_URL" 
           ShadowColor="@Skin.Current.SHADOW_DARK" ShadowX="8" ShadowY="8" ShadowBlur="3"
           Opacity="@(!isInFrontOfPlayerToken && h.ShowWheelsAndHMS ? 1.0f : 0.4f)"
           Popover="@Intel(h.Game.Map.HiddenMobileStronghold)"
           OnClick="@OnClick"/>

    @if (h.HighlightedTerritories.Contains(h.Game.Map.HiddenMobileStronghold.Territory))
    {
        <Circle X="(h.Game.Map.HiddenMobileStronghold.Center.X+14)" Y="h.Game.Map.HiddenMobileStronghold.Center.Y" Radius="(HiddenMobileStronghold.RADIUS-4)"
                FillColor="@Skin.Current.HIGHLIGHT_OVERLAY_COLOR" FillOpacity="1" StrokeColor="red" StrokeWidth="8"/>
    }
}

@code {

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    private async Task OnClick(MouseEventArgs e)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs() { Location = h.Game.Map.HiddenMobileStronghold, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

}
