<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent

@if (showPlan) {

    <Image X=X Y=Y Diameter="@(Skin.Current.BattleScreenWidth)" Src="@Skin.Current.BattleScreen_URL" 
           ShadowColor="@Skin.Current.SHADOW" ShadowX="3" ShadowY="3" ShadowBlur="1" 
           Opacity="Opacity"/>

    <Image X=X Y=Y Diameter="@(Skin.Current.BattleScreenWidth)" Src="@Skin.Current.FactionTableImage_URL[Plan.Initiator]" 
           Opacity="Opacity * 0.3f"/>

    var forceX = X + Skin.Current.BattleWheelForcesX;
    var forceY = Y + Skin.Current.BattleWheelForcesY;

    if (Aspect == PrescienceAspect.None || Aspect == PrescienceAspect.Dial)
    {
        var dial = Support.RoundWithHalves(Plan.Dial(Game, IsAggressor ? Game.CurrentBattle.Defender : Game.CurrentBattle.Aggressor));

        <MapText ToShow="@dial"
                 X="@(forceX)" Y="@(forceY)"
                 Font="@Skin.Current.WHEEL_FONT" FontColor="@Skin.Current.WHEEL_FONTCOLOR"
                 BorderWidth="Skin.Current.WHEEL_FONT_BORDERWIDTH" BorderColor="@(IsAggressor ? Skin.Current.WHEEL_FONT_AGGRESSOR_BORDERCOLOR : Skin.Current.WHEEL_FONT_DEFENDER_BORDERCOLOR)"
        Align="@TextAlignment.Center" />

        if (Plan.Initiator == Faction.Pink && Game.PinkKarmaBonus != 0)
        {
            var karmaBonusText = $"+{Game.PinkKarmaBonus}";
            <MapText ToShow=@karmaBonusText
                     X="@(forceX + 2 * Skin.Current.RESOURCETOKEN_RADIUS)" Y="@(forceY)"
                     Font="@Skin.Current.WHEEL_FONT" FontColor="green"
                     BorderWidth="Skin.Current.WHEEL_FONT_BORDERWIDTH" BorderColor="@(IsAggressor ? Skin.Current.WHEEL_FONT_AGGRESSOR_BORDERCOLOR : Skin.Current.WHEEL_FONT_DEFENDER_BORDERCOLOR)"
                     Align="@TextAlignment.Center" />
        }
    }

    if (Aspect == PrescienceAspect.None)
    {
        int costsOfBattle = Plan.Cost(Game);
        if (costsOfBattle > 0)
        {
            <Image X="@(forceX + 3 * Skin.Current.RESOURCETOKEN_RADIUS)" Y="@(forceY - Skin.Current.RESOURCETOKEN_RADIUS)" Diameter="@(Skin.Current.RESOURCETOKEN_RADIUS * 2)" 
                   Src="@Skin.Current.Harvester_URL" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

            <MapText ToShow="@costsOfBattle.ToString()"
                     X="@(forceX + 4 * Skin.Current.RESOURCETOKEN_RADIUS)" Y="@(forceY)"
                     Font="@Skin.Current.RESOURCETOKEN_FONT" FontColor="@Skin.Current.RESOURCETOKEN_FONTCOLOR"
                     BorderWidth="Skin.Current.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Skin.Current.RESOURCETOKEN_FONT_BORDERCOLOR"
                     Align="@TextAlignment.Center" />
        }

        if (Game.HasStrongholdAdvantage(Plan.Initiator, StrongholdAdvantage.FreeResourcesForBattles, Game.CurrentBattle.Territory))
        {
            <Image X="@(forceX + 6f * Skin.Current.RESOURCETOKEN_RADIUS)" Y="@(forceY - 0.2f * Skin.Current.BattleWheelCardHeight)" Width=@(0.4f * Skin.Current.BattleWheelCardWidth) Height="@(0.4f * Skin.Current.BattleWheelCardHeight)" 
            Src="@Skin.Current.GetImageURL(Game.Map.Arrakeen)" 
            ShadowColor="@Skin.Current.SHADOW" ShadowX="3" ShadowY="3" ShadowBlur="1" 
            Popover="@Popup.Get(Game.Map.Arrakeen, Plan.Initiator)"/>
        }
    }

    if (Aspect == PrescienceAspect.None || Aspect == PrescienceAspect.Leader)
    {
        if (Plan.Hero == null)
        {
            if (Aspect == PrescienceAspect.Leader)
            {
                <MapText ToShow="no leader"
                         X="@(X + Skin.Current.BattleScreenHeroX + Skin.Current.BattleWheelHeroWidth / 2)" Y="@(Y + Skin.Current.BattleScreenHeroY + Skin.Current.BattleWheelHeroWidth / 2)"
                         Font="@Skin.Current.CARDPILE_FONT" FontColor="white"
                         BorderWidth="Skin.Current.CARDPILE_FONT_BORDERWIDTH" BorderColor="black"
                         Align="@TextAlignment.Center" />
            }
        }
        else if (Plan.Hero is Leader)
        {
            var skillX = X + Skin.Current.BattleScreenHeroX + 0.6f * Skin.Current.BattleWheelHeroWidth;
            var skillY = Y + Skin.Current.BattleScreenHeroY - 0.6f * Skin.Current.BattleWheelHeroHeight;

            var heroSkill = Game.Skill(Plan.Hero);
            if (heroSkill != LeaderSkill.None)
            {
                <Image X="@(skillX)" Y="@(skillY)" Width=@(0.4f * Skin.Current.BattleWheelCardWidth) Height="@(0.4f * Skin.Current.BattleWheelCardHeight)" Src="@Skin.Current.GetImageURL(heroSkill)" 
                        ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0"
                        Popover="@Popup.Get(heroSkill)" />

                skillX += 0.5f * Skin.Current.BattleWheelCardWidth;
            }

            var passiveSkill = Game.GetSkill(Plan.Player);
            if (passiveSkill != heroSkill && PassiveSkillIsRelevantForBattlePlan(passiveSkill))
            {
                <Image X="@(skillX)" Y="@(skillY)" Width=@(0.4f * Skin.Current.BattleWheelCardWidth) Height="@(0.4f * Skin.Current.BattleWheelCardHeight)" Src="@Skin.Current.GetImageURL(passiveSkill)"
                       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0"
                       Popover="@Popup.Get(passiveSkill)" />

                skillX += 0.5f * Skin.Current.BattleWheelCardWidth;
            }

            <MapLeader h="h" ToShow="Plan.Hero" X=@(X + Skin.Current.BattleScreenHeroX) Y=@(Y + Skin.Current.BattleScreenHeroY) Diameter="Skin.Current.BattleWheelHeroWidth"/>

            LeaderSkill usedSkill = LeaderSkill.None;
                
            int bonus = Battle.DetermineSkillBonus(Game, Plan, ref usedSkill);
            if (bonus != 0)
            {
                <MapText ToShow="@("+" + bonus)"
                            X="@(X + Skin.Current.BattleScreenHeroX + 0.9f * Skin.Current.BattleWheelHeroWidth)" Y="@(Y + Skin.Current.BattleScreenHeroY + 0.2f * Skin.Current.BattleWheelHeroWidth)"
                            Font="@Skin.Current.CARDPILE_FONT" FontColor="green"
                            BorderWidth="Skin.Current.CARDPILE_FONT_BORDERWIDTH" BorderColor="white"
                            Align="@TextAlignment.Right" />
            }
                
            if (Game.CurrentPhase > Phase.BattlePhase && Game.CurrentPhase < Phase.BattleConclusion && OpponentPlan != null)
            {
                int penalty = Battle.DetermineSkillPenalty(Game, OpponentPlan, Plan.Player, ref usedSkill);
                if (penalty != 0)
                {
                    <MapText ToShow="@("-" + penalty)"
                                X="@(X + Skin.Current.BattleScreenHeroX + 0.9f * Skin.Current.BattleWheelHeroWidth)" Y="@(Y + Skin.Current.BattleScreenHeroY + 0.75f * Skin.Current.BattleWheelHeroWidth)"
                                Font="@Skin.Current.CARDPILE_FONT" FontColor="red"
                                BorderWidth="Skin.Current.CARDPILE_FONT_BORDERWIDTH" BorderColor="white"
                                Align="@TextAlignment.Right" />
                }
            }
        }
        else if (Plan.Hero is TreacheryCard)
        {
            <Image X="@(X + Skin.Current.BattleScreenHeroX)" Y="@(Y + Skin.Current.BattleScreenHeroY)" Width=@(Skin.Current.BattleWheelCardWidth) Height="@(Skin.Current.BattleWheelCardHeight)" 
                   Src="@Skin.Current.GetImageURL(Plan.Hero as TreacheryCard)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Popup.Get(Plan.Hero as TreacheryCard)" PopoverStyle=""/>
        }

        if (TraitorCalled)
        {
            <MapText ToShow="TRAITOR!"
                     X="@(X + Skin.Current.BattleScreenHeroX + Skin.Current.BattleWheelHeroWidth / 2)" Y="@(Y + Skin.Current.BattleScreenHeroY + Skin.Current.BattleWheelHeroWidth / 1.5f)"
                     Font="@Skin.Current.CARDPILE_FONT" FontColor="red"
                     BorderWidth="Skin.Current.CARDPILE_FONT_BORDERWIDTH" BorderColor="white"
                     Align="@TextAlignment.Center" />
        }

        if (Plan.Initiator == Faction.Green && Plan.Messiah)
        {
            <Image X="@(X + Skin.Current.BattleScreenHeroX + Skin.Current.BattleWheelHeroWidth / 1.5f)" Y="@(Y + 0.8f * Skin.Current.BattleScreenHeroY)" 
                Diameter="@(0.5f * Skin.Current.BattleWheelHeroWidth)" 
                Src="@Skin.Current.Messiah_URL" 
                ShadowColor="@Skin.Current.SHADOW" 
                ShadowX="1" 
                ShadowY="1" 
                ShadowBlur="1" 
                Popover=@Skin.Current.Describe(Concept.Messiah) />
        }
    }

    if (Aspect == PrescienceAspect.None || Aspect == PrescienceAspect.Defense)
    {
        bool isUsingPortableAntidote = Battle.IsUsingPortableAntidote(Game, Plan.Initiator) && Plan.Player.Card(TreacheryCardType.PortableAntidote) != null;
        if (Plan.Defense != null || isUsingPortableAntidote)
        {
            var defenseToShow = isUsingPortableAntidote ? Plan.Player.Card(TreacheryCardType.PortableAntidote) : Plan.Defense;

            <Image X="@(X + Skin.Current.BattleWheelCardX + 1.1f * Skin.Current.BattleWheelCardWidth)" Y="@(Y + Skin.Current.BattleWheelCardY)" Width=@(Skin.Current.BattleWheelCardWidth) Height="@(Skin.Current.BattleWheelCardHeight)" 
                   Src="@Skin.Current.GetImageURL(defenseToShow)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Popup.Get(defenseToShow)" PopoverStyle=""/>
        }
        else if (Aspect == PrescienceAspect.Defense)
        {
            <MapText ToShow="no defense"
                     X="@(X + Skin.Current.BattleWheelCardX + 1.6f * Skin.Current.BattleWheelCardWidth)" Y="@(Y + 1.1f * Skin.Current.BattleWheelCardY + Skin.Current.BattleWheelCardHeight / 2)"
                     Font="@Skin.Current.TURN_FONT" FontColor="white"
                     BorderWidth="Skin.Current.TURN_FONT_BORDERWIDTH" BorderColor="black"
                     Align="@TextAlignment.Center" />
        }
    }

    if (Aspect == PrescienceAspect.None || Aspect == PrescienceAspect.Weapon)
    {
        if (Plan.Weapon != null)
        {
            <Image X="@(X + Skin.Current.BattleWheelCardX)" Y="@(Y + Skin.Current.BattleWheelCardY)" Width=@(Skin.Current.BattleWheelCardWidth) Height="@(Skin.Current.BattleWheelCardHeight)" 
                   Src="@Skin.Current.GetImageURL(Plan.Weapon)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Popup.Get(Plan.Weapon)" PopoverStyle=""/>
        }
        else if (Aspect == PrescienceAspect.Weapon)
        {
            <MapText ToShow="no weapon"
                     X="@(X + Skin.Current.BattleWheelCardX + Skin.Current.BattleWheelCardWidth / 2)" Y="@(Y + 1.1f * Skin.Current.BattleWheelCardY + Skin.Current.BattleWheelCardHeight / 2)"
                     Font="@Skin.Current.TURN_FONT" FontColor="white"
                     BorderWidth="Skin.Current.TURN_FONT_BORDERWIDTH" BorderColor="black"
                     Align="@TextAlignment.Center" />
        }
    }
}
else
{
    <Image X=@(X + 0.5f * Skin.Current.BattleScreenWidth - Skin.Current.FORCETOKEN_RADIUS) Y=@Y Diameter=@(2*Skin.Current.FORCETOKEN_RADIUS) Src="@Skin.Current.BattleScreen_URL"
       ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"/>
}

<Image X=@(X + 0.5f * Skin.Current.BattleScreenWidth - 0.5f * Skin.Current.FORCETOKEN_RADIUS) Y=@(Y + 0.5f * Skin.Current.FORCETOKEN_RADIUS)
    Diameter=@Skin.Current.FORCETOKEN_RADIUS
    Src="@(showPlan ? Skin.Current.Eye_URL : Skin.Current.EyeSlash_URL)"
    OnClick="OnShowPlanClick"
    ShadowColor="black" ShadowX="1" ShadowY="1" ShadowBlur="0"
    Title="@(showPlan ? "Hide Wheel" : "Show Wheel")" />

@code {
    
    private bool showPlan = true;

    [Parameter]
    public Battle Plan { get; set; }

    [Parameter]
    public Battle OpponentPlan { get; set; }

    [Parameter]
    public bool TraitorCalled { get; set; }

    [Parameter]
    public bool IsAggressor { get; set; }

    [Parameter]
    public PrescienceAspect Aspect { get; set; } = PrescienceAspect.None;

    private static bool PassiveSkillIsRelevantForBattlePlan(LeaderSkill skill)
    {
        return
            skill == LeaderSkill.Diplomat ||
            skill == LeaderSkill.Graduate ||
            skill == LeaderSkill.Warmaster ||
            skill == LeaderSkill.Adept ||
            skill == LeaderSkill.Swordmaster ||
            skill == LeaderSkill.KillerMedic ||
            skill == LeaderSkill.MasterOfAssassins;
    }

    private void OnShowPlanClick(MouseEventArgs e)
    {
        showPlan = !showPlan;
        StateHasChanged();
    }
}