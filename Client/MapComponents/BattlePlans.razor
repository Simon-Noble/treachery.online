@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent

@if (Game.CurrentMainPhase == MainPhase.Battle && Game.CurrentPhase != Phase.BattleReport)
{
    var MaySeeAggressorBattlePlan = Game.AggressorPlan != null && (Game.AggressorPlan.Initiator == h.Faction || (Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.AggressorPlan.Player));
    var MaySeeDefenderBattlePlan = Game.DefenderPlan != null && (Game.DefenderPlan.Initiator == h.Faction || (Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.DefenderPlan.Player));

    var MaySeeBothBattlePlans = Game.AggressorPlan != null && Game.DefenderPlan != null;
    
    var AggressorIsAffectedByPartialPrescience = Game.AggressorPlan != null && 
                                                 ((Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.AggressorPlan.Player) ||
                                                  (Game.CurrentNexusPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentNexusPrescience.Initiator) == Game.AggressorPlan.Player));

    var DefenderIsAffectedByPartialPrescience = Game.DefenderPlan != null && 
                                                ((Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.DefenderPlan.Player) ||
                                                 (Game.CurrentNexusPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentNexusPrescience.Initiator) == Game.DefenderPlan.Player));

    var AggressorCallsTraitor = Game.AggressorTraitorAction != null && Game.AggressorTraitorAction.Succeeded;
    var DefenderCallsTraitor = Game.DefenderTraitorAction != null && Game.DefenderTraitorAction.Succeeded;

    var AggressorWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Aggressor == Game.BattleWinner;
    var DefenderWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Defender == Game.BattleWinner;

    var x = 0.1f * Skin.Current.MapDimensions.X;
    var y = 0.1f * Skin.Current.MapDimensions.Y;

    if (MaySeeAggressorBattlePlan || MaySeeBothBattlePlans)
    {
        <BattlePlan h="h" Plan="Game.AggressorPlan" ShowEntirePlan=true OpponentPlan="Game.DefenderPlan" Facedanced="AggressorWasFacedanced" TraitorCalled="DefenderCallsTraitor" IsAggressor="true" X="x" Y="y" />
    }
    else if (MaySeeAggressorBattlePlanUnderConstruction)
    {
        <BattlePlan h="h" Plan="h.BattleUnderConstruction" ShowEntirePlan=true OpponentPlan="Game.DefenderPlan" Facedanced="AggressorWasFacedanced" TraitorCalled="false" IsAggressor="true" X="x" Y="y" />
    }
    else if (AggressorIsAffectedByPartialPrescience)
    {
        <BattlePlan h="h" Plan="Game.AggressorPlan" ShowEntirePlan=false OpponentPlan="Game.DefenderPlan" Facedanced="AggressorWasFacedanced" TraitorCalled="false" IsAggressor="true" X="x" Y="y" Opacity="0.5f" />
    }

    x = 0.4f * Skin.Current.MapDimensions.X;
    y = 0.5f * Skin.Current.MapDimensions.Y;

    if (MaySeeDefenderBattlePlan || MaySeeBothBattlePlans)
    {
        <BattlePlan h="h" Plan="Game.DefenderPlan" ShowEntirePlan=true OpponentPlan="Game.AggressorPlan" Facedanced="DefenderWasFacedanced" TraitorCalled="AggressorCallsTraitor" IsAggressor="false" X="x" Y="y" />
    }
    else if (MaySeeDefenderBattlePlanUnderConstruction)
    {
        <BattlePlan h="h" Plan="h.BattleUnderConstruction" ShowEntirePlan=true OpponentPlan="Game.AggressorPlan" Facedanced="DefenderWasFacedanced" TraitorCalled="false" IsAggressor="false" X="x" Y="y" />
    }
    else if (DefenderIsAffectedByPartialPrescience)
    {
        <BattlePlan h="h" Plan="Game.DefenderPlan" ShowEntirePlan=false OpponentPlan="Game.AggressorPlan" Facedanced="DefenderWasFacedanced" TraitorCalled="false" IsAggressor="false" X="x" Y="y" Opacity="0.5f" />
    }
}

@code {

    private bool MaySeeAggressorBattlePlanUnderConstruction => h.BattleUnderConstruction != null && Game.AggressorPlan == null && Game.CurrentBattle != null && Game.CurrentBattle.Aggressor == h.Faction;

    private bool MaySeeDefenderBattlePlanUnderConstruction => h.BattleUnderConstruction != null && Game.DefenderPlan == null && Game.CurrentBattle != null && Game.CurrentBattle.Defender == h.Faction;
}
