<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@inherits MapComponent

@if (Game.CurrentMainPhase == MainPhase.Battle && Game.CurrentPhase != Phase.BattleReport)
{
    bool MaySeeAggressorBattlePlan = Game.AggressorBattleAction != null && (Game.AggressorBattleAction.Initiator == h.Faction || Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.AggressorBattleAction.Player);
    bool MaySeeDefenderBattlePlan = Game.DefenderBattleAction != null && (Game.DefenderBattleAction.Initiator == h.Faction || Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.DefenderBattleAction.Player);

    bool MaySeeBothBattlePlans = Game.AggressorBattleAction != null && Game.DefenderBattleAction != null;
    
    bool AggressorIsAffectedByPartialPrescience = Game.AggressorBattleAction != null && 
        (Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.AggressorBattleAction.Player ||
         Game.CurrentGreenNexus != null && Game.CurrentBattle.OpponentOf(Game.CurrentGreenNexus.Initiator) == Game.AggressorBattleAction.Player);

    bool DefenderIsAffectedByPartialPrescience = Game.DefenderBattleAction != null && 
        (Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.DefenderBattleAction.Player ||
         Game.CurrentGreenNexus != null && Game.CurrentBattle.OpponentOf(Game.CurrentGreenNexus.Initiator) == Game.DefenderBattleAction.Player);

    bool AggressorCallsTraitor = Game.AggressorTraitorAction != null && Game.AggressorTraitorAction.TreacherySucceeded(Game);
    bool DefenderCallsTraitor = Game.DefenderTraitorAction != null && Game.DefenderTraitorAction.TreacherySucceeded(Game);

    bool AggressorWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Aggressor == Game.BattleWinner;
    bool DefenderWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Defender == Game.BattleWinner;

    var x = 0.1f * Skin.Current.MapDimensions.X;
    var y = 0.1f * Skin.Current.MapDimensions.Y;

    if (MaySeeAggressorBattlePlan || MaySeeBothBattlePlans)
    {
        <BattlePlan h="h" Plan="Game.AggressorBattleAction" ShowEntirePlan=true OpponentPlan="Game.DefenderBattleAction" Facedanced="AggressorWasFacedanced" TraitorCalled="DefenderCallsTraitor" IsAggressor="true" X="x" Y="y" />
    }
    else if (MaySeeAggressorBattlePlanUnderConstruction)
    {
        <BattlePlan h="h" Plan="h.BattleUnderConstruction" ShowEntirePlan=true OpponentPlan="Game.DefenderBattleAction" Facedanced="AggressorWasFacedanced" TraitorCalled="false" IsAggressor="true" X="x" Y="y" />
    }
    else if (AggressorIsAffectedByPartialPrescience)
    {
        <BattlePlan h="h" Plan="Game.AggressorBattleAction" ShowEntirePlan=false OpponentPlan="Game.DefenderBattleAction" Facedanced="AggressorWasFacedanced" TraitorCalled="false" IsAggressor="true" X="x" Y="y" Opacity="0.5f" />
    }

    x = 0.4f * Skin.Current.MapDimensions.X;
    y = 0.5f * Skin.Current.MapDimensions.Y;

    if (MaySeeDefenderBattlePlan || MaySeeBothBattlePlans)
    {
        <BattlePlan h="h" Plan="Game.DefenderBattleAction" ShowEntirePlan=true OpponentPlan="Game.AggressorBattleAction" Facedanced="DefenderWasFacedanced" TraitorCalled="AggressorCallsTraitor" IsAggressor="false" X="x" Y="y" />
    }
    else if (MaySeeDefenderBattlePlanUnderConstruction)
    {
        <BattlePlan h="h" Plan="h.BattleUnderConstruction" ShowEntirePlan=true OpponentPlan="Game.AggressorBattleAction" Facedanced="DefenderWasFacedanced" TraitorCalled="false" IsAggressor="false" X="x" Y="y" />
    }
    else if (DefenderIsAffectedByPartialPrescience)
    {
        <BattlePlan h="h" Plan="Game.DefenderBattleAction" ShowEntirePlan=false OpponentPlan="Game.AggressorBattleAction" Facedanced="DefenderWasFacedanced" TraitorCalled="false" IsAggressor="false" X="x" Y="y" Opacity="0.5f" />
    }
}

@code {

    private bool MaySeeAggressorBattlePlanUnderConstruction => h.BattleUnderConstruction != null && Game.AggressorBattleAction == null && Game.CurrentBattle != null && Game.CurrentBattle.Aggressor == h.Faction;

    private bool MaySeeDefenderBattlePlanUnderConstruction => h.BattleUnderConstruction != null && Game.DefenderBattleAction == null && Game.CurrentBattle != null && Game.CurrentBattle.Defender == h.Faction;
}
