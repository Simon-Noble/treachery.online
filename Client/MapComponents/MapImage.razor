<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@inherits MapComponent
@implements IDisposable;

@if (BackgroundCircleColor != null)
{
    <Circle X=@(X + 0.5f * Width) Y=@(Y + 0.5f * Height) Radius=@(BackgroundCircleDiameter > 0 ? 0.5f * BackgroundCircleDiameter : 0.5f * Width) FillColor=@BackgroundCircleColor />
}

@if (BackgroundRectangleColor != null)
{
    <Rectangle X=X Y=Y Width="Width" Height="Height" FillColor=@BackgroundRectangleColor />
}

@if (OnClick.HasDelegate || OnMouseOver.HasDelegate || OnMouseExited.HasDelegate) 
{
    <img @attributes=_attributes @ref=@element @onclick="@OnClick" @onmouseenter="@OnMouseOver" @onmouseout="@OnMouseExited"  />
}
else
{
    <img @attributes=_attributes @ref=@element />
}

@code {

    [Parameter]
    public string Src { get; set; }

    [Parameter]
    public float ShadowX { get; set; } = 0;

    [Parameter]
    public float ShadowY { get; set; } = 0;

    [Parameter]
    public float ShadowBlur { get; set; } = 0;

    [Parameter]
    public string ShadowColor { get; set; } = "black";

    [Parameter]
    public string Filter { get; set; } = "";

    [Parameter]
    public string Animation { get; set; } = null;

    [Parameter]
    public string BackgroundCircleColor { get; set; } = null;

    [Parameter]
    public double BackgroundCircleDiameter { get; set; } = 0;

    [Parameter]
    public string BackgroundRectangleColor { get; set; } = null;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseExited { get; set; }

    [Parameter]
    public string Popover { get; set; }
    private string _popover = null;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; }

    private Dictionary<string, object> _attributes;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsRefresh = true;
        }

        _attributes = new();

        if (Popover != null && !PopoverAsTooltip)
        {
            _attributes.Add("data-bs-trigger", "hover");
            _attributes.Add("data-bs-toggle", "popover");
            _attributes.Add("data-bs-html", "true");
            _attributes.Add("data-bs-animation", "false");
            _attributes.Add("data-bs-delay", "100");
            _attributes.Add("data-container", "body");
            _attributes.Add("data-bs-content", @Popover);
            _attributes.Add("data-bs-template", @PopoverTemplate);
        }
        else
        {
            _attributes.Add("title", @Popover);
        }

        _attributes.Add("style", Style);
        _attributes.Add("src", Src);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!PopoverAsTooltip)
        {
            if (firstRender && Popover != null)
            {
                await Browser.EnablePopover(element);
            }
            else if (_popoverNeedsRefresh)
            {
                _popoverNeedsRefresh = false;
                await Browser.RefreshPopover(element);
            }
        }
    }

    private string BackgroundCircleStyle => string.Format("position:absolute;left:{0};top:{1};", Px(X + 0.5f*Width), Px(Y + 0.5f*Height));

    private string BackgroundRectangleStyle => string.Format("position:absolute;left:{0};top:{1};", Px(X), Px(Y));

    private string Style
    {
        get
        {
            var result = string.Format("position:absolute;left:{0};top:{1};width:{2};height:{3};opacity:{4};", Px(X), Px(Y), Px(Width), Px(Height), Round(Opacity));

            if (OnClick.HasDelegate || OnMouseOver.HasDelegate || Popover != null)
            {
                result += "cursor:pointer;pointer-events:all;";
            }
            else
            {
                result += "pointer-events:none;";
            }

            var shadowFilter = ShadowFilter;
            if (shadowFilter.Length > 0 || Filter.Length > 0)
            {
                result += string.Format("filter:{0} {1};", ShadowFilter, Filter);
            }

            if (Animation != null)
            {
                result += string.Format("animation:{0};", Animation);
            }

            return result;
        }
    }

    private string ShadowFilter => ShadowX > 0 || ShadowY > 0 ? string.Format("drop-shadow({0} {1} {2} {3})", Px(ShadowX), Px(ShadowY), Px(ShadowBlur), ShadowColor) : "";

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(element);
        }
    }
}
