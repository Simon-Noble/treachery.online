<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using System.Globalization;

@code {

    [Parameter]
    public Handler h { get; set; }

    [Parameter]
    public float X { get; set; }

    [Parameter]
    public float Y { get; set; }

    [Parameter]
    public float Diameter {

        get {

            return Width;
        }

        set {

            Width = value;
            Height = value;
        }
    }

    [Parameter]
    public float Width { get; set; }

    [Parameter]
    public float Height { get; set; }

    [Parameter]
    public float Opacity { get; set; } = 1.0f;

    [Parameter]
    public string PopoverStyle { get; set; } = "background-color:black;text-align:center;border:1px solid white;padding:3px 3px 3px 3px;filter:drop-shadow(-5px 5px 2px #000000AA);";

    protected const float TWOPI = 6.2831853072f;

    protected Game Game => h.Game;

    protected Player Player => h.Player;

    protected string Px(double x) => Round(x) + "px";

    protected string Round(double x) => Math.Round(x, 3).ToString(CultureInfo.InvariantCulture);

    private string _id = null;
    protected string Id
    {
        get
        {
            if (_id == null)
            {
                _id = GenerateId();
            }

            return _id;
        }
    }

    private static int nextId = 0;
    protected string GenerateId()
    {
        return (nextId++).ToString();
    }

    protected static bool Near(Point p, int x, int y, int distance)
    {
        return Math.Abs(p.X - x) < distance && Math.Abs(p.Y - y) < distance;
    }

    protected static bool Near(Point p, Point p2, int distance)
    {
        return Math.Abs(p.X - p2.X) < distance && Math.Abs(p.Y - p2.Y) < distance;
    }

    protected static Point PlayerTokenPosition(Game game, int positionAtTable)
    {
        var positionSector = Math.Floor((float)positionAtTable * Map.NUMBER_OF_SECTORS / game.MaximumNumberOfPlayers);
        double angle = (4.5 - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;
        var x = Skin.Current.PlanetCenter.X + (int)(Skin.Current.MapRadius * Math.Cos(angle));
        var y = Skin.Current.PlanetCenter.Y + (int)(Skin.Current.MapRadius * Math.Sin(angle));
        return new Point(x, y);
    }

    protected string PopoverTemplate => string.Format("<div class=\"popover\" role=\"tooltip\" style=\"{0}\"><div class=\"arrow\"></div><h3 class=\"popover-header p-0\"></h3><div class=\"popover-body p-0\"></div></div>", PopoverStyle);


    protected string ScaledFont(string font, float scale)
    {
        var fontsizeLower = font.ToLower();
        var result = "";

        foreach (var fontDefinitionPart in fontsizeLower.Split(' ')) {

            if (fontDefinitionPart.Contains("px")) {

                if (float.TryParse(fontDefinitionPart.Remove(fontDefinitionPart.IndexOf("px")), out float fontsizeNumber))
                {
                    result += " " + Px(scale * fontsizeNumber);
                }
                else
                {
                    result += " " + fontDefinitionPart;
                }
            }
            else
            {
                result += " " + fontDefinitionPart;
            }
        }

        return result;
    }

    protected string Intel(Location intelligenceLocation)
    {
        string result = "<div style='width:300px'>";

        var owner = Game.StrongholdOwnership.ContainsKey(intelligenceLocation) ? Game.StrongholdOwnership[intelligenceLocation] : Faction.None;
        if (owner != Faction.None)
        {
            result += Popup.Get(intelligenceLocation, owner);
        }
        else
        {
            result += Skin.Current.Format("<h5>{0}</h5>", Skin.Current.Describe(intelligenceLocation.Territory));
            if (intelligenceLocation.Orientation != "")
            {
                result += "<div class='mt-0 mb-2'><strong>Sector: " + intelligenceLocation.Orientation + "</strong></div>";
            }
        }

        if (Skin.Current.ShowVerboseToolipsOnMap)
        {
            if (intelligenceLocation == Game.Map.PolarSink)
            {
                result += Skin.Current.Format("<p>Safe haven: no battles are fought here.</p>");
            }

            if (intelligenceLocation.Territory.IsStronghold || Game.IsSpecialStronghold(intelligenceLocation.Territory))
            {
                result += Skin.Current.Format("<p>Yields a victory point at end of turn.</p>");
            }

            if (intelligenceLocation.Territory == Game.AtomicsAftermath)
            {
                result += Skin.Current.Format("<p>ATOMICS AFTERMATH - No shipping here.</p>");
            }

            if (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag)
            {
                result += Skin.Current.Format("<p><strong>Harvesters: </strong>when occupied, grants a {0} collection rate of 3-per-force.</p>", Concept.Resource);
                result += Skin.Current.Format("<p><strong>Ornithopters: </strong>when occupied, your forces can move up to 3 territories.</p>", Concept.Resource);
            }

            if (Game.Applicable(Rule.IncreasedResourceFlow))
            {
                if (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag || intelligenceLocation == Game.Map.TueksSietch)
                {
                    int bonus = (intelligenceLocation == Game.Map.Arrakeen || intelligenceLocation == Game.Map.Carthag) ? 2 : 1;
                    result += Skin.Current.Format("<p>Yields <strong>{0} {1}</strong> at end of turn when occupied.</p>", bonus, Concept.Resource);
                }
            }

            result += Skin.Current.Format("<p>{0} from {1}.</p>", ProtectedFromMonsterText(intelligenceLocation), Concept.Monster);
            result += Skin.Current.Format("<p>{0} from Storms.</p>", ProtectedFromStormText(intelligenceLocation));

            if (intelligenceLocation.Sector == Game.SectorInStorm)
            {
                result += "<p>Currently in Storm.</p>";
            }

            if (intelligenceLocation.SpiceBlowAmount > 0)
            {
                result += Skin.Current.Format("<p>May contain <strong>{0} {1}</strong> after {2}.</p>", intelligenceLocation.SpiceBlowAmount, Concept.Resource, MainPhase.Blow);
            }
        }

        result += SpiceAndForceInfo(intelligenceLocation);

        result += "</div>";

        return result;
    }

    protected string SpiceAndForceInfo(Location intelligenceLocation)
    {
        var result = "";

        result += "<div class=\"row m-0 bg-dark d-flex justify-content-center\">";

        if (Game.ResourcesOnPlanet.ContainsKey(intelligenceLocation))
        {
            result += string.Format("<div class=\"col col-auto\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                Skin.Current.Harvester_URL,
                Game.ResourcesOnPlanet[intelligenceLocation]);
        }

        if (Game.ForcesOnPlanetExcludingEmptyLocations(false).ContainsKey(intelligenceLocation))
        {
            foreach (var b in Game.BattalionsIn(intelligenceLocation))
            {
                var p = Game.GetPlayer(b.Faction);
                if (b.AmountOfSpecialForces > 0 || b.AmountOfForces > 0)
                {
                    if (b.AmountOfForces > 0)
                    {
                        result += string.Format("<div class=\"col col-auto\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                            Skin.Current.GetFactionForceImageURL(p.Faction),
                            b.AmountOfForces);
                    }

                    if (b.AmountOfSpecialForces > 0)
                    {
                        result += string.Format("<div class=\"col col-auto\"><img class=\"img-fluid m-0 p-0\" width=\"32\" height=\"32\" src=\"{0}\" /><strong>&nbsp;{1}</strong></div>",
                            Skin.Current.GetFactionSpecialForceImageURL(p.Faction),
                            b.Faction == Faction.White && h.Faction != Faction.White ? "?" : "" + (b.Faction == Faction.White ? Game.CurrentNoFieldValue : b.AmountOfSpecialForces));
                    }
                }
            }
        }

        foreach (var hero in Game.LeaderState.Where(state => state.Key is IHero && state.Value.Alive && state.Value.CurrentTerritory == intelligenceLocation.Territory).Select(state => state.Key))
        {
            result += string.Format("<div class=\"col col-auto\"><img class=\"img-fluid m-0 p-0\" width=\"64\" height=\"64\" src=\"{0}\" /></div>",
                        Skin.Current.GetImageURL(hero));
        }

        result += "</div>";

        return result;
    }

    protected string ProtectedFromMonsterText(Treachery.Shared.Location l)
    {
        return l.Territory.IsProtectedFromWorm ? "Protected" : "NOT protected";
    }

    protected string ProtectedFromStormText(Treachery.Shared.Location l)
    {
        return h.Game.IsProtectedFromStorm(l) ? "Protected" : "NOT protected";
    }

    protected ElementReference element;
}
