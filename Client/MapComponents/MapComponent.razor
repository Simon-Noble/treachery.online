<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using System.Globalization;

@code {

    [Parameter]
    public Handler h { get; set; }

    [Parameter]
    public float X { get; set; }

    [Parameter]
    public float Y { get; set; }

    [Parameter]
    public float Diameter {

        get {

            return Width;
        }

        set {

            Width = value;
            Height = value;
        }
    }

    [Parameter]
    public float Width { get; set; }

    [Parameter]
    public float Height { get; set; }

    [Parameter]
    public float Opacity { get; set; } = 1.0f;

    [Parameter]
    public string PopoverStyle { get; set; } = "background-color:black;text-align:center;border:2px solid white;padding:0px 0px 0px 0px;";

    protected const float TWOPI = 6.2831853072f;

    protected Game Game => h.Game;

    protected Player Player => h.Player;

    protected string Px(double x) => Round(x) + "px";

    protected string Round(double x) => Math.Round(x, 3).ToString(CultureInfo.InvariantCulture);

    private string _id = null;
    protected string Id
    {
        get
        {
            if (_id == null)
            {
                _id = GenerateId();
            }

            return _id;
        }
    }

    private static int nextId = 0;
    protected string GenerateId()
    {
        return (nextId++).ToString();
    }

    protected static bool Near(Point p, int x, int y, int distance)
    {
        return Math.Abs(p.X - x) < distance && Math.Abs(p.Y - y) < distance;
    }

    protected static bool Near(Point p, Point p2, int distance)
    {
        return Math.Abs(p.X - p2.X) < distance && Math.Abs(p.Y - p2.Y) < distance;
    }

    protected static Point PlayerTokenPosition(Game game, int positionAtTable)
    {
        var positionSector = Math.Floor((float)positionAtTable * Map.NUMBER_OF_SECTORS / game.MaximumNumberOfPlayers);
        double angle = (4.5 - positionSector) * TWOPI / Map.NUMBER_OF_SECTORS;
        var x = Skin.Current.PlanetCenter.X + (int)(Skin.Current.MapRadius * Math.Cos(angle));
        var y = Skin.Current.PlanetCenter.Y + (int)(Skin.Current.MapRadius * Math.Sin(angle));
        return new Point(x, y);
    }

    protected string PopoverTemplate => string.Format("<div class=\"popover\" role=\"tooltip\" style=\"{0}\"><div class=\"arrow\"></div><h3 class=\"popover-header p-0\"></h3><div class=\"popover-body p-0\"></div></div>", PopoverStyle);


    protected string ScaledFont(string font, float scale)
    {
        var fontsizeLower = font.ToLower();
        var result = "";

        foreach (var fontDefinitionPart in fontsizeLower.Split(' ')) {

            if (fontDefinitionPart.Contains("px")) {

                if (float.TryParse(fontDefinitionPart.Remove(fontDefinitionPart.IndexOf("px")), out float fontsizeNumber))
                {
                    result += " " + Px(scale * fontsizeNumber);
                }
                else
                {
                    result += " " + fontDefinitionPart;
                }
            }
            else
            {
                result += " " + fontDefinitionPart;
            }
        }

        return result;
    }
}
