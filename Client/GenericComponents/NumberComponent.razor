<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;

<div style="display: inline-block; position: relative; height: @SymbolSize; width: @SymbolSize;" title="@Title">

    @if (DrawSymbolBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize; height: @SymbolSize;" width="32" height="32" viewBox="0 0 32 32"><circle cx="16" cy="16" r="15.5" stroke="@SymbolBackgroundBorderColor" stroke-width="2%" fill="@SymbolBackgroundFillColor" /></svg>
    }

    @if (SymbolSRC != null)
    {
        <img src="@SymbolSRC" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize;" />
    }

    @if (DrawNumberBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize; height: @SymbolSize;" width="16" height="16" viewBox="0 0 16 16"><circle cx="@NumberBackgroundOffsetX" cy="@NumberBackgroundOffsetY" r="@NumberBackgroundRadius" stroke="@NumberBackgroundBorderColor" stroke-width="2%" fill="@NumberBackgroundFillColor" /></svg>
    }

    @if (BehindNumberSRC != null)
    {
        <img src="@BehindNumberSRC" style="position: absolute; left: @BehindNumberImageOffsetX; top:@BehindNumberImageOffsetY; width: @BehindNumberImageSize;" />
    }

    <span style="position: absolute; left: @NumberBoxOffsetX; top:@NumberBoxOffsetY; width: @NumberBoxSize; font-size: @NumberFontSize; font-weight: bold; color: @NumberColor; line-height: 1.0; text-align:center; white-space:nowrap; @NumberBorder">@Value</span>

</div>

@code {

    [Parameter]
    public float Value { get; set; }

    [Parameter]
    public string SymbolSRC { get; set; } = null;

    [Parameter]
    public string SymbolBackgroundFillColor { get; set; } = null;

    [Parameter]
    public string SymbolBackgroundBorderColor { get; set; } = null;

    [Parameter]
    public string NumberColor { get; set; } = "black";

    [Parameter]
    public string NumberBorderColor { get; set; } = "white";

    [Parameter]
    public int NumberBorderWidth { get; set; } = 0;

    [Parameter]
    public NumberAlignment NumberAlignment { get; set; } = NumberAlignment.Center;

    [Parameter]
    public string NumberBackgroundFillColor { get; set; } = null;

    [Parameter]
    public string NumberBackgroundBorderColor { get; set; } = null;

    [Parameter]
    public string BehindNumberSRC { get; set; } = null;

    [Parameter]
    public int Size { get; set; } = 36;

    [Parameter]
    public string Title { get; set; } = "";

    private string SymbolSize => "" + Size + "px";

    private bool DrawSymbolBackground => SymbolBackgroundFillColor != null || SymbolBackgroundBorderColor != null;

    private bool DrawNumberBackground => NumberBackgroundFillColor != null || NumberBackgroundBorderColor != null;

    private string NumberBoxSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + Size + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.6f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBoxOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "0px",
                NumberAlignment.BottomRight => "" + ((int)(0.4f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBoxOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + ((int)(0.2f * Size)) + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.45f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + ((int)(1.2 * Size)) + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.7 * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + ((int)(-0.1 * Size)) + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.35f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + ((int)(-0.1 * Size)) + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.35f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberFontSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + ((int)(0.5f * Size)) + "px",
                NumberAlignment.BottomRight => "" + ((int)(0.45f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBackgroundRadius
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "7.5px",
                NumberAlignment.BottomRight => "4.75px",
                _ => "0px"
            };
        }
    }

    private int NumberBackgroundOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private int NumberBackgroundOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private string NumberBorder => NumberBorderWidth > 0 ? Support.TextBorder(NumberBorderWidth, NumberBorderColor) : "";
}
