<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Client;

<div 
    style=@Style
    @onmouseover=@(e => {_shown = true;})
    @onmouseout=@(e => {_shown = false;})>

    @ChildContent

</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public float Width { get; set; } = 200;

    [Parameter]
    public float HandleWidth { get; set; } = 40;

    [Parameter]
    public string BackgroundColor { get; set; } = "black";

    [Parameter]
    public string BorderColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 2;

    protected override async Task OnParametersSetAsync()
    {
        _dims = await Browser.GetWindowDimensions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _dims = await Browser.GetWindowDimensions();
    }

    private Dimensions _dims = new Dimensions() { Width = 640, Height = 480 };
    private bool _shown = false;

    private string Style
    {
        get
        {
            var windowHeight = Math.Max(_dims.Height, 200);
            var panelHeight = Support.Round(0.67f * _dims.Height);
            var topMargin = Support.Round(0.1f * _dims.Height);

            //border-style: solid; border-color: {3}; border-width: {4}px; 

            return string.Format("position: absolute; left: {0}px; transition: 0.5s; padding: 0px; width: {1}px; border-radius: 0 5px 5px 0; background-color: {2}; overflow: auto; height: {5}px; top: {6}px;", 
                _shown ? "0" : Support.Round(-Width + HandleWidth), 
                Support.Round(Width),
                BackgroundColor,
                BorderColor,
                BorderWidth,
                panelHeight,
                topMargin);
        }
    }

}
