<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Client;

<div 
    style=@Style
    @onmouseover=@(e => {_shown = true;})
    @onmouseout=@(e => {_shown = false;})>

    @ChildContent

</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public float Width { get; set; } = 200;

    [Parameter]
    public float HandleWidth { get; set; } = 40;

    [Parameter]
    public float Height { get; set; } = 200;

    [Parameter]
    public string BackgroundColor { get; set; } = "black";

    [Parameter]
    public string BorderColor { get; set; } = "white";

    [Parameter]
    public int BorderWidth { get; set; } = 2;

    [Parameter]
    public HoverPanelPosition Position { get; set; } = HoverPanelPosition.Left;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var currentDimensions = await Browser.GetWindowDimensions();
        if (Math.Abs(_dims.Width - currentDimensions.Width) > 0.1f || Math.Abs(_dims.Height - currentDimensions.Height) > 0.1f)
        {
            _dims = currentDimensions;
            StateHasChanged();
        }
        
    }

    private Dimensions _dims = new Dimensions() { Width = 640, Height = 480 };
    private bool _shown = false;

    private string Style
    {
        get
        {
            switch (Position)
            {
                case HoverPanelPosition.Top:
                    {
                        var windowWidth = Math.Max(_dims.Width, 200);
                        var panelWidth = Support.Round(0.7f * _dims.Width);
                        var leftMargin = Support.Round(0.15f * _dims.Width);

                        return string.Format("position: absolute; left: {0}px; transition: 0.5s; padding: 0px; width: {1}px; border-radius: 0 5px 5px 0; background-color: {2}; overflow: auto; height: {5}px; top: {6}px;",
                            leftMargin,
                            panelWidth,
                            BackgroundColor,
                            BorderColor,
                            BorderWidth,
                            Support.Round(Height),
                            _shown ? "0" : Support.Round(-Height + HandleWidth));
                    }

                default:
                case HoverPanelPosition.Left:
                    {
                        var windowHeight = Math.Max(_dims.Height, 200);
                        var panelHeight = Support.Round(0.7f * _dims.Height);
                        var topMargin = Support.Round(0.15f * _dims.Height);

                        return string.Format("position: absolute; left: {0}px; transition: 0.5s; padding: 0px; width: {1}px; border-radius: 0 5px 5px 0; background-color: {2}; overflow: auto; height: {5}px; top: {6}px;",
                            _shown ? "0" : Support.Round(-Width + HandleWidth),
                            Support.Round(Width),
                            BackgroundColor,
                            BorderColor,
                            BorderWidth,
                            panelHeight,
                            topMargin);
                    }
            }
        }
    }

    public enum HoverPanelPosition : int
    {
        None = 0,
        Left = 4,
        Top = 8,
        Right = 12,
        Bottom = 16
    }
}
