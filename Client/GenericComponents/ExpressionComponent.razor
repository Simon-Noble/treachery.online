<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using System.Collections;
@using System.Linq;

@for (int elementnr = 0; elementnr < Expression.Elements.Length; elementnr++)
{
    var part = Expression.Elements[elementnr];

    if (part == null)
    {
        <span class="fw-bold">none</span>
    }
    else
    {
        switch (part)
        {
            case string str:
                <span style=@TextBorder>@part</span>
                break;

            case IEnumerable e:
                {
                    var elts = DetermineElements(e);

                    for (int i = 0; i < elts.Count; i++)
                    {
                        <ExpressionComponent Expression=elts[i] Size=@Size Game=Game/>
                    }
                }
                break;

            case Message m:
                <ExpressionComponent Expression=m.Expression Size=@Size Game=Game/>
                break;

            case MessagePart mp:
                <ExpressionComponent Expression=mp.Expression Size=@Size Game=Game/>
                break;

            case int i:
                <SimpleNumberComponent Size=@Size>@i</SimpleNumberComponent>
                break;

            case float f:
                <SimpleNumberComponent Size=@Size>@Support.RoundWithHalves(f)</SimpleNumberComponent>
                break;

            case double d:
                <SimpleNumberComponent Size=@Size>@Support.RoundWithHalves(d)</SimpleNumberComponent>
                break;

            case Payment payment:
                <TextBeforeImage ImageURL="@Skin.Current.Harvester_URL" Size=@Size Title="@Skin.Current.Describe(Concept.Resource)" TextBorder=@TextBorder>@payment.Amount</TextBeforeImage>
                @if (payment.By != Faction.None)
                {
                    <span> by <FactionComponent Faction=payment.By Diameter=@Size/></span>
                }
                break;

            case Faction faction:
                <FactionComponent Faction=faction Diameter=@Size/>
                break;

            case TreacheryCard or LeaderSkill or TechToken:
                <RichText Shown=@part Style=@TextBorder/>
                break;
    
            case IHero hero:
                <RichText Style=@Support.TextBorder(1, Skin.Current.FactionColor[hero.Faction]) Class="" Shown=@Skin.Current.Describe(hero) Popover=@Popup.Get(hero, Game)/>
                break;

            case Concept monster when monster == Concept.Monster:
                <img src=@Skin.Current.Monster_URL width=@Size height=@Size title=@Skin.Current.Describe(Concept.Monster) style="filter: drop-shadow(2px 2px 2px black);"/>
                break;
    
            case FactionForce or FactionSpecialForce:
                <Image Shown=@part Width=@Size ShowPopover=false/>
                break;

            case Location or Territory or AuctionType or BrownEconomicsStatus or TreacheryCardType or StrongholdAdvantage or FactionAdvantage or Ruleset or Rule:
                <span class="fw-bold" style=@TextBorder>@Skin.Current.Describe(part)</span>
                break;

            default:
                <span style=@TextBorder>@Skin.Current.Describe(part)</span>
                break;
        }
    }
}

@code {

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Expression Expression { get; set; }

    [Parameter]
    public int Size { get; set; } = 14;

    [Parameter]
    public string TextBorder { get; set; } = "";

    private List<Expression> DetermineElements(IEnumerable e)
    {
        var result = new List<Expression>();
        bool useSeparators = false;
        bool firstItem = true;

        foreach (var elt in e)
        {
            if (firstItem) {

                useSeparators = !ShowWithoutSeparators(elt);
            }

            if (useSeparators && !firstItem)
            {
                result.Add(new Expression(", ", elt));
            }
            else
            {
                result.Add(new Expression(elt));
            }

            firstItem = false;
        }

        return result;
    }

    private bool ShowWithoutSeparators(object e) => e is Faction || e is MessagePart || e is FactionForce || e is FactionSpecialForce || e is IHero;
}
