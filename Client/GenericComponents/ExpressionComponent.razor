<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using System.Collections;
@using System.Linq;

@for (int elementnr = 0; elementnr < Expression.Elements.Length; elementnr++)
{
    var part = Expression.Elements[elementnr];

    //@Support.RoundWithHalves(Size)

    if (part == null)
    {
        <span class="fw-bold">none</span>
    }
    else if (part is string)
    {
        <span>@part</span>
    }
    else if (part is IEnumerable e)
    {
        var elts = new List<Expression>();
        bool useSeparators = false;
        bool firstItem = true;

        foreach (var elt in e)
        {
            if (firstItem) {

                useSeparators = ShownAsText(elt);
            }

            if (useSeparators && !firstItem)
            {
                elts.Add(new Expression(", ", elt));
            }
            else
            {
                elts.Add(new Expression(elt));
            }

            firstItem = false;
        }

        for (int i = 0; i < elts.Count; i++)
        {
            <ExpressionComponent Expression=elts[i] Size=@Size Game=Game/>
        }
    }
    else if (part is Message m)
    {
        <ExpressionComponent Expression=m.Expression Size=@Size Game=Game/>
    }
    else if (part is MessagePart mp)
    {
        <ExpressionComponent Expression=mp.Expression Size=@Size Game=Game/>
    }
    else if (part is int i)
    {
        <SimpleNumberComponent Size=@Size>@i</SimpleNumberComponent>
    }
    else if (part is float f)
    {
        <SimpleNumberComponent Size=@Size>@Support.RoundWithHalves(f)</SimpleNumberComponent>
    }
    else if (part is double d)
    {
        <SimpleNumberComponent Size=@Size>@Support.RoundWithHalves(d)</SimpleNumberComponent>
    }
    else if (part is Payment payment)
    {
        <TextBeforeImage ImageURL="@Skin.Current.Harvester_URL" Size=@Size Title="@Skin.Current.Describe(Concept.Resource)">@payment.Amount</TextBeforeImage>
        @if (payment.By != Faction.None)
        {
            <span> by <FactionComponent Faction=payment.By Diameter=@Size/></span>    
        }
    }
    else if (part is Faction faction)
    {
        <FactionComponent Faction=faction Diameter=@Size/>
    }
    else if (part is TreacheryCard || part is LeaderSkill || part is TechToken)
    {
        <RichText Shown=@part/>
    }
    else if (part is IHero hero)
    {
        <RichText Style=@Support.TextBorder(1, Skin.Current.FactionColor[hero.Faction]) Shown=@Skin.Current.Describe(hero) Popover=@Popup.Get(hero, Game)/>
    }
    else if (part is Concept monster && monster == Concept.Monster)
    {
        <img src=@Skin.Current.Monster_URL width=@Size height=@Size title=@Skin.Current.Describe(Concept.Monster) style="filter: drop-shadow(2px 2px 2px black);"/>
    }
    else if (part is FactionForce || part is FactionSpecialForce)
    {
        <Image Shown=@part Width=@Size ShowPopover=false/>
    }
    else if (ShownAsText(part))
    {
        <span class="fw-bold">@Skin.Current.Describe(part)</span>
    }
    else
    {
        <span>@Skin.Current.Describe(part)</span>
    }
}

@code {

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Expression Expression { get; set; }

    [Parameter]
    public int Size { get; set; } = 14;

    private bool ShownAsText(object part) => part is Location || part is Territory || part is AuctionType || part is BrownEconomicsStatus || part is TreacheryCardType || part is StrongholdAdvantage || part is FactionAdvantage || part is Ruleset || part is Rule;
}
