<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;

<div class="@Class">

    @if (Label != "")
    {
        <label class="me-1">@Label</label>
    }

    <NumberPickerComponent Disabled="@Disabled" @bind-Value="@Value" OnDown="OnDown" OnUp="OnUp" Min="Min" Max="Max"
                            SymbolSRC="@ForceSymbolSRC" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="black"
                            NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
</div>


@code {

    private int _value;

    [Parameter]
    public int Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
                OnChanged?.Invoke(value);
            }
        }
    }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public Action<int> OnChanged { get; set; }

    [Parameter]
    public EventCallback OnUp { get; set; }

    [Parameter]
    public EventCallback OnDown { get; set; }

    [Parameter]
    public int Min { get; set; }

    [Parameter]
    public int Max { get; set; }

    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public Faction Faction { get; set; } = Faction.None;

    [Parameter]
    public bool Special { get; set; } = false;

    [Parameter]
    public bool Inline { get; set; } = false;

    private string DisplayClass
    {
        // 1 abc <label> <picker> def
        // 
        // 2 abc
        //   <label>
        //   <picker>
        //   def
        //
        // 3 abc <picker> def
        //
        // 4 abc
        //   <picker>
        //   def

        get
        {
            if (Label != "")
            {
                if (Inline)
                {
                    //1
                    return "d-inline-block justify-content-start";
                }
                else
                {
                    //2
                    return "row ms-0 mt-1 mb-1 justify-content-start";
                }
            }
            else
            {
                if (Inline)
                {
                    //3
                    return "d-inline-block";
                }
                else
                {
                    //4
                    return "row ms-0 mt-1 mb-1";
                }
            }
        }
    }

    [Parameter]
    public string Class { get; set; } = "d-inline-flex align-items-center";

    private string ForceSymbolSRC => Special ? Skin.Current.GetFactionSpecialForceImageURL(Faction) : Skin.Current.GetFactionForceImageURL(Faction);
}
