<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections.Generic;
@using Treachery.Shared;
@inherits Component
@typeparam T

<div class="custom-control custom-checkbox small" style="@style">
    <input id="@Id" type="checkbox" disabled="@Disabled" class="custom-control-input" checked="@Values.Contains(Value)" @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />
    <label class="custom-control-label" for="@Id">@Skin.Current.Describe(Value) @ChildContent</label>
</div>

@code {

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public List<T> Values { get; set; }

    [Parameter]
    public Action Callback { get; set; } = null;

    [Parameter]
    public string style { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private void CheckboxClicked(T value, object checkedValue)
    {
        bool check = (bool)checkedValue;
        if (check)
        {
            Values.Add(value);
        }
        else
        {
            Values.Remove(value);
        }

        if (Callback != null)
        {
            Callback.Invoke();
        }
    }
}
