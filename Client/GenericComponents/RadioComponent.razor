<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections;
@using System.Collections.Generic;
@using System.Linq;
@using Treachery.Shared;
@inherits Component;
@typeparam T

@if (Label != null)
{
    <label class="mb-0" for="@Id">@Label</label>
}

@foreach (var valueAndLabel in Values.Zip(LabelsForValues, (v, l) => new { Value = v, Label = l }))
{
    string optionId = Id + "-" + GenerateId();

    <div class="form-check mb-0">
        <input class="form-check-input" type="radio" name="@Id" id="@optionId" value="@GetValueAsString(valueAndLabel.Value)" @onchange="OnChange" checked="@(valueAndLabel.Value.Equals(Value))">
        <label class="form-check-label" for="@optionId">@valueAndLabel.Label</label>
    </div>
}

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    //If ValueLabels are not supplied, they will be generated by using Skin.Describe() on the Values.
    [Parameter]
    public IEnumerable ValueLabels { get; set; } = null;

    [Parameter]
    public string EmptyLabel { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    private bool _isIdentifiable = false;

    protected override void OnInitialized()
    {
        bool _isIdentifiable = typeof(IIdentifiable).IsAssignableFrom(typeof(T));
    }

    private string _valueAsString;

    private T _value;

    [Parameter]
    public T Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (_value == null && value != null || _value != null && !_value.Equals(value))
            {
                _value = value;
                _valueAsString = GetValueAsString(value);
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public bool Required { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (Required && (object)Value == default)
        {
            Value = Values.FirstOrDefault();
        }
    }

    private void OnChange(ChangeEventArgs args)
    {
        var value = (string)args.Value;

        if (_valueAsString != value)
        {
            _valueAsString = value;
            if (_valueAsString == "")
            {
                Value = default(T);
            }
            else
            {
                var foundValue = Values.FirstOrDefault(v => GetValueAsString(v) == _valueAsString);

                if (foundValue == null)
                {
                    Value = default(T);
                }
                else
                {
                    Value = foundValue;
                }
            }
        }
    }

    private IEnumerable<string> LabelsForValues
    {
        get
        {
            if (ValueLabels == null)
            {
                return Values.Select(v => v != null ? Skin.Current.Describe(v) : EmptyLabel);
            }
            else
            {
                return Enumerable.Cast<string>(ValueLabels);
            }
        }
    }

    private string GetValueAsString(T value)
    {
        if (value == null)
        {
            return "";
        }
        else if (_isIdentifiable)
        {
            return (value as IIdentifiable).Id.ToString();
        }
        else
        {
            return value.ToString();
        }
    }
}
