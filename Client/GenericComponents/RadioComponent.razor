<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections;
@using System.Collections.Generic;
@using System.Linq;
@using Treachery.Shared;
@inherits GameComponent;
@typeparam T

@if (Label != null)
{
    <label class="mb-0" for="@Id">@Label</label>
}

@foreach (var item in _shown.Values)
{
    <div class="form-check mb-0">
        <input class="form-check-input" style="cursor:pointer" type="radio" id="@Id-@item.Id" value=@item.Id @onclick=@(e => ChangeValue(item.Value)) checked=@Equals(item.Value, Value)>
        <label class="form-check-label" style="cursor:pointer" for="@Id-@item.Id">@item.Label</label>
    </div>
}

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    [Parameter]
    public T Value { get; set; }

    private Dictionary<string, ValueToShow> _shown { get; set; }

    [Parameter]
    public IEnumerable<string> ValueLabels { get; set; } = null;

    [Parameter]
    public string EmptyLabel { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public bool Required { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!Values.Contains(Value))
        {
            await SetValue(Required ? Values.FirstOrDefault() : default);
        }

        if (ValueLabels == null || ValueLabels.Count() != Values.Count())
        {
            ValueLabels = Values.Select(v => v != null ? Skin.Current.Describe(v) : EmptyLabel);
        }

        _shown = Values.Zip(ValueLabels, (v, l) => new ValueToShow { Value = v, Id = GetId(v), Label = l }).ToDictionary(triple => triple.Id, triple => triple);
    }

    private async Task ChangeValue(T value)
    {
        await SetValue(value);
    }

    private async Task SetValue(T newValue)
    {
        if (!Equals(Value, newValue))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
        }
    }

    private struct ValueToShow
    {
        internal T Value;
        internal string Id;
        internal string Label;
    }
}
