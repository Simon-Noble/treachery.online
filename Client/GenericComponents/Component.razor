@using Treachery.Shared;

@code {

    private string _id = null;
    protected string Id
    {
        get
        {
            if (_id == null)
            {
                _id = GenerateId();
            }

            return _id;
        }
    }

    protected string GenerateId()
    {
        return Guid.NewGuid().ToString();
    }

    protected string Color(Faction f)
    {
        return string.Format("background-color:{0}", Skin.Current.GetFactionColor(f));
    }

    protected string ColorTransparant(Faction f)
    {
        return string.Format("background-color:{0}", Skin.Current.GetFactionColorTransparant(f));
    }

    private bool _redrawCycleStarted = false;
    protected void StartRedrawCycle(int interval)
    {
        if (!_redrawCycleStarted && interval > 0)
        {
            _redrawCycleStarted = true;
            _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
        }
    }

    private void ContinueRedrawCycle(int interval, bool firstCall = true)
    {
        Redraw();
        _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
    }

    protected virtual void Redraw()
    {
        StateHasChanged();
    }

    protected IEnumerable<string> GetLabels<T>(IEnumerable<T> items, string labelIfNull = "")
    {
        return items.Select(i => i != null ? i.ToString() : labelIfNull);
    }
}