<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections.Generic;
@typeparam T

@if (Label != null)
{
    <label class="d-block mt-1 mb-0">@Label</label>
}

<div>

    @foreach (var item in Values.Zip(ImageURLs, (v, i) => new { Value = v, Image = i }).Zip(PopupHTMLs, (v, h) => new { Value = v.Value, Image = v.Image, Popup = h }))
    {
        <img src="@item.Image"
             @onclick="e => Click(item.Value)"
             @onmouseover="e => MouseOver(item.Value)"
             @onmouseout="e => MouseOut(item.Value)"
             style="@DetermineFilter(item.Value)"
             class="img-fluid pr-1" width=@ImageWidth 
             data-animation="true" data-content="@item.Popup" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">
    }

</div>

@code {

    private T _value;

    [Parameter]
    public T Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (!Equals(_value, value))
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
                OnChanged?.Invoke();
            }
        }
    }

    [Parameter]
    public List<T> Selected { get; set; } = null;

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    [Parameter]
    public IEnumerable<string> ImageURLs { get; set; } = null;

    [Parameter]
    public int ImageWidth { get; set; } = 60;

    [Parameter]
    public IEnumerable<string> PopupHTMLs { get; set; } = null;

    [Parameter]
    public string UnselectedFilter { get; set; } = "grayscale(50%) brightness(50%) contrast(80%)";

    [Parameter]
    public string HoverFilter { get; set; } = "brightness(130%)";

    [Parameter]
    public bool Required { get; set; } = true;

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public Action OnChanged { get; set; }

    protected override void OnParametersSet()
    {
        var nrOfValues = Values.Count();
        if (ImageURLs == null || ImageURLs.Count() != nrOfValues) ImageURLs = new string[nrOfValues];
        if (PopupHTMLs == null || PopupHTMLs.Count() != nrOfValues) PopupHTMLs = new string[nrOfValues];
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Selected == null && !Values.Contains(Value))
        {
            Value = Required ? Values.FirstOrDefault() : default;
        }
    }

    private void SwapSelection(T value)
    {
        if (Selected.Contains(value))
        {
            Selected.Remove(value);
        }
        else
        {
            Selected.Add(value);
        }

        ValueChanged.InvokeAsync(value);
        OnChanged?.Invoke();
    }

    private void Click(T item)
    {
        if (!Disabled)
        {
            if (Selected == null)
            {
                if (Equal(_value, item))
                {
                    if (!Required)
                    {
                        Value = default;
                    }
                }
                else
                {
                    Value = item;
                }
            }
            else
            {
                SwapSelection(item);
            }
        }
    }

    private T _hovered = default;

    private void MouseOver(T item)
    {
        _hovered = item;
    }

    private void MouseOut(T item)
    {
        _hovered = default;
    }

    private string DetermineFilter(T item)
    {
        string result = "filter:";

        if (Selected == null)
        {
            if (!Equal(_value, item)) result += UnselectedFilter + " ";
        }
        else
        {
            if (!Selected.Contains(item)) result += UnselectedFilter + " ";
        }

        if (Equal(_hovered, item)) result += HoverFilter;
        return result;
    }

    private bool Equal(T a, T b)
    {
        return a == null && b == null || a != null && a.Equals(b);
    }
}
