<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@code {

    [Parameter]
    public Handler h { get; set; }

    protected Game Game => h.Game;

    protected Player Player => h.Player;

    protected Faction Faction => h.Faction;

    private string _id = null;
    protected string Id
    {
        get
        {
            if (_id == null)
            {
                _id = Guid.NewGuid().ToString();
            }

            return _id;
        }
    }

    public virtual void Dispose()
    {
        _redrawCycleStarted = false;
    }

    protected async Task Request(GameEvent e)
    {
        await h.HostProxy.Request(e);
    }

    private bool _redrawCycleStarted = false;
    protected void StartRedrawCycle(int interval)
    {
        if (!_redrawCycleStarted && interval > 0)
        {
            _redrawCycleStarted = true;
            _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
        }
    }

    protected async Task StartRedrawCycleAsync(int interval)
    {
        if (!_redrawCycleStarted && interval > 0)
        {
            _redrawCycleStarted = true;
            await Task.Delay(interval).ContinueWith(e => ContinueRedrawCycleAsync(interval, false));
        }
    }

    private void ContinueRedrawCycle(int interval, bool firstCall = true)
    {
        if (_redrawCycleStarted)
        {
            Redraw();
            _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
        }
    }

    private async Task ContinueRedrawCycleAsync(int interval, bool firstCall = true)
    {
        if (_redrawCycleStarted)
        {
            await RedrawAsync();
            await Task.Delay(interval).ContinueWith(e => ContinueRedrawCycleAsync(interval, false));
        }
    }

    protected virtual void Redraw()
    {
        StateHasChanged();
    }

    protected virtual async Task RedrawAsync()
    {
        await Task.Delay(0).ContinueWith(e => StateHasChanged());
    }

    private bool _timerCycleStarted = false;
    protected void StartTimerCycle(int interval)
    {
        if (!_timerCycleStarted && interval > 0)
        {
            _timerCycleStarted = true;
            _ = Task.Delay(interval).ContinueWith(e => ContinueTimerCycle(interval, false));
        }
    }

    protected async Task StartTimerCycleAsync(int interval)
    {
        if (!_timerCycleStarted && interval > 0)
        {
            _timerCycleStarted = true;
            await Task.Delay(interval).ContinueWith(e => ContinueTimerCycleAsync(interval, false));
        }
    }

    private void ContinueTimerCycle(int interval, bool firstCall = true)
    {
        if (_timerCycleStarted)
        {
            Cycle();
            _ = Task.Delay(interval).ContinueWith(e => ContinueTimerCycle(interval, false));
        }
    }

    private async Task ContinueTimerCycleAsync(int interval, bool firstCall = true)
    {
        if (_timerCycleStarted)
        {
            await CycleAsync();
            await Task.Delay(interval).ContinueWith(e => ContinueTimerCycleAsync(interval, false));
        }
    }

    protected virtual void Cycle()
    {

    }

    protected virtual async Task CycleAsync()
    {
        await Task.CompletedTask;
    }

    protected static IEnumerable<string> GetLabels<T>(IEnumerable<T> items, string labelIfNull = "")
    {
        return items.Select(i => i != null ? Name(i) : labelIfNull);
    }

    protected static string Name(object o) => Skin.Current.Describe(o);

    protected static string GetImage(TreacheryCardType type)
    {
        return Skin.Current.GetImageURL(TreacheryCardManager.GetCardsInAndOutsidePlay().FirstOrDefault(c => c.Type == type));
    }

    protected static string DescribeCard(TreacheryCardType t)
    {
        return Skin.Current.Format("Use {0}?", t);
    }

    protected string GetId(object value)
    {
        if (value == null)
        {
            return "";
        }
        else 
        {
            var valueAsIdentifiable = value as IIdentifiable;

            if (valueAsIdentifiable != null)
            {
                return valueAsIdentifiable.Id.ToString();
            }
            else
            {
                return Skin.Current.Describe(value);
            }
        }
    }
}

