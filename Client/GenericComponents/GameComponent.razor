<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@inherits Component

@code {

    [Parameter]
    public Handler h { get; set; }

    protected async Task Request(GameEvent e)
    {
        await h.HostProxy.Request(e);
    }

    protected Game Game => h.Game;

    protected Player Player => h.Player;

    protected Faction Faction => h.Faction;

    private static Dictionary<Type, bool> SavedCollapsedStateValues = new Dictionary<Type, bool>();
    private bool? _collapsed = null;
    protected bool Collapsed
    {
        get
        {
            if (_collapsed == null)
            {
                if (SavedCollapsedStateValues.ContainsKey(GetType()))
                {
                    _collapsed = SavedCollapsedStateValues[GetType()];
                }
                else
                {
                    _collapsed = false;
                }
            }

            return (bool)_collapsed;
        }
        set
        {
            if (_collapsed != value)
            {
                if (SavedCollapsedStateValues.ContainsKey(GetType()))
                {
                    SavedCollapsedStateValues.Remove(GetType());
                }

                SavedCollapsedStateValues.Add(GetType(), value);
                _collapsed = value;
                StateHasChanged();
            }
        }
    }

    protected void StartRedrawCycle(int interval)
    {
        if (interval > 0)
        {
            Redraw();
            _ = Task.Delay(interval).ContinueWith(e => StartRedrawCycle(interval));
        }
    }

    protected virtual void Redraw()
    {
        StateHasChanged();
    }

    protected IEnumerable<string> GetLabels<T>(IEnumerable<T> items, string labelIfNull = "")
    {
        return items.Select(i => i != null ? i.ToString() : labelIfNull);
    }
}
