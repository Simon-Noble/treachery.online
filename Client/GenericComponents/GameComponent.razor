<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@code {

    [Parameter]
    public Handler h { get; set; }

    protected async Task Request(GameEvent e)
    {
        await h.HostProxy.Request(e);
    }

    protected Game Game => h.Game;

    protected Player Player => h.Player;

    protected Faction Faction => h.Faction;

    private static Dictionary<Type, bool> SavedCollapsedStateValues = new Dictionary<Type, bool>();
    private bool? _collapsed = null;
    protected bool Collapsed
    {
        get
        {
            if (_collapsed == null)
            {
                if (SavedCollapsedStateValues.ContainsKey(GetType()))
                {
                    _collapsed = SavedCollapsedStateValues[GetType()];
                }
                else
                {
                    _collapsed = false;
                }
            }

            return (bool)_collapsed;
        }
        set
        {
            if (_collapsed != value)
            {
                if (SavedCollapsedStateValues.ContainsKey(GetType()))
                {
                    SavedCollapsedStateValues.Remove(GetType());
                }

                SavedCollapsedStateValues.Add(GetType(), value);
                _collapsed = value;
                StateHasChanged();
            }
        }
    }

    private string _id = null;
    protected string Id
    {
        get
        {
            if (_id == null)
            {
                _id = GenerateId();
            }

            return _id;
        }
    }

    protected string GenerateId()
    {
        return Guid.NewGuid().ToString();
    }

    protected string Color(Faction f)
    {
        return string.Format("background-color:{0}", Skin.Current.GetFactionColor(f));
    }

    protected string ColorTransparant(Faction f)
    {
        return string.Format("background-color:{0}", Skin.Current.GetFactionColorTransparant(f));
    }

    private bool _redrawCycleStarted = false;
    protected void StartRedrawCycle(int interval)
    {
        if (!_redrawCycleStarted && interval > 0)
        {
            _redrawCycleStarted = true;
            _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
        }
    }

    private void ContinueRedrawCycle(int interval, bool firstCall = true)
    {
        if (_redrawCycleStarted)
        {
            Redraw();
            _ = Task.Delay(interval).ContinueWith(e => ContinueRedrawCycle(interval, false));
        }
    }

    protected virtual void Redraw()
    {
        StateHasChanged();
    }

    protected IEnumerable<string> GetLabels<T>(IEnumerable<T> items, string labelIfNull = "")
    {
        return items.Select(i => i != null ? i.ToString() : labelIfNull);
    }

    public virtual void Dispose()
    {
        _ = Browser.RefreshPopovers();
        _redrawCycleStarted = false;
    }

    protected void StateHasChanged<T>(T value)
    {
        StateHasChanged();
    }

}
