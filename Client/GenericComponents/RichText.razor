<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@{
    var popover = TextPop;

    if (popover != null && popover.Length > 0)
    {
        <span @ref=@element class=@Class style=@Style data-bs-animation="true" data-bs-content="@TextPop" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-toggle="popover">
            @Skin.Current.Describe(Shown)
        </span>
    }
    else
    {
        <span @ref=@element class=@Class style=@Style>
            @Skin.Current.Describe(Shown)
        </span>
    }
}

@code {

    private object _shown;

    [Parameter]
    public object Shown { 

        get
        {
            return _shown;
        }

        set
        {
            if (value != _shown)
            {
                _shown = value;
                _popoverNeedsRefresh = true;
            }
        }
    }

    [Parameter]
    public string Class { get; set; } = "fw-bold";

    [Parameter]
    public string Style { get; set; }

    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public string Popover { 

        get
        {
            return _popover;
        } 

        set
        {
            if (value != _popover)
            {
                _popover = value;
                _popoverNeedsRefresh = true;
            }
        }
    }

    [Parameter]
    public bool ShowPopover { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && TextPop != null)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    private string TextPop
    {
        get
        {
            if (!ShowPopover) return null;

            return Popover != null ? Popover : GetHoverHTML(Shown);
        }
    }

    private ElementReference element;

    public void Dispose()
    {
        if (TextPop != null)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private static string GetHoverHTML(object value)
    {
        string result;

        if (value == null) result = "";
        else if (value is TreacheryCard tc) result = Popup.Get(tc);
        else if (value is ResourceCard rc) result = Popup.Get(rc);
        else if (value is Location loc) result = Popup.Get(loc);
        else if (value is IHero h) result = Popup.Get(h);
        else if (value is LeaderSkill ls) result = Popup.Get(ls);
        else if (value is TechToken tt) result = Popup.Get(tt);
        else result = Popup.Get(Skin.Current.Describe(value));

        return result;
    }
}
