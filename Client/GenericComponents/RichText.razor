<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

<span @ref=@element @attributes=_attributes class=@Class style=@SpanStyle>
    @Skin.Current.Describe(Shown)
</span>

@code {

    private Dictionary<string, object> _attributes;

    [Parameter]
    public object Shown { get; set; }
    private object _shown;

    [Parameter]
    public string Class { get; set; } = "fw-bold";

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Popover { get; set; }
    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; } = false;

    [Parameter]
    public Game Game { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!Equals(_shown, Shown))
        {
            _shown = Shown;

            if (Shown != null)
            {
                PopoverAsTooltip = !ShownHasRichPopover;
                Popover = GetShownPopover();
            }
            else
            {
                Popover = "";
            }
        }

        if (_popover != Popover)
        {
            _attributes = new();
            _popover = Popover;

            if (PopoverAsTooltip) 
            {
                _attributes.Add("title", Popover);
            }
            else
            {
                _attributes.Add("data-bs-trigger", "hover");
                _attributes.Add("data-bs-toggle", "popover");
                _attributes.Add("data-bs-html", "true");
                _attributes.Add("data-bs-animation", "false");
                _attributes.Add("data-bs-delay", "100");
                _attributes.Add("data-container", "body");
                _attributes.Add("data-bs-content", Popover);
                _popoverNeedsRefresh = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null && !PopoverAsTooltip)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    private ElementReference element;

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private string GetShownPopover()
    {
        return (Shown) switch
        {
            null => "",
            TreacheryCard tc => Popup.Get(tc),
            ResourceCard rc => Popup.Get(rc),
            IHero h => Game != null ? Popup.Get(h, Game) : Popup.Get(h),
            LeaderSkill ls => Popup.Get(ls),
            TechToken tt => Popup.Get(tt),
            StrongholdAdvantage loc => Popup.Get(loc),

            TerrorType terr => Skin.Current.GetTerrorTypeDescription(terr),
            Ambassador amb => Skin.Current.GetAmbassadorDescription(amb),

            _ => Skin.Current.Describe(Shown)
        };
    }

    private bool ShownHasRichPopover => Shown is TreacheryCard || Shown is ResourceCard || Shown is IHero || Shown is LeaderSkill || Shown is TechToken || Shown is StrongholdAdvantage;

    private string SpanStyle => Popover != null ? "cursor:pointer;" + Style : Style;
}
