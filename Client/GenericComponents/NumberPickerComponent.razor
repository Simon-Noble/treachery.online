<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

<div style="display: inline-block; position: relative; height: @SymbolSize; width: @TotalWidth; margin: 4px 4px 0px 0px;">

    @if (DrawSymbolBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize; height: @SymbolSize;" width="32" height="32" viewBox="0 0 32 32"><circle cx="16" cy="16" r="15.5" stroke="@SymbolBackgroundBorderColor" stroke-width="2%" fill="@SymbolBackgroundFillColor" /></svg>
    }

    @if (SymbolSRC != null)
    {
        <img src="@SymbolSRC" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize;" />
    }

    @if (DrawNumberBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0px; top: 0px; width: @SymbolSize; height: @SymbolSize;" width="16" height="16" viewBox="0 0 16 16"><circle cx="@NumberBackgroundOffsetX" cy="@NumberBackgroundOffsetY" r="@NumberBackgroundRadius" stroke="@NumberBackgroundBorderColor" stroke-width="2%" fill="@NumberBackgroundFillColor" /></svg>
    }

    @if (BehindNumberSRC != null)
    {
        <img src="@BehindNumberSRC" style="position: absolute; left: @BehindNumberImageOffsetX; top:@BehindNumberImageOffsetY; width: @BehindNumberImageSize;" />
    }

    <span style="position: absolute; left: @NumberBoxOffsetX; top:@NumberBoxOffsetY; width: @NumberBoxSize; font-size: @NumberFontSize; font-weight: bold; color: @NumberColor; line-height: 1.0; text-align:center; white-space:nowrap;">@Value</span>

    <svg 
         @onclick="@Increase" 
         @onmouseover="e => MouseOver(true)"
         @onmouseout="e => MouseOut(true)"
         xmlns="http://www.w3.org/2000/svg" width="@ArrowSize" height="@ArrowSize" fill="@IncreaseArrowColor" viewBox="0 0 16 16" style="position: absolute; left: @ArrowOffsetX; top: 3px; width: @ArrowSize; filter: @UpStyle;">
        <path fill-rule="evenodd" d="M7.022 1.566a1.13 1.13 0 0 1 1.96 0l6.857 11.667c.457.778-.092 1.767-.98 1.767H1.144c-.889 0-1.437-.99-.98-1.767L7.022 1.566z" />
    </svg>

    <svg 
         @onclick="@Decrease" 
         @onmouseover="e => MouseOver(false)"
         @onmouseout="e => MouseOut(false)"
         xmlns="http://www.w3.org/2000/svg" width="@ArrowSize" height="@ArrowSize" fill="@DecreaseArrowColor" viewBox="0 0 16 16" style="position: absolute; left: @ArrowOffsetX; bottom: 3px; width: @ArrowSize; filter: @DownStyle;">
        <path transform="rotate(180,8,8)" fill-rule="evenodd" d="M7.022 1.566a1.13 1.13 0 0 1 1.96 0l6.857 11.667c.457.778-.092 1.767-.98 1.767H1.144c-.889 0-1.437-.99-.98-1.767L7.022 1.566z" />
    </svg>

</div>

@code {

    private int _value;

    [Parameter]
    public int Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
                OnChanged?.Invoke();
            }
        }
    }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public Action OnChanged { get; set; }

    [Parameter]
    public EventCallback OnUp { get; set; }

    [Parameter]
    public EventCallback OnDown { get; set; }

    [Parameter]
    public int Min { get; set; } = 0;

    [Parameter]
    public int Max { get; set; } = 10;

    [Parameter]
    public string SymbolSRC { get; set; } = null;

    [Parameter]
    public string SymbolBackgroundFillColor { get; set; } = null;

    [Parameter]
    public string SymbolBackgroundBorderColor { get; set; } = null;

    [Parameter]
    public string NumberColor { get; set; } = "black";

    [Parameter]
    public NumberPickerAlignment NumberAlignment { get; set; } = NumberPickerAlignment.Center;

    [Parameter]
    public string NumberBackgroundFillColor { get; set; } = null;

    [Parameter]
    public string NumberBackgroundBorderColor { get; set; } = null;

    [Parameter]
    public string BehindNumberSRC { get; set; } = null;

    [Parameter]
    public string ArrowColor { get; set; } = "#FF5400";

    [Parameter]
    public string DisabledColor { get; set; } = "#FF540080";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public int Size { get; set; } = 36;

    protected override void OnParametersSet()
    {
        if (Value < Min || Value > Max) Value = Min;
    }

    private void Increase()
    {
        if (!Disabled && Value < Max)
        {
            Value++;
            OnUp.InvokeAsync();
        }
    }

    private void Decrease()
    {
        if (!Disabled && Value > Min)
        {
            Value--;
            OnDown.InvokeAsync();
        }
    }

    private bool MayIncrease => !Disabled && Value < Max;

    private bool MayDecrease => !Disabled && Value > Min;

    private bool _upHovered = false;
    private bool _downHovered = false;

    private void MouseOver(bool up)
    {
        if (up)
        {
            _upHovered = true;
        }
        else
        {
            _downHovered = true;
        }
    }

    private void MouseOut(bool up)
    {
        if (up)
        {
            _upHovered = false;
        }
        else
        {
            _downHovered = false;
        }
    }

    private string SymbolSize => "" + Size + "px";

    private string TotalWidth => "" + (1.5 * Size) + "px";

    private bool DrawSymbolBackground => SymbolBackgroundFillColor != null || SymbolBackgroundBorderColor != null;

    private bool DrawNumberBackground => NumberBackgroundFillColor != null || NumberBackgroundBorderColor != null;

    private string IncreaseArrowColor => !Disabled && Value < Max ? ArrowColor : DisabledColor;

    private string DecreaseArrowColor => !Disabled && Value > Min ? ArrowColor : DisabledColor;

    private string NumberBoxSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "" + Size + "px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.6f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBoxOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "0px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.4f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBoxOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "" + ((int)(0.175f * Size)) + "px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.4f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "" + Size + "px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.7 * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "0px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.3f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string BehindNumberImageOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "0px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.35f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberFontSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => "" + ((int)(0.55f * Size)) + "px",
                NumberPickerAlignment.BottomRight => "" + ((int)(0.5f * Size)) + "px",
                _ => "0px"
            };
        }
    }

    private float NumberBackgroundRadius
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => 7.5f,
                NumberPickerAlignment.BottomRight => 4.75f,
                _ => 0
            };
        }
    }

    private int NumberBackgroundOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => 8,
                NumberPickerAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private int NumberBackgroundOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberPickerAlignment.Center => 8,
                NumberPickerAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private string ArrowSize => "" + (int)(0.4f * Size) + "px";

    private string ArrowOffsetX => "" + (int)(1.1f * Size) + "px";

    private string UpStyle => _upHovered && MayIncrease ? string.Format("brightness(150%) drop-shadow(1px 1px 1px {0})", ArrowColor) : "";

    private string DownStyle => _downHovered && MayDecrease ? string.Format("brightness(150%) drop-shadow(1px 1px 1px {0})", ArrowColor) : "";
}
