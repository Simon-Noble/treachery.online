<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@{
    var popover = Popover;

    if (popover != null && popover.Length > 0)
    {
        <img @ref=@element class=@Class style="@Shadow @Style" width=@ImgWidth src=@Src data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@popover/>
    }
    else if (Shown != null)
    {
        <img class=@Class style="@Shadow @Style" width=@ImgWidth src=@Src title=@Skin.Current.Describe(Shown)/>
    }
    else
    {
        <img class=@Class style="@Shadow @Style" width=@ImgWidth src=@Src/>
    }
}

@code {

    private object _shown;

    [Parameter]
    public object Shown { 

        get
        {
            return _shown;
        }

        set
        {
            if (value != _shown)
            {
                _popoverNeedsRefresh = (Popover != null);
                _shown = value;
            }
        }
    }

    private string _src;

    [Parameter]
    public string Src { 

        get
        {
            if (_src != null) {

                return _src;
            }
            else if (Shown != null) {

                return GetImageURL(Shown);
            }
            else {

                return "";
            }
        } 

        set
        {
            _src = value;
        }
    }

    [Parameter]
    public float Width { get; set; } = 0;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public string Popover { 

        get
        {
            if (_popover != null) {

                return _popover;
            }
            else if (ShowPopover && Shown != null) {

                return GetHoverHTML(Shown);
            }
            else {

                return null;
            }
        } 

        set
        {
            if (value != _popover)
            {
                _popoverNeedsRefresh = (Popover != null);

                _popover = value;
            }
        }
    }

    [Parameter]
    public bool ShowPopover { get; set; } = true;

    private ElementReference element;
    private string ImgWidth;

    protected override void OnParametersSet()
    {
        ImgWidth = Width > 0 ? Support.Round(Width) : "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    public void Dispose()
    {
        if (Popover != null)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private string Shadow => "filter: drop-shadow(1px 1px 1px black);";

    private string GetImageURL(object value)
    {
        string result;

        if (value == null) result = "";
        else if (value is TreacheryCard tc) result = Skin.Current.GetImageURL(tc);
        else if (value is ResourceCard rc) result = Skin.Current.GetImageURL(rc);
        else if (value is IHero h) result = Skin.Current.GetImageURL(h);
        else if (value is Leader l) result = Skin.Current.GetImageURL(l);
        else if (value is Location loc) result = Skin.Current.GetImageURL(loc);
        else if (value is LeaderSkill ls) result = Skin.Current.GetImageURL(ls);
        else if (value is TechToken tt) result = Skin.Current.GetImageURL(tt);
        else if (value is Faction f) result = Skin.Current.GetImageURL(f);
        else if (value is FactionForce ff) result = Skin.Current.GetImageURL(ff);
        else if (value is FactionSpecialForce fsf) result = Skin.Current.GetImageURL(fsf);
        else result = "";

        return result;
    }

    private static string GetHoverHTML(object value)
    {
        string result;

        if (value == null) result = "";
        else if (value is TreacheryCard tc) result = Popup.Get(tc);
        else if (value is ResourceCard rc) result = Popup.Get(rc);
        else if (value is Location loc) result = Popup.Get(loc);
        else if (value is IHero h) result = Popup.Get(h);
        else if (value is LeaderSkill ls) result = Popup.Get(ls);
        else if (value is TechToken tt) result = Popup.Get(tt);
        else result = Popup.Get(Skin.Current.Describe(value));

        return result;
    }
}
