<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@{
    var popover = Popover;

    if (popover != null && popover.Length > 0)
    {
        <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => Click()" @onmouseover="e => MouseOver()" @onmouseout="e => MouseOut()" @ref=@element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@popover/>
    }
    else if (Shown != null)
    {
        <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => Click()" @onmouseover="e => MouseOver()" @onmouseout="e => MouseOut()" title=@Skin.Current.Describe(Shown)/>
    }
    else
    {
        <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => Click()" @onmouseover="e => MouseOver()" @onmouseout="e => MouseOut()"/>
    }
}

@code {

    private object _shown;

    [Parameter]
    public object Shown { 

        get
        {
            return _shown;
        }

        set
        {
            if (value != _shown)
            {
                _popoverNeedsRefresh = (Popover != null);
                _shown = value;
            }
        }
    }

    private string _src;

    [Parameter]
    public string Src { 

        get
        {
            if (_src != null) {

                return _src;
            }
            else if (Shown != null) {

                return GetImageURL(Shown);
            }
            else {

                return "";
            }
        } 

        set
        {
            _src = value;
        }
    }

    [Parameter]
    public float Width { get; set; } = 0;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Filter { get; set; } = "";

    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public string Popover { 

        get
        {
            if (_popover != null) {

                return _popover;
            }
            else if (ShowPopover && Shown != null) {

                return GetHoverHTML(Shown);
            }
            else {

                return null;
            }
        } 

        set
        {
            if (value != _popover)
            {
                _popoverNeedsRefresh = (Popover != null);

                _popover = value;
            }
        }
    }

    [Parameter]
    public bool ShowPopover { get; set; } = true;

    [Parameter]
    public EventCallback OnClick { get; set; }

    private async Task Click() => await OnClick.InvokeAsync();

    [Parameter]
    public EventCallback OnMouseOver { get; set; }

    private async Task MouseOver() => await OnMouseOver.InvokeAsync();

    [Parameter]
    public EventCallback OnMouseOut { get; set; }

    private async Task MouseOut() => await OnMouseOut.InvokeAsync();

    private ElementReference element;
    private string ImgWidth;

    protected override void OnParametersSet()
    {
        ImgWidth = Width > 0 ? Support.Round(Width) : "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    public void Dispose()
    {
        if (Popover != null)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private string Shadow => "filter: drop-shadow(1px 1px 1px black);";

    private string GetImageURL(object value)
    {
        return (value) switch
        {
            null => "",
            TreacheryCard tc => Skin.Current.GetImageURL(tc),
            ResourceCard rc => Skin.Current.GetImageURL(rc),
            IHero h => Skin.Current.GetImageURL(h),
            Location loc => Skin.Current.GetImageURL(loc),
            LeaderSkill ls => Skin.Current.GetImageURL(ls),
            TechToken tt => Skin.Current.GetImageURL(tt),
            Faction f => Skin.Current.GetImageURL(f),
            FactionForce ff => Skin.Current.GetImageURL(ff),
            FactionSpecialForce fsf => Skin.Current.GetImageURL(fsf),
            _ => ""
        };
    }

    private static string GetHoverHTML(object value)
    {
        return (value) switch {

            null => "",
            TreacheryCard tc => Popup.Get(tc),
            ResourceCard rc => Popup.Get(rc),
            Location loc => Popup.Get(loc),
            IHero h => Popup.Get(h),
            LeaderSkill ls => Popup.Get(ls),
            TechToken tt => Popup.Get(tt),
            _ => Popup.Get(Skin.Current.Describe(value))
        };
    }
}
