<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@if (!PopoverAsTooltip && Popover != null)
{
    if (OnClick.HasDelegate || OnMouseOver.HasDelegate || OnMouseOut.HasDelegate)
    {
        <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" @ref=@element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
    else
    {
        <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @ref=@element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
}
else if (Popover != null)
{
    <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" title=@Popover />
}
else
{
    <img class=@Class style="@Shadow; @Style; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" />
}

@code {

    [Parameter]
    public object Shown { get; set; }
    private object _shown;

    [Parameter]
    public string Src { get; set; }
    private string _src;

    [Parameter]
    public string Popover { get; set; }
    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; } = false;

    [Parameter]
    public float Width { get; set; } = 0;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Filter { get; set; } = "";

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback OnMouseOver { get; set; }

    [Parameter]
    public EventCallback OnMouseOut { get; set; }

    [Parameter]
    public Game Game { get; set; }

    private ElementReference element;
    private string ImgWidth;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ImgWidth = Width > 0 ? Support.Round(Width) : "";

        if (_shown != Shown)
        {
            _shown = Shown;

            if (Shown != null)
            {
                Src = GetShownImageURL();
                PopoverAsTooltip = !ShownHasRichPopover;
                Popover = GetShownPopover();
            }
            else
            {
                Src = "";
                Popover = "";
            }
        }

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsRefresh = !PopoverAsTooltip;
        }

        if (_src != Src)
        {
            _src = Src;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null && !PopoverAsTooltip)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private string Shadow => "filter: drop-shadow(1px 1px 1px black);";

    private string GetShownImageURL()
    {
        return (Shown) switch
        {
            null => "",
            TreacheryCard tc => Skin.Current.GetImageURL(tc),
            ResourceCard rc => Skin.Current.GetImageURL(rc),
            IHero h => Skin.Current.GetImageURL(h),
            LeaderSkill ls => Skin.Current.GetImageURL(ls),
            TechToken tt => Skin.Current.GetImageURL(tt),
            Faction f => Skin.Current.GetImageURL(f),
            Ambassador a => Skin.Current.GetImageURL(a),
            FactionForce ff => Skin.Current.GetImageURL(ff),
            FactionSpecialForce fsf => Skin.Current.GetImageURL(fsf),
            StrongholdAdvantage adv => Skin.Current.GetImageURL(adv),
            _ => ""
        };
    }

    private string GetShownPopover()
    {
        return (Shown) switch
        {
            null => "",
            TreacheryCard tc => Popup.Get(tc),
            ResourceCard rc => Popup.Get(rc),
            IHero h => Game != null ? Popup.Get(h, Game) : Popup.Get(h),
            LeaderSkill ls => Popup.Get(ls),
            TechToken tt => Popup.Get(tt),
            StrongholdAdvantage loc => Popup.Get(loc),

            TerrorType terr => Skin.Current.GetTerrorTypeDescription(terr),
            _ => Skin.Current.Describe(Shown)
        };
    }

    private bool ShownHasRichPopover => Shown is TreacheryCard || Shown is ResourceCard || Shown is IHero || Shown is LeaderSkill || Shown is TechToken || Shown is StrongholdAdvantage;

}
