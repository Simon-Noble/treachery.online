<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;

<table class="table table-borderless table-sm m-0 w-auto">
    <tbody>

        @foreach (var l in Locations)
        {
            <tr class="small bg-transparent">

                @if (AlwaysShowLocation || Locations.Count() > 1)
                {
                    <td class="ps-0">@Skin.Current.Describe(l)</td>
                }

                @if (Max(l) > 0)
                {
                    @if (MaySelectFromStorm || l.Sector != Game.SectorInStorm)
                    {
                        <td class="ps-0"><SelectForcesComponent Value="@ForceAmount(l, false)" OnDown="(e => ChangeForceAmount(l, -1, false))" OnUp="(e => ChangeForceAmount(l, 1, false))" Min="Min" Max="Max(l)" Faction="Player.Faction" Special="false"/></td>
                    }
                    else
                    {
                        <td class="font-italic text-danger ps-0">cannot move from storm</td>
                    }
                }
                else
                {
                    SetForceAmount(l, 0, false);
                }

                @if (MaxSpecial(l) > 0)
                {
                    if (MaySelectFromStorm || l.Sector != Game.SectorInStorm)
                    {
                        <td class="ps-0"><SelectForcesComponent Value="@ForceAmount(l, true)" OnDown="(e => ChangeForceAmount(l, -1, true))" OnUp="(e => ChangeForceAmount(l, 1, true))" Min="Min" Max="MaxSpecial(l)" Faction="Player.Faction" Special="true" /></td>
                    }
                    else
                    {
                        <td class="font-italic text-danger ps-0">cannot move from storm</td>
                    }
                }
                else
                {
                    SetForceAmount(l, 0, true);
                }

            </tr>
        }

    </tbody>
</table>

@code {

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Player Player { get; set; }

    private Dictionary<Location, Battalion> _forces = new();

    [Parameter]
    public Dictionary<Location, Battalion> Forces {

        get => _forces;

        set
        {
            _forces = value;
            RemoveIllegalForceLocations();
        }
    }

    private IEnumerable<Location> _locations = new List<Location>();

    [Parameter]
    public IEnumerable<Location> Locations
    {

        get => _locations;

        set
        {
            _locations = value;
            RemoveIllegalForceLocations();
        }
    }

    [Parameter]
    public bool MaySelectFromStorm { get; set; } = false;

    [Parameter]
    public bool AlwaysShowLocation { get; set; } = false;

    [Parameter]
    public bool FullLocationName { get; set; } = false;

    [Parameter]
    public int FixedMaxForces { get; set; } = -1;

    [Parameter]
    public int FixedMaxSpecialForces { get; set; } = -1;

    [Parameter]
    public Action OnChanged { get; set; }

    [Parameter]
    public bool AllowMultipleTerritories { get; set; } = false;

    [Parameter]
    public bool InitializeToMaximum { get; set; } = false;

    protected override void OnParametersSet()
    {
        RemoveForcesFromOtherTerritororiesThanAvailableLocations();

        if (InitializeToMaximum)
        {
            if (Forces.Count == 0) {

                foreach (var l in Locations)
                {
                    var toAdd = new Battalion() { AmountOfForces = Max(l), AmountOfSpecialForces = MaxSpecial(l) };
                    if (toAdd.TotalAmountOfForces > 0)
                    {
                        Forces.Add(l, toAdd);
                    }
                }

                OnChanged?.Invoke();
            }
        }
    }

    private int Min => 0;
    private int Max(Location l) => FixedMaxForces > 0 ? FixedMaxForces : Player.ForcesIn(l);
    private int MaxSpecial(Location l) => FixedMaxSpecialForces > 0 ? FixedMaxSpecialForces : Player.SpecialForcesIn(l);

    private int ForceAmount(Location l, bool special)
    {
        if (Forces.ContainsKey(l))
        {
            if (special)
            {
                return Forces[l].AmountOfSpecialForces;
            }
            else
            {
                return Forces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    private void RemoveIllegalForceLocations()
    {
        foreach (var bat in Forces.Where(kvp => !Locations.Contains(kvp.Key)).Select(kvp => kvp.Value))
        {
            bat.Clear();
        }
    }

    private void RemoveForcesFromOtherTerritororiesThanAvailableLocations()
    {
        if (!AllowMultipleTerritories)
        {
            var locationWithForces = Forces.Where(kvp => kvp.Value.TotalAmountOfForces > 0).Select(kvp => kvp.Key).FirstOrDefault();
            if (locationWithForces != null)
            {
                RemoveForcesFromOtherTerritoriesThan(locationWithForces.Territory);
            }
        }
    }

    private void RemoveForcesFromOtherTerritoriesThan(Territory toCheck)
    {
        foreach (var bat in Forces.Where(kvp => kvp.Key.Territory != toCheck && kvp.Value.TotalAmountOfForces != 0).Select(kvp => kvp.Value).ToArray()) {

            bat.Clear();
        }
    }

    private void ChangeForceAmount(Location location, int amount, bool specialForces)
    {
        if (!AllowMultipleTerritories)
        {
            RemoveForcesFromOtherTerritoriesThan(location.Territory);
        }

        if (Forces.ContainsKey(location))
        {
            if (specialForces)
            {
                Forces[location].ChangeSpecialForces(amount);
            }
            else
            {
                Forces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                Forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                Forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        OnChanged?.Invoke();
    }

    private void SetForceAmount(Location location, int amount, bool specialForces)
    {
        if (Forces.ContainsKey(location))
        {
            if (specialForces && Forces[location].AmountOfSpecialForces != amount)
            {
                Forces[location].AmountOfSpecialForces = amount;
                OnChanged?.Invoke();
            }
            else if (!specialForces && Forces[location].AmountOfForces != amount)
            {
                Forces[location].AmountOfForces = amount;
                OnChanged?.Invoke();
            }
        }
        else
        {
            if (specialForces)
            {
                Forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                Forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }

            OnChanged?.Invoke();
        }
    }
}
