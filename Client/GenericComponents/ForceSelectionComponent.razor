<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;

<table class="table table-borderless table-sm m-0 w-auto">
    <tbody>

        @foreach (var l in Locations)
        {
            <tr class="small bg-transparent">

                @if (AlwaysShowLocation || Locations.Count() > 1)
                {
                    <td class="ps-0">@Skin.Current.Describe(l)</td>
                }

                @if (Max(l) > 0) 
                {
                    if (MaySelectFromStorm || l.Sector != Game.SectorInStorm)
                    {
                        <td class="ps-0"><SelectForcesComponent Value=@Forces[l].AmountOfForces OnDown="(e => ChangeForceAmount(l, -1, false))" OnUp="(e => ChangeForceAmount(l, 1, false))" Min="Min" Max="Max(l)" Faction="Player.Faction" Special="false"/></td>
                    }
                    else
                    {
                        <td class="font-italic text-danger ps-0">cannot move from storm</td>
                    }
                }
                @if (MaxSpecial(l) > 0) 
                {
                    if (MaySelectFromStorm || l.Sector != Game.SectorInStorm)
                    {
                        <td class="ps-0"><SelectForcesComponent Value=@Forces[l].AmountOfSpecialForces OnDown="(e => ChangeForceAmount(l, -1, true))" OnUp="(e => ChangeForceAmount(l, 1, true))" Min="Min" Max="MaxSpecial(l)" Faction="Player.Faction" Special="true" /></td>
                    }
                    else
                    {
                        <td class="font-italic text-danger ps-0">cannot move from storm</td>
                    }
                }

            </tr>
        }

    </tbody>
</table>

@code {

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public Dictionary<Location, Battalion> Forces { get; set; }

    [Parameter]
    public IEnumerable<Location> Locations { get; set; }

    [Parameter]
    public bool MaySelectFromStorm { get; set; } = false;

    [Parameter]
    public bool AlwaysShowLocation { get; set; } = false;

    [Parameter]
    public bool FullLocationName { get; set; } = false;

    [Parameter]
    public int FixedMaxForces { get; set; } = -1;

    [Parameter]
    public int FixedMaxSpecialForces { get; set; } = -1;

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [Parameter]
    public bool AllowMultipleTerritories { get; set; } = false;

    [Parameter]
    public bool InitializeToMaximum { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        bool changed = false;

        foreach (var l in Forces.Keys.Where(l => !Locations.Contains(l)).ToArray())
        {
            Forces.Remove(l);
            changed = true;
        }

        foreach (var l in Locations.Where(l => !Forces.ContainsKey(l)).ToArray())
        {
            var toAdd = new Battalion(Player.Faction, InitializeToMaximum ? Max(l) : 0, InitializeToMaximum ? MaxSpecial(l) : 0, l);
            Forces.Add(l, toAdd);
            changed = true;
        }

        if (changed)
        {
            await OnChanged.InvokeAsync();
        }
    }

    private int Min => 0;
    private int Max(Location l) => FixedMaxForces > 0 ? FixedMaxForces : Player.ForcesIn(l);
    private int MaxSpecial(Location l) => FixedMaxSpecialForces > 0 ? FixedMaxSpecialForces : Player.SpecialForcesIn(l);

    private async Task ChangeForceAmount(Location location, int amount, bool specialForces)
    {
        if (!AllowMultipleTerritories)
        {
            RemoveForcesFromOtherTerritoriesThan(location.Territory);
        }

        if (Forces.TryGetValue(location, out var battalion))
        {
            if (specialForces)
            {
                battalion.ChangeSpecialForces(amount);
            }
            else
            {
                battalion.ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                Forces.Add(location, new Battalion(Player.Faction, 0, amount, location));
            }
            else
            {
                Forces.Add(location, new Battalion(Player.Faction, amount, 0, location));
            }
        }

        await OnChanged.InvokeAsync();
    }

    private void RemoveForcesFromOtherTerritoriesThan(Territory toCheck)
    {
        foreach (var bat in Forces.Where(kvp => kvp.Key.Territory != toCheck && kvp.Value.TotalAmountOfForces != 0).Select(kvp => kvp.Value).ToArray())
        {
            bat.Clear();
        }
    }

}
