<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@inherits GameComponent
@typeparam GameEventType
 
@code {

    protected virtual Faction IsFactionSpecific { get; set; } = Faction.None;

    protected virtual bool IsUrgent { get; set; } = false;

    [Parameter]
    public string BackgroundImage
    {
        get
        {
            return Background;
        }
        set
        {
            Background = value;
        }
    }

    protected virtual string Background { get; set; } = "";

    protected string Border => IsUrgent ? "border-white" : "";

    protected string validationError = "";

    protected async Task Confirm()
    {
        await Request(ConfirmedResult);
    }

    protected async Task Pass()
    {
        await Request(PassedResult);
    }

    protected async Task Other()
    {
        await Request(OtherResult);
    }

    //TODO Remove
    protected bool Valid
    {
        get
        {
            try
            {
                validationError = Validation;
                return validationError == "";
            }
            catch (Exception e)
            {
                validationError = string.Format("Error: {0}", e.Message);
            }

            return false;
        }
    }

    protected string Validation
    {
        get
        {
            try
            {
                return ConfirmedResult.Validate();
            }
            catch (Exception)
            {
                return "Validation failed.";
            }
        }
    }

    protected virtual GameEventType ConfirmedResult
    {
        get
        {
            throw new NotImplementedException();
        }
    }

    protected virtual GameEventType PassedResult
    {
        get
        {
            throw new NotImplementedException();
        }
    }

    protected virtual GameEventType OtherResult
    {
        get
        {
            throw new NotImplementedException();
        }
    }

    protected List<string> ValidValues<T>(IEnumerable<T> values)
    {
        return values.Select(o => o.ToString()).ToList();
    }

    protected void SetIfValid<DisplayType, OriginalType>(ref DisplayType field, IEnumerable<OriginalType> validValues, OriginalType newValue)
    {
        if ((object)field != (object)newValue && validValues.Contains(newValue))
        {
            bool sameType = (typeof(OriginalType) == typeof(DisplayType));
            bool useId = (typeof(DisplayType) == typeof(int)) && typeof(IIdentifiable).IsAssignableFrom(typeof(OriginalType));

            if (sameType)
            {
                field = (DisplayType)(object)newValue;
            }
            else if (useId)
            {
                field = (DisplayType)((object)((IIdentifiable)newValue).Id);
            }
            else
            {
                field = (DisplayType)(object)(newValue.ToString());
            }

            StateHasChanged();
        }
    }

    protected string BackgroundStyle
    {
        get
        {
            if (Background == "")
            {
                if (IsFactionSpecific == Faction.None)
                {
                    return "";
                }
                else
                {
                    return string.Format("background-color: {0};", Skin.Current.GetFactionColorTransparant(IsFactionSpecific, "48"));
                }
            }
            else
            {
                return string.Format("border-style: none; background-color: rgba(0,0,0,0); background-image: url('{0}'); background-size: cover; background-repeat: no-repeat;", BackgroundImage);
            }
        }
    }

    protected string HeaderStyle => Background != "" ? "background-color:rgba(0,0,0,0.9);" : "";

    protected string BodyStyle => Background != "" ? "background-color:rgba(0,0,0,0.7);" : "";
}
