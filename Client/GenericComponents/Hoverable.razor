<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@implements IDisposable;

@if (Popover != null && Popover.Length > 0)
{
    <div @ref=@element class=@Class style=@Style data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content="@Popover">
        @ChildContent
    </div>
}
else
{
    <div @ref=@element class=@Class style=@Style>
        @ChildContent
    </div>
}

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Style { get; set; }

    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public string Popover { 

        get
        {
            return _popover;
        } 

        set
        {
            if (value != _popover)
            {
                _popover = value;
                _popoverNeedsRefresh = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    private ElementReference element;

    public void Dispose()
    {
        if (Popover != null)
        {
            _ = Browser.RemovePopover(element);
        }
    }
}
