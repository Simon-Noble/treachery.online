<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;

@inject IJSRuntime JSRuntime
@implements IDisposable;

<div @ref="panelParent" style="@Style">
    @ChildContent
</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; } = "JsPanel";

    [Parameter]
    public string Autoclose { get; set; } = "";

    [Parameter]
    public JsPanelTheme Theme { get; set; } = null;

    [Parameter]
    public string Style { get; set; } = Skin.Current.JSPANEL_DEFAULTSTYLE;

    [Parameter]
    public int Width { get; set; } = 320;

    [Parameter]
    public int Height { get; set; } = 200;

    [Parameter]
    public float Opacity { get; set; } = 1f;

    [Parameter]
    public int ShadowHeight { get; set; } = 3;

    [Parameter]
    public bool ShowMaximize { get; set; } = true;

    [Parameter]
    public bool ShowSmallify { get; set; } = true;

    [Parameter]
    public bool ShowMinimize { get; set; } = true;

    [Parameter]
    public bool ShowClose { get; set; } = true;

    [Parameter]
    public bool Resizable { get; set; } = true;

    [Parameter]
    public SizeIndicator HeaderSize { get; set; } = SizeIndicator.XS;

    [Parameter]
    public bool HeaderShown { get; set; } = true;

    [Parameter]
    public PanelPosition Position { get; set; } = PanelPosition.Center;

    [Parameter]
    public int PositionX { get; set; } = 0;

    [Parameter]
    public int PositionY { get; set; } = 0;

    [Parameter]
    public string AnimateIn { get; set; } = "jsPanelFadeIn";

    [Parameter]
    public string AnimateOut { get; set; } = "jsPanelFadeOut";

    [Parameter]
    public string ContentOverflow { get; set; } = "auto";

    private bool _visible = true;

    [Parameter]
    public bool Visible
    {
        get
        {
            return _visible;
        }
        set
        {
            _visible = value;
            if (!Visible)
            {
                //Task.Run(async () => await Hide()).Wait();
            }
        }
    }

    private ElementReference panelParent;
    private string panelID = null;

    public void Dispose()
    {
        Task.Run(async () => await Close());
    }

    private async Task Close()
    {
        await JSRuntime.InvokeVoidAsync("CloseJsPanel", panelID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hc = new HeaderControls
            {
                size = Translate(HeaderSize),
                maximize = Translate(ShowMaximize),
                minimize = Translate(ShowMinimize),
                smallify = Translate(ShowSmallify),
                close = Translate(ShowClose)
            };

            var resizeProp = new ResizeProperties
            {
                disable = !Resizable,
                aspectRatio = ""
            };

            string pos;
            if (Position == PanelPosition.Absolute)
            {
                pos = string.Format("left-top {0} {1}", PositionX, PositionY);
            }
            else
            {
                pos = Translate(Position);
            }

            var po = new PanelOptions
            {
                header = HeaderShown,
                headerControls = hc,
                resizeit = resizeProp,
                autoclose = Autoclose != "" ? new AutocloseSettings() { time = Autoclose, progressbar = false } : null,
                opacity = Opacity,
                position = pos,
                content = panelParent,
                contentSize = string.Format("{0} {1}", Width, Height),
                headerTitle = Title,
                theme = Theme != null ? (object)Theme : (object)"info fillcolor rgba(16,16,16)",
                minimized = false,
                animateIn = AnimateIn,
                animateOut = AnimateOut,
                contentOverflow = ContentOverflow,
                boxShadow = ShadowHeight
            };

            panelID = await JSRuntime.InvokeAsync<string>("CreateJsPanel", po);
        }
    }

    private string Translate(bool value)
    {
        return value ? "" : "remove";
    }

    private async Task Hide()
    {
        await JSRuntime.InvokeVoidAsync("HideJsPanel", panelID);
    }



    public class HeaderControls
    {
        public string maximize { get; set; }
        public string minimize { get; set; }
        public string smallify { get; set; }
        public string close { get; set; }
        public string size { get; set; }
    }

    public class ResizeProperties
    {
        public string aspectRatio { get; set; }
        public bool disable { get; set; }
    }

    public enum SizeIndicator
    {
        None = 0,
        XS = 10,
        S = 20,
        M = 30,
        L = 40,
        XL = 50
    }

    public string Translate(SizeIndicator s)
    {
        switch (s)
        {
            case SizeIndicator.XS: return "xs";
            case SizeIndicator.S: return "sm";
            case SizeIndicator.M: return "md";
            case SizeIndicator.L: return "lg";
            case SizeIndicator.XL: return "xl";
        }

        return "";
    }

    public class AutocloseSettings
    {
        public string time { get; set; }
        public bool progressbar { get; set; }
        public string background { get; set; }
    }

    public class PanelOptions
    {
        public HeaderControls headerControls { get; set; }
        public ResizeProperties resizeit { get; set; }
        public float opacity { get; set; }
        public object position { get; set; }
        public ElementReference content { get; set; }
        public string contentSize { get; set; }
        public string headerTitle { get; set; }
        public object theme { get; set; }
        public bool minimized { get; set; }
        public bool header { get; set; }
        public AutocloseSettings autoclose { get; set; }
        public string animateIn { get; set; }
        public string animateOut { get; set; }
        public string contentOverflow { get; set; }
        public int boxShadow { get; set; }
    }

    public class PositionSpec
    {
        public string my { get; set; }
        public string at { get; set; }
        public int offsetX { get; set; }
        public int offsetY { get; set; }
    }

    public enum PanelPosition
    {
        Absolute = 0,
        Center = 10,
        LeftTop = 20,
        CenterTop = 30,
        RightTop = 40,
        RightCenter = 50,
        RightBottom = 60,
        CenterBottom = 70,
        LeftBottom = 80,
        LeftCenter = 90
    }

    public string Translate(PanelPosition p)
    {
        switch (p)
        {
            case PanelPosition.Absolute: return "center";
            case PanelPosition.Center: return "center";
            case PanelPosition.LeftTop: return "left-top";
            case PanelPosition.CenterTop: return "center-top";
            case PanelPosition.RightTop: return "right-top";
            case PanelPosition.RightCenter: return "right-center";
            case PanelPosition.RightBottom: return "right-bottom";
            case PanelPosition.CenterBottom: return "center-bottom";
            case PanelPosition.LeftBottom: return "left-bottom";
            case PanelPosition.LeftCenter: return "left-center";
        }

        return "";
    }
}
