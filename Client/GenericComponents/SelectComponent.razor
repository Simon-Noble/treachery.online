<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections;
@using System.Collections.Generic;
@using System.Linq;
@using Treachery.Shared;
@inherits GameComponent;
@typeparam T

<div class="mt-1">

    @if (Label != null)
    {
        <label class="mb-0" for="@Id">
            @Label
            <ClickHintComponent Button="@ButtonHint" Modifier="@ModifierHint" />
        </label>
    }

    <select class="form-select" @bind="@ValueAsString" disabled="@Disabled">

        @if (AddEmptyValue)
        {
            <option value="">@EmptyLabel</option>
        }

        @Options

        @foreach (var valueAndLabel in Values.Zip(LabelsForValues, (v, l) => new { Value = v, Label = l }))
        {
            var valueAsString = GetValueAsString(valueAndLabel.Value);
            <option value="@valueAsString" selected=@(valueAsString == ValueAsString)>@valueAndLabel.Label</option>
        }

    </select>

</div>

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    //If ValueLabels are not supplied, they will be generated by using Skin.Describe() on the Values.
    [Parameter]
    public IEnumerable ValueLabels { get; set; } = null;

    [Parameter]
    public bool AddEmptyValue { get; set; } = false;

    [Parameter]
    public string EmptyLabel { get; set; } = "";

    [Parameter]
    public RenderFragment Options { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    private bool _isIdentifiable = false;

    protected override void OnInitialized()
    {
        bool _isIdentifiable = typeof(IIdentifiable).IsAssignableFrom(typeof(T));
    }

    private string _valueAsString;
    private string ValueAsString
    {
        get
        {
            return _valueAsString;
        }

        set
        {
            if (_valueAsString != value)
            {
                _valueAsString = value;
                if (_valueAsString == "")
                {
                    Value = default(T);
                }
                else
                {
                    var foundValue = Values.FirstOrDefault(v => GetValueAsString(v) == _valueAsString);

                    if (foundValue == null)
                    {
                        Value = default(T);
                    }
                    else
                    {
                        Value = foundValue;
                    }
                }
            }
        }
    }

    private T _value;

    [Parameter]
    public T Value
    {
        get
        {
            return _value;
        }
        set
        {
            if (_value == null && value != null || _value != null && !_value.Equals(value))
            {
                if (Values.Contains(value))
                {
                    _value = value;
                    ValueAsString = GetValueAsString(value);
                    ValueChanged.InvokeAsync(value);
                    OnChanged?.Invoke();
                }
            }
        }
    }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Action OnChanged { get; set; }

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public ClickHintButton ButtonHint { get; set; } = ClickHintButton.None;

    [Parameter]
    public ClickHintModifier ModifierHint { get; set; } = ClickHintModifier.None;

    [Parameter]
    public bool Required { get; set; } = true;

    protected override void OnParametersSet()
    {
        if (!Values.Contains(Value))
        {
            Value = Required ? Values.FirstOrDefault() : default;
        }
    }

    private bool Equal(T a, T b)
    {
        return a == null && b == null || a != null && a.Equals(b);
    }

    private IEnumerable<string> LabelsForValues
    {
        get
        {
            if (ValueLabels == null)
            {
                return Values.Select(v => v != null ? Skin.Current.Describe(v) : EmptyLabel);
            }
            else
            {
                return Enumerable.Cast<string>(ValueLabels);
            }
        }
    }

    private string GetValueAsString(T value)
    {
        if (value == null)
        {
            return "";
        }
        else if (_isIdentifiable)
        {
            return (value as IIdentifiable).Id.ToString();
        }
        else
        {
            return value.ToString();
        }
    }
}
