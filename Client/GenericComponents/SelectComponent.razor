<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using System.Collections;
@using System.Collections.Generic;
@using System.Linq;
@using Treachery.Shared;
@inherits GameComponent;
@typeparam T

<div class="mt-1">

    @if (Label != null)
    {
        <label class="mb-0" for="@Id">
            @Label
            <ClickHintComponent Button="@ButtonHint" Modifier="@ModifierHint" />
        </label>
    }

    <select class="form-select" style="cursor:pointer" @onchange=@(e => ChangeValue(e)) disabled="@Disabled" >

        @if (AddEmptyValue)
        {
            <option value="">@EmptyLabel</option>
        }

        @Options

        @foreach (var item in _shown.Values) {

            <option value=@item.Id selected=@Equals(item.Value, Value)>@item.Label</option>
        }

    </select>

</div>

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    [Parameter]
    public T Value { get; set; }

    private Dictionary<string,ValuesToShow> _shown { get; set; }

    [Parameter]
    public IEnumerable<string> ValueLabels { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<T> OnChanged { get; set; }

    [Parameter]
    public bool AddEmptyValue { get; set; } = false;

    [Parameter]
    public string EmptyLabel { get; set; } = "";

    [Parameter]
    public RenderFragment Options { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public ClickHintButton ButtonHint { get; set; } = ClickHintButton.None;

    [Parameter]
    public ClickHintModifier ModifierHint { get; set; } = ClickHintModifier.None;

    [Parameter]
    public bool Required { get; set; } = true;

    private bool _isIdentifiable = false;

    protected override void OnInitialized() {
        bool _isIdentifiable = typeof(IIdentifiable).IsAssignableFrom(typeof(T));
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!Values.Contains(Value))
        {
            //_value = Value;
            //ValueAsString = GetValueAsString(_value);
            await SetValue(Required ? Values.FirstOrDefault() : default);
        }

        if (ValueLabels == null || ValueLabels.Count() != Values.Count())
        {
            ValueLabels = Values.Select(v => v != null ? Skin.Current.Describe(v) : EmptyLabel);
        }

        _shown = Values.Zip(ValueLabels, (v, l) => new ValuesToShow { Value = v, Id = GetId(v), Label = l }).ToDictionary(triple => triple.Id, triple => triple);
    }

    private string GetId(T value)
    {
        if (value == null)
        {
            return "";
        }
        else if (_isIdentifiable)
        {
            return (value as IIdentifiable).Id.ToString();
        }
        else
        {
            return Skin.Current.Describe(value);
        }
    }

    private async Task ChangeValue(ChangeEventArgs e)
    {
        await SetValue(_shown[e.Value as string].Value);
    }

    private async Task SetValue(T newValue) {

        if (!Equals(Value, newValue))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
            await OnChanged.InvokeAsync(newValue);
        }
    }

    private struct ValuesToShow {

        internal T Value;
        internal string Id;
        internal string Label;
    }
}
