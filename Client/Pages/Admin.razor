@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@page "/admin/"
@using System.Globalization
@using Treachery.Client.OtherComponents
@implements IDisposable

@if (!Client.IsConnected)
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="d-flex justify-content-center">
            Not Connected
        </div>
    </div>
}
else if (!Client.LoggedIn)
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="col-sm-12 col-lg-3"></div>
        <div class="col-sm-12 col-lg-6">
            <div class="d-flex justify-content-center">
                <LoginComponent  />
            </div>
        </div>
        <div class="col-sm-12 col-lg-3"></div>
    </div>
}
else 
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="d-flex justify-content-center">
            
            <div class="card mb-2" style="animation:fadeIn 1s;">
                <div class="card">
                    <div class="card-header">Server info</div>
                    <div class="card-body">
                        <h3>Info</h3>
                        <p><strong>Total Users: </strong>@ServerInfo.TotalUsers</p>
                        <p><strong>Users by User Token: </strong>@ServerInfo.UsersByUserTokenCount</p>
                        <p><strong>Game Tokens by GameId: </strong>@ServerInfo.GameTokensByGameIdCount</p>
                        <p><strong>Games by Game Token: </strong>@ServerInfo.GamesByGameTokenCount</p>
                        <p><strong>ConnectionInfo by UserId: </strong>@ServerInfo.ConnectionInfoByUserIdCount</p>
                        <h3>Maintenance window</h3>
                        <input type="text" class="form-control" @bind="@MaintenanceDate" @bind:event="oninput"/>
                        <button class="btn btn-primary me-1" @onclick="@UpdateMaintenance" disabled="@(!MaintenanceDateIsValid)">Ok</button>
                        <h3>Persist data</h3>
                        <button class="btn btn-primary me-1" @onclick="@PersistState">Persist data</button>
                        <h3>Restore persisted data</h3>
                        <button class="btn btn-primary me-1" @onclick="@RestoreState">Restore data</button>
                    </div>
                </div>
            </div>

            <div class="card mb-2" style="animation:fadeIn 1s;">
                <div class="card">
                    <div class="card-header">Running games</div>
                    <div class="card-body">
                        <table class="table table-sm">
                            <tbody>
                            @foreach (var av in Client.RunningGames.OrderByDescending(av => av.LastAction))
                            {
                                var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                                <tr class="small table-dark">
                                    <td class="w-25" style="@fontColorStyle">
                                        @av.GameName
                                    </td>
                                    <td class="w-25">
                                        <button class="btn btn-primary  me-1" @onclick="@(_ => Close(av))">Close</button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card mb-2" style="animation:fadeIn 1s;">
                <div class="card">
                    <div class="card-header">Log</div>
                    <div class="card-body">
                        @foreach (var m in Messages)
                        {
                            <div>@m</div>
                        } 
                    </div>
                </div>
            </div>
            
        </div>
    </div>
}

@code {

    private string MaintenanceDate { get; set; }
    private ServerInfo ServerInfo { get; set; }
    private List<string> Messages { get; } = [];

    protected override async Task OnInitializedAsync()
    {
        Client.RefreshHandler += StateHasChanged;
        await Client.Start();
        ServerInfo = Client.ServerInfo;
        MaintenanceDate = ServerInfo.ScheduledMaintenance.ToString(CultureInfo.CurrentUICulture);
    }

    public void Dispose()
    {
        Client.RefreshHandler += StateHasChanged;
    }
    
    private const string StartScreenStyle = "min-height: 97vh; background-image: url('art/planet.png'); background-size: 1024px; background-position-x: center; background-position-y: -50px; background-repeat: no-repeat;";

    private async Task UpdateMaintenance()
    {
        DateTimeOffset.TryParse(MaintenanceDate, CultureInfo.CurrentUICulture, DateTimeStyles.AssumeUniversal, out var date);
        Messages.Add(await Client.AdminUpdateMaintenance(date));
        StateHasChanged();
    }
    
    private async Task PersistState()
    {
        Messages.Add(await Client.AdminPersistState());
        StateHasChanged();
    }
    
    private async Task RestoreState()
    {
        Messages.Add(await Client.AdminRestoreState());
        StateHasChanged();
    }

    private async Task Close(GameInfo av)
    {
        Messages.Add(await Client.AdminCloseGame(av.GameId));
        StateHasChanged();
    }

    private bool MaintenanceDateIsValid => DateTimeOffset.TryParse(MaintenanceDate, CultureInfo.CurrentUICulture, DateTimeStyles.AssumeUniversal, out _);
}
