<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@page "/"
@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@using Treachery.Client.OtherComponents;
@using Treachery.Client.MapComponents;
@using Microsoft.Extensions.Logging;

@inject NavigationManager NavigationManager
@inject ILogger<Index> logger
@inject IJSRuntime JSRuntime

<div class="row">

    <!--Empty Column-->
    @if (h.IsObserver)
    {
        <div class="col-sm-1 col-lg-1 col-xl-1 overflow-hidden" />
    }

    <!--Map Column-->
    <div id="mapdiv" class="col-sm-12 col-lg-6 overflow-hidden">
        @if (h.HostProxy != null)
        {
            <PlanetMap h="h" OnLocationClick="@h.LocationClick"/>
        }
        else
        {
            <div class="text-center">
                <img src="@Skin.Current.Planet_URL" class="img-fluid" />
                <p class="text-light" style="font: @Skin.Current.GAMEVERSION_FONT">Version @Game.LatestVersion</p>
            </div>
        }
    </div>

    <!--Action Column-->
    @if (!h.IsObserver)
    {
        <div class="col-sm-12 col-lg-4 vh-100 overflow-auto">

            <MenuComponent h="@h" />

            @if (!h.IsConnected)
            {
                <div>Disconnected...</div>
            }
            else if (h.PlayerName == "")
            {
                <PlayerNameComponent h="@h" />
            }
            else if (h.HostProxy == null && h.Host == null)
            {
                <HostOrJoinGameComponent h="@h" />
            }
            else
            {
                <GameStatusComponent h="@h" CanEndPhase="h.Actions.Contains(typeof(EndPhase))" />

                @if (h.CurrentPhase == Phase.GameEnded)
                {
                    <WinnerPanel h="h" />
                }

                <ActionPanel h="@h" />
            }

        </div>
    }

    <!--Information Column-->
    <div class="@InformationLayout">

        @if (h.IsObserver)
        {
            <MenuComponent h="@h" />
        }

        @if (!h.IsObserver && h.Player.Faction != Faction.None)
        {
            <PlayerPanel h="h" ShownPlayer="h.Player" />
        }
        else if (h.IsObserver)
        {
            <GameStatusComponent h="@h" />

            @if (h.CurrentPhase == Phase.GameEnded)
            {
                <WinnerPanel h="h" />
            }

            @if (h.Game.CurrentMainPhase == MainPhase.Bidding)
            {
                <BiddingPanel h="h" />
            }
        }

        @if (h.Game.CurrentReport != null)
        {
            <ReportComponent h="@h" Report="h.Game.CurrentReport" Title="@h.Game.CurrentReport.Title" Background="@Skin.Current.GetReportBackground(h.Game.CurrentReport)" />
        }

        @if (!h.IsObserver && h.Player.Faction == Faction.None && h.CurrentPhase > Phase.TradingFactions)
        {
            foreach (Player p in h.Game.Players)
            {
                <PlayerPanel h="h" ShownPlayer="p" ShowHeader="true" />
            }
        }

    </div>

    <!--Global Components-->

    @if ((!h.IsObserver || h.PlayerName == "$RonaldAdmin$") && h.CurrentPhase > Phase.AwaitingPlayers)
    {
        <ChatComponent h="@h" />
    }

    @if (h.Timer != null)
    {
        <TimerComponent h="@h" />
    }

    @if (h.CurrentPhase == Phase.GameEnded || h.CurrentPhase == Phase.BattleConclusion)
    {
        <WinnerFlashComponent h="@h" />
    }

    <ImageFlashComponent h="@h" />

    <!--Empty Column-->
    @if (h.IsObserver)
    {
        <div class="col-sm-1 col-lg-1 col-xl-1 overflow-hidden" />
    }

</div>

@code {

    private Handler h;

    protected override async Task OnInitializedAsync()
    {
        Browser.Initialize(JSRuntime);
        h = new Handler(NavigationManager.ToAbsoluteUri("/gameHub"), logger);
        h.RefreshHandler += Refresh;
        await h.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSkinDataIfSaved();
        }

        await Browser.SetPlanetMapScale();
        await Browser.EnablePopovers();
    }

    private async Task LoadSkinDataIfSaved()
    {
        var existingSkinData = await Browser.LoadStringSetting("treachery.online;setting.skin");
        if (existingSkinData != null && existingSkinData.Length > 0)
        {
            var existingSkin = Support.LoadSkin(existingSkinData);
            var issues = await existingSkin.ValidateAndFix(Browser.UrlExists);
            Skin.Current = existingSkin;
        }
    }

    public void Refresh()
    {
        Support.LogDuration("RefreshAll-Start");
        StateHasChanged();
        Support.LogDuration("RefreshAll-End");
    }

    private string InformationLayout => h.IsObserver ? "col-sm-12 col-lg-4 cursor-hand vh-100 overflow-auto" : "col-sm-12 col-lg-2 cursor-hand vh-100 overflow-auto";
}
