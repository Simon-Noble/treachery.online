@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@page "/"
@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@using Treachery.Client.OtherComponents;
@using Treachery.Client.MapComponents;
@using Microsoft.Extensions.Logging;

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (h.InScheduledMaintenance)
{
    <div class="alert alert-danger text-center p-0" role="alert">
        treachery.online will be down for maintenance from @h.ServerSettings.ScheduledMaintenance.ToLocalTime() until @h.ServerSettings.ScheduledMaintenance.AddMinutes(15).ToLocalTime() (your local time)
    </div>
}

@if (!GameStarted)
{
    <div class="row d-flex align-items-center" style="min-height: 97vh; background-image: url('../art/planet.png'); background-size: 1024px; background-position-x: center; background-position-y: -50px; background-repeat: no-repeat;">

        @if (h.IsConnected)
        {
            var centerSize = h.PlayerName != "" && h.HostProxy == null && h.Host == null ? 6 : 4;
            var fillerSize = 0.5f * (12 - centerSize);

            <div class="col-sm-12 col-lg-@fillerSize"></div>
            <div class="col-sm-12 col-lg-@centerSize">

                @if (h.PlayerName == "")
                {
                    <div class="d-flex justify-content-center">
                        <PlayerNameComponent Client="@h" />
                    </div>
                }
                else if (h.HostProxy == null && h.Host == null)
                {
                    <HostOrJoinGameComponent Client="@h" />
                }
                else
                {
                    <ActionPanel Client="@h" />
                }

            </div>
            <div class="col-sm-12 col-lg-@fillerSize"></div>
        }

    </div>

}
else
{
    <div @ref=@element class="row">

        <!--Map Column-->
        <div id="mapdiv" class="@MapGrid">
            <Board h="h" OnLocationClick="@h.LocationClick" />
        </div>

        <!--Action Column-->
        @if (!h.IsObserver)
        {
            <div class="@ActionGrid @Scrollbars">

                <GameStatusComponent Client="@h" CanEndPhase="h.Actions.Contains(typeof(EndPhase))" />

                @if (h.CurrentPhase == Phase.GameEnded)
                {
                    <WinnerPanel Client="h" />
                }

                <ActionPanel Client="@h" />

            </div>
        }

        <!--Information Column-->
        <div class="col-sm-12 col-lg-3 cursor-hand @Scrollbars">

            @if (!h.IsObserver)
            {
                <MenuComponent Client="@h" />

                if (h.Player.Faction != Faction.None)
                {
                    <PlayerPanel Client="h" ShownPlayer="h.Player" />
                }
                else if (h.PlayerName != "")
                {
                    <ChatComponent Client="@h" BackgroundColor="#e8dba6dd" />
                }
            }
            else if (h.IsObserver)
            {
                <GameStatusComponent Client="@h" />

                @if (h.CurrentPhase == Phase.GameEnded)
                {
                    <WinnerPanel Client="h" />
                }

                @if (h.Game.CurrentPhase == Phase.Bidding)
                {
                    <NormalBiddingPanel Client="h" CanBid="h.Actions.Contains(typeof(Bid))" />
                }

                @if (h.Game.CurrentPhase == Phase.BlackMarketBidding)
                {
                    <BlackMarketBiddingPanel Client="h" CanBid="h.Actions.Contains(typeof(BlackMarketBid))" />
                }

                @if (DealAccepted.CurrentDeals(h.Game).Any())
                {
                    <DealComponent Client="@h" />
                }
            }

            @if (h.Game.CurrentReport != null)
            {
                <ReportComponent Client="@h" Report="h.Game.CurrentReport" />
            }

            @if (!h.IsObserver && h.CurrentPhase > Phase.TradingFactions && h.Player.Faction == Faction.None)
            {
                foreach (Player p in h.Game.Players)
                {
                    <PlayerPanel Client="h" ShownPlayer="p" ShowHeader="true" />
                }
            }

        </div>

        <!--Chat window for observers-->
        @if (h.IsObserver)
        {
            <div class="col-sm-12 col-lg-3">

                <MenuComponent Client="@h" />
                <ChatComponent Client="@h" BackgroundColor="#e8dba6dd" />

            </div>
        }

        <!--Global Components-->
        @if (!h.IsObserver && h.CurrentPhase > Phase.AwaitingPlayers)
        {
            <HoverPanel Width=400 HandleWidth=12 BackgroundColor="#e8dba6dd">
                <ChatComponent Client="@h" />
            </HoverPanel>
        }

        @if (h.JoinableAdvertisedGames.Any() && (h.IsObserver || h.Game != null && h.Game.NumberOfHumanPlayers <= 1))
        {
            <AdvertisedGamesComponent Client="@h" />
        }

        <ImageFlashComponent Client="@h" />

    </div>
}

@code {

    private Client h;
    protected ElementReference element;

    protected override async Task OnInitializedAsync()
    {
        Message.DefaultDescriber = Skin.Current;
        Browser.Initialize(JSRuntime);
        h = new Client(NavigationManager.ToAbsoluteUri("/gameHub"));
        await h.Start();
        await LoadSkinDataIfSaved();
    }

    private bool isFullscreen = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var checkFullscreen = await Browser.IsFullScreen();
        if (isFullscreen != checkFullscreen)
        {
            isFullscreen = checkFullscreen;
            StateHasChanged();
        }
        else
        {
            await Browser.SetPlanetMapScale();
        }

        if (firstRender) {

            h.RefreshHandler += Refresh;
            h.RefreshPopoverHandler += RefreshPopovers;
        }
    }

    private async Task LoadSkinDataIfSaved()
    {
        var existingSkinData = await Browser.LoadStringSetting("treachery.online;setting.skin");
        if (existingSkinData != null && existingSkinData.Length > 0)
        {
            Skin.Current = Skin.Load(existingSkinData);
            Message.DefaultDescriber = Skin.Current;
        }
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public void RefreshPopovers() {

        _ = Browser.RefreshPopovers(element);
    }

    private string Scrollbars => isFullscreen? "vh-100 overflow-auto" : "";

    private string MapGrid => !h.IsConnected || h.PlayerName == "" || h.HostProxy == null && h.Host == null ? "col-sm-12 col-lg-5" : "col-sm-12 col-lg-6";

    private string ActionGrid => !h.IsConnected || h.PlayerName == "" || h.HostProxy == null && h.Host == null ? "col-sm-12 col-lg-4" : "col-sm-12 col-lg-3";

    private bool GameStarted => h.HostProxy != null && h.Game.CurrentPhase > Phase.AwaitingPlayers;
}
