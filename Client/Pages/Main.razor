<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@page "/"
@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@using Treachery.Client.OtherComponents;
@using Treachery.Client.MapComponents;
@using Microsoft.Extensions.Logging;

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

    @if (h.InScheduledMaintenance)
    {
        <div class="alert alert-danger text-center p-0" role="alert">
            treachery.online will be down for maintenance from @h.ServerSettings.ScheduledMaintenance.ToLocalTime() until @h.ServerSettings.ScheduledMaintenance.AddMinutes(15).ToLocalTime() (your local time)
        </div>
    }

    @if (!GameStarted)
    {
    <div class="row d-flex align-items-center m-n4" style="min-height: 95vh; background-image: url('../art/planet.png'); background-size: 55%; background-position-x: center; background-position-y: 0; background-repeat: no-repeat;">

            <div class="col-sm-12 col-lg-3"/>
            <div class="col-sm-12 col-lg-6">

                @if (h.IsConnected)
                {
                    if (h.PlayerName == "")
                    {
                        <div class="d-flex justify-content-center">
                            <PlayerNameComponent h="@h" />
                        </div>
                    }
                    else if (h.HostProxy == null && h.Host == null)
                    {
                        <HostOrJoinGameComponent h="@h" />
                    }
                    else
                    {
                        <ActionPanel h="@h" />
                    }
                }

            </div>
            <div class="col-sm-12 col-lg-3"/>

        </div>

    }
    else
    {
        <div @ref=@element class="row">

            <!--Map Column-->
            <div id="mapdiv" class="@MapGrid">
                <Board h="h" OnLocationClick="@h.LocationClick" />
            </div>

            <!--Action Column-->
            @if (!h.IsObserver)
            {
                <div class="@ActionGrid @Scrollbars">

                    <GameStatusComponent h="@h" CanEndPhase="h.Actions.Contains(typeof(EndPhase))" />

                    @if (h.CurrentPhase == Phase.GameEnded)
                    {
                        <WinnerPanel h="h" />
                    }

                    <ActionPanel h="@h" />

                </div>
            }

            <!--Information Column-->
            <div class="col-sm-12 col-lg-3 cursor-hand @Scrollbars">

                <MenuComponent h="@h" />

                @if (!h.IsObserver)
                {
                    if (h.Player.Faction != Faction.None)
                    {
                        <PlayerPanel h="h" ShownPlayer="h.Player" />
                    }
                    else if (h.PlayerName != "")
                    {
                        <ChatComponent h="@h" BackgroundColor="#e8dba6dd" />
                    }
                }
                else if (h.IsObserver)
                {
                    <GameStatusComponent h="@h" />

                    @if (h.CurrentPhase == Phase.GameEnded)
                    {
                        <WinnerPanel h="h" />
                    }

                    @if (h.Game.CurrentPhase == Phase.Bidding)
                    {
                        <NormalBiddingPanel h="h" CanBid="h.Actions.Contains(typeof(Bid))" />
                    }

                    @if (h.Game.CurrentPhase == Phase.BlackMarketBidding)
                    {
                        <BlackMarketBiddingPanel h="h" CanBid="h.Actions.Contains(typeof(BlackMarketBid))" />
                    }

                    @if (DealAccepted.CurrentDeals(h.Game).Any())
                    {
                        <DealComponent h="@h" />
                    }
                }

                @if (h.Game.CurrentReport != null)
                {
                    <ReportComponent h="@h" Report="h.Game.CurrentReport" />
                }

                @if (!h.IsObserver && h.CurrentPhase > Phase.TradingFactions && h.Player.Faction == Faction.None)
                {
                    foreach (Player p in h.Game.Players)
                    {
                        <PlayerPanel h="h" ShownPlayer="p" ShowHeader="true" />
                    }
                }

            </div>

            <!--Global Components-->
            @if (!h.IsObserver && h.CurrentPhase > Phase.AwaitingPlayers)
            {
                <HoverPanel Width=400 HandleWidth=12 BackgroundColor="#e8dba6dd">
                    <ChatComponent h="@h" />
                </HoverPanel>
            }

            @if (h.JoinableAdvertisedGames.Any() && (h.IsObserver || h.Game != null && h.Game.NumberOfHumanPlayers <= 1))
            {
                <AdvertisedGamesComponent h="@h" />
            }

            <ImageFlashComponent h="@h" />

            <!--Chat window for observers-->
            @if (h.IsObserver)
            {
                <div class="col-sm-12 col-lg-3">

                    <ChatComponent h="@h" BackgroundColor="#e8dba6dd" />

                </div>
            }

        </div>
    }




@code {

    private Handler h;
    protected ElementReference element;

    protected override async Task OnInitializedAsync()
    {
        Message.DefaultDescriber = Skin.Current;
        Browser.Initialize(JSRuntime);
        h = new Handler(NavigationManager.ToAbsoluteUri("/gameHub"));
        await h.Start();
        await LoadSkinDataIfSaved();
    }

    private bool isFullscreen = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var checkFullscreen = await Browser.IsFullScreen();
        if (isFullscreen != checkFullscreen)
        {
            isFullscreen = checkFullscreen;
            StateHasChanged();
        }
        else
        {
            await Browser.SetPlanetMapScale();
        }

        if (firstRender) {

            h.RefreshHandler += Refresh;
            h.RefreshPopoverHandler += RefreshPopovers;
        }
    }

    private async Task LoadSkinDataIfSaved()
    {
        var existingSkinData = await Browser.LoadStringSetting("treachery.online;setting.skin");
        if (existingSkinData != null && existingSkinData.Length > 0)
        {
            var existingSkin = Skin.Load(existingSkinData);
            if (existingSkin.Version >= Skin.CurrentVersion)
            {
                Skin.Current = existingSkin;
                Message.DefaultDescriber = Skin.Current;
            }
        }
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public void RefreshPopovers() {

        _ = Browser.RefreshPopovers(element);
    }

    private string Scrollbars => isFullscreen? "vh-100 overflow-auto" : "";

    private string MapGrid => !h.IsConnected || h.PlayerName == "" || h.HostProxy == null && h.Host == null ? "col-sm-12 col-lg-5" : "col-sm-12 col-lg-6";

    private string ActionGrid => !h.IsConnected || h.PlayerName == "" || h.HostProxy == null && h.Host == null ? "col-sm-12 col-lg-4" : "col-sm-12 col-lg-3";

    private bool GameStarted => h.HostProxy != null && h.Game.CurrentPhase > Phase.AwaitingPlayers;
}
