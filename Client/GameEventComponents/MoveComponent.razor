<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@inherits PlacementComponent<Move>
@using Treachery.Client.GenericComponents;
@using Treachery.Shared

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle">

    <Header>Perform a Move?</Header>
    <Body>

        @if (h.Player.Has(TreacheryCardType.Caravan))
        {
            <div class="text-info small">Note: if you want to perform a @Skin.Current.Describe(TreacheryCardType.Caravan) this turn, you need to do that before performing your regular move.</div>
        }

        @if (ValidSources.Any())
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="fromTerritory" Values="ValidSources">
                <Label>From</Label>
            </SelectComponent>

            <ForceSelectionComponent h="h" OnChanged="@StateHasChanged" Forces="forces" Locations="Player.LocationsWithAnyForcesInTerritory(fromTerritory)" />

            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="toLocation" Values="ValidTargets">
                <Label>To</Label>
            </SelectComponent>

            @if (h.Game.ContainsConflictingAlly(h.Player, toLocation))
            {
                <div class="text-danger bg-dark">Note: any of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
            }

            @if (h.Faction == Faction.Blue)
            {
                <div>Move as fighters or advisors?</div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="AsAdvisorsOnChange" type="radio" id="moveAsAdvisorsNo" value="false" checked="@(!asAdvisors)">
                    <label class="custom-control-label" for="moveAsAdvisorsNo">Fighters</label>
                </div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="AsAdvisorsOnChange" type="radio" id="moveAsAdvisorsYes" value="true" checked="@(asAdvisors)">
                    <label class="custom-control-label" for="moveAsAdvisorsYes">Advisors</label>
                </div>
            }

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@validationError" Pass="Pass" PassText="Pass" />
        }
        else
        {
            <ButtonRowComponent Pass="Pass" PassText="Pass" />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    override protected Move ConfirmedResult => new Move(h.Game) { Initiator = h.Faction, ForceLocations = forces, To = toLocation, AsAdvisors = asAdvisors, Passed = false };

    override protected Move PassedResult => new Move(h.Game) { Initiator = h.Faction, Passed = true };
}
