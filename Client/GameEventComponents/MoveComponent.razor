<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@inherits PlacementComponent<Move>
@using Treachery.Client.GenericComponents;
@using Treachery.Shared

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Perform a Move?</Header>
    <Body>

        @if (Player.Has(TreacheryCardType.Caravan))
        {
            <div class="text-info small">Note: if you want to perform a @Skin.Current.Describe(TreacheryCardType.Caravan) this turn, you need to do that before performing your regular move.</div>
        }

        @if (ValidSources.Any())
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="fromTerritory" Values="ValidSources">
                <Label>From</Label>
            </SelectComponent>

            @if (Game.CurrentPlanetology != null && Game.CurrentPlanetology.MoveFromTwoTerritories && Game.CurrentPlanetology.Initiator == Faction)
            {
                <ForceSelectionComponent h="h" OnChanged="@StateHasChanged" Forces="forces" Locations="Game.LocationsWithAnyForcesNotInStorm(Player)" AlwaysShowLocation="true" AllowMultipleTerritories="true" />
            }
            else
            {
                <ForceSelectionComponent h="h" OnChanged="@StateHasChanged" Forces="forces" Locations="Player.LocationsWithAnyForcesInTerritory(fromTerritory)" />
            }

            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="toLocation" Values="ValidTargets">
                <Label>To</Label>
            </SelectComponent>

            @if (Game.ContainsConflictingAlly(Player, toLocation))
            {
                <div class="text-danger bg-dark">Note: any of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
            }

            @if (Faction == Faction.Blue)
            {
                <RadioComponent @bind-Value="asAdvisors" Values="new bool[] { false, true }" ValueLabels="@(new string[] {"Fighters", "Advisors"})">
                    <Label>Move as fighters or advisors?</Label>
                </RadioComponent>
            }

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Move" ConfirmError="@Validation" Pass="Pass" PassText="Pass" />
        }
        else
        {
            <ButtonRowComponent Pass="Pass" PassText="Pass" />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    override protected Move ConfirmedResult => new Move(Game) { Initiator = Faction, ForceLocations = forces, To = toLocation, AsAdvisors = asAdvisors, Passed = false };

    override protected Move PassedResult => new Move(Game) { Initiator = Faction, Passed = true };
}
