<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BattleConcluded>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle">

    <Header>Conclude the battle you just won</Header>

    <Body>

        @if (Faction == Game.BattleWinner)
        {
            var maxReplacementForces = BattleConcluded.ValidMaxReplacementForceAmount(Game, Player);
            if (maxReplacementForces > 0)
            {
                <label for="replacementAmount">How many @Skin.Current.SpecialForceName_STR[Faction.Grey] losses should be exchanged with surviving @Skin.Current.ForceName_STR[Faction.Grey]?</label>
                <NumberPickerComponent @bind-Value="replacementAmount" Min="0" Max="maxReplacementForces" SymbolSRC="@Skin.Current.GetFactionSpecialForceImageURL(Faction)" />
            }

            var discardableMercenary = DiscardableMercenaryAfterBattle;
            var discardableWeapon = DiscardableWeaponAfterBattle;
            var discardableDefense = DiscardableDefenseAfterBattle;

            if (discardableMercenary != null || discardableWeapon != null || discardableDefense != null)
            {
                <div class="mt-2">Select any cards you wish to discard:</div>

                if (discardableMercenary != null)
                {
                    <CheckboxComponent @bind-Value="discardMercenary">@discardableMercenary.Name</CheckboxComponent>
                }

                if (discardableWeapon != null)
                {
                    <CheckboxComponent @bind-Value="discardWeapon">@discardableWeapon.Name</CheckboxComponent>
                }

                if (discardableDefense != null)
                {
                    <CheckboxComponent @bind-Value="discardDefense">@discardableDefense.Name</CheckboxComponent>
                }
            }

            if (BattleConcluded.MayCaptureOrKill(Game, Player))
            {
                <div>We caught <HeroComponent Value="Game.BlackVictim" />... What are your orders, capture or kill?</div>

                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="CaptureDecisionOnChange" type="radio" id="battleConcludedKillFalse" value="@CaptureDecision.Capture" checked="@(captureDecision == CaptureDecision.Capture)">
                    <label class="custom-control-label" for="battleConcludedKillFalse">Capture</label>
                </div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="CaptureDecisionOnChange" type="radio" id="battleConcludedKillTrue" value="@CaptureDecision.Kill" checked="@(captureDecision == CaptureDecision.Kill)">
                    <label class="custom-control-label" for="battleConcludedKillTrue">Kill to gain 2 @Skin.Current.Describe(Concept.Resource)</label>
                </div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="CaptureDecisionOnChange" type="radio" id="battleConcludedKillNeither" value="@CaptureDecision.DontCapture" checked="@(captureDecision == CaptureDecision.DontCapture)">
                    <label class="custom-control-label" for="battleConcludedKillNeither">Neither capture nor kill</label>
                </div>
            }

            if (Loser.TechTokens.Count > 0)
            {
                <SelectFromImageComponent @bind-Value="stolenToken" Values="Loser.TechTokens" ImageURLs="Loser.TechTokens.Select(t => Skin.Current.GetImageURL(t))" PopupHTMLs="Loser.TechTokens.Select(t => Support.GetTechTokenHTML(t))">
                    <Label>Choose a tech token to steal</Label>
                </SelectFromImageComponent>
            }
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private CaptureDecision captureDecision = CaptureDecision.Kill;
    private bool discardMercenary;
    private bool discardWeapon;
    private bool discardDefense;
    private TechToken stolenToken;
    private int replacementAmount;

    protected override BattleConcluded ConfirmedResult => new BattleConcluded(Game) { Initiator = Faction, DiscardedCards = DetermineSelectedCards(), StolenToken = stolenToken, SpecialForceLossesReplaced = replacementAmount, CaptureDecision = captureDecision };

    private IEnumerable<TreacheryCard> DetermineSelectedCards()
    {
        var result = new List<TreacheryCard>();
        if (discardMercenary) result.Add(DiscardableMercenaryAfterBattle);
        if (discardWeapon) result.Add(DiscardableWeaponAfterBattle);
        if (discardDefense) result.Add(DiscardableDefenseAfterBattle);
        return result;
    }

    private void CaptureDecisionOnChange(ChangeEventArgs args)
    {
        captureDecision = Enum.Parse<CaptureDecision>((string)args.Value);
        StateHasChanged();
    }

    private TreacheryCard DiscardableMercenaryAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && action.Hero is TreacheryCard && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Hero))
            {
                return action.Hero as TreacheryCard;
            }
            else
            {
                return null;
            }
        }
    }

    private TreacheryCard DiscardableWeaponAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Weapon))
            {
                return action.Weapon;
            }
            else
            {
                return null;
            }
        }
    }

    private TreacheryCard DiscardableDefenseAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Defense))
            {
                return action.Defense;
            }
            else
            {
                return null;
            }
        }
    }

    private Battle MyBattleAction
    {
        get
        {
            if (Game.AggressorBattleAction != null)
            {
                return Game.AggressorBattleAction.Initiator == Faction ? Game.AggressorBattleAction : Game.DefenderBattleAction;
            }
            else
            {
                return null;
            }
        }
    }

    private Player Loser
    {
        get
        {
            return Game.GetPlayer(Game.BattleLoser);
        }
    }
}
