<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<WhiteAnnouncesBlackMarket>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>Select a card to put on the Black Market, or pass</Header>
    <Body>

        <SelectFromImageComponent @bind-Value="card" Values="WhiteAnnouncesBlackMarket.ValidCards(Player)" Required="true" ImageWidth="80" />

        <RadioComponent @bind-Value="auctionType" Values="new AuctionType[] { AuctionType.BlackMarketNormal, AuctionType.BlackMarketOnceAround, AuctionType.BlackMarketSilent }" ValueLabels="@(new string[] { "Normal", "Once Around", "Silent"})">
            <Label>Type of auction</Label>
        </RadioComponent>

        @if (auctionType == AuctionType.BlackMarketOnceAround)
        {
            <RadioComponent @bind-Value="direction" Values="new int[] { 1, -1 }" ValueLabels="@(new string[] { "Counter-clockwise", "Clockwise"})">
                <Label>Bidding direction</Label>
            </RadioComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@Skin.Current.Format("Put {0} on Black Market", card)" ConfirmError=@Validation Pass="Pass" PassText="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    protected override Faction IsFactionSpecific => Faction.White;

    private TreacheryCard card;
    private AuctionType auctionType = AuctionType.BlackMarketNormal;
    private int direction = 1;

    protected override WhiteAnnouncesBlackMarket ConfirmedResult => new WhiteAnnouncesBlackMarket(Game) { Initiator = Faction, Card = card, AuctionType = auctionType, Direction = direction };

    protected override WhiteAnnouncesBlackMarket PassedResult => new WhiteAnnouncesBlackMarket(Game) { Initiator = Faction, Passed = true };
}
