<!--
* Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BattleInitiated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" CollapsedType=GetType()>

    <Header>Select whom and where to battle</Header>
    <Body>

        <SelectComponent @bind-Value="battle" Values=@battles ValueLabels=@battles.Select(b => Label(b))/>
        <ButtonRowComponent Confirm="Confirm" ConfirmText="Initiate Battle" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private IEnumerable<Fight> battles;

    private Fight battle;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        battles = Battle.BattlesToBeFought(Game, Player);

        if (battles.Count() == 1)
        {
            _ = Task.Delay(500).ContinueWith(e => Confirm());
        }
    }

    protected override BattleInitiated ConfirmedResult => new BattleInitiated(Game) { Initiator = Faction, Territory = battle.Territory, Target = battle.Faction };

    private string Label(Fight b) => Skin.Current.Format("{0} {1} {2}", b.Faction, b.Territory.IsHomeworld ? "on" : "in", b.Territory);
}
