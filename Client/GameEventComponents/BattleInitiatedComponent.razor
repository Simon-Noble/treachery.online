<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BattleInitiated>
@implements IDisposable

<div class="card p-1 mb-2 border-danger">
    <div class="card-header">Select whom and where to battle</div>
    <div class="card-body">

        <label for="battleLocation">Territory <kbd>click</kbd></label>
        <select class="custom-select" @bind="battleTerritoryId" id="battleLocation">
            @foreach (var f in ValidBattleTerritories)
            {
                <option value="@f.Id">@f.Name</option>
            }
        </select>

        <label for="battleTarget">Opponent</label>
        <select class="custom-select" @bind="battleTarget" id="battleTarget">
            @foreach (var f in ValidBattleTargets)
            {
                <option value="@f">@Skin.Current.Describe(f)</option>
            }
        </select>

        <button class="btn btn-primary mt-1" @onclick="Confirm" disabled=@(!Valid)>Ok</button>
        <div class="text-danger bg-dark">@validationError</div>
    </div>
</div>

@code {

    private int battleTerritoryId = -1;
    private Faction battleTarget;

    protected override void OnParametersSet()
    {
        if (ValidBattleTerritories.Count() == 1 && ValidBattleTargets.Count() == 1)
        {
            _ = Task.Delay(500).ContinueWith(e => Confirm());
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
        }

        Initialize<int, Territory>(ref battleTerritoryId, ValidBattleTerritories);
        Initialize<Faction, Faction>(ref battleTarget, ValidBattleTargets);
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
    }

    protected override BattleInitiated ConfirmedResult
    {
        get
        {
            return new BattleInitiated(h.Game) { Initiator = h.Faction, Territory = h.Game.Map.TerritoryLookup.Find(battleTerritoryId), Target = battleTarget };
        }
    }

    void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref battleTerritoryId, ValidBattleTerritories, l.Territory);
    }

    private IEnumerable<Territory> ValidBattleTerritories
    {
        get
        {
            return Battle.ValidBattleTerritories(h.Game, h.Player);
        }
    }

    public IEnumerable<Faction> ValidBattleTargets
    {
        get
        {
            return Battle.ValidBattleTargets(h.Game, h.Player);
        }
    }
}
