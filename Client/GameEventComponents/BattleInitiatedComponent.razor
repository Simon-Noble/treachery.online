<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BattleInitiated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Select whom and where to battle</Header>
    <Body>

        <SelectComponent @bind-Value="battle" Values="Battle.BattlesToBeFought(Game, Player)" ValueLabels="BattleLabels"/>
        <ButtonRowComponent Confirm="Confirm" ConfirmText="Initiate Battle" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code { 
    
    protected override bool IsUrgent => true;

    private Tuple<Territory, Faction> battle;

    protected override void OnParametersSet()
    {
        if (Battle.BattlesToBeFought(Game, Player).Count() == 1)
        {
            _ = Task.Delay(500).ContinueWith(e => Confirm());
        }
    }

    protected override BattleInitiated ConfirmedResult => new BattleInitiated(Game) { Initiator = Faction, Territory = battle.Item1, Target = battle.Item2 };

    private IEnumerable<string> BattleLabels => Battle.BattlesToBeFought(Game, Player).Select(b => Skin.Current.Format("{0} in {1}", b.Item2, b.Item1));
}
