<!--
* Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BattleInitiated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>Select whom and where to battle</Header>
    <Body>
        
        <SelectFromImageComponent Game=Game @bind-Value=@faction Values=@battles.Select(b => b.Faction).Distinct() Required=true/>

        <SelectComponent @bind-Value=@territory Values=@battles.Where(b => b.Faction == @faction).Select(b => b.Territory) />
                    
        <ButtonRowComponent Confirm="Confirm" ConfirmText="Initiate Battle" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private IEnumerable<Fight> battles;

    private Faction faction;
    private Territory territory;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        battles = Battle.BattlesToBeFought(Game, Player);

        if (battles.Count() == 1)
        {
            _ = Task.Delay(500).ContinueWith(e => Confirm());
        }
    }

    protected override BattleInitiated ConfirmedResult => new BattleInitiated(Game, Faction) { Territory = territory, Target = faction };
}
