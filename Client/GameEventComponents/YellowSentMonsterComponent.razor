<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<YellowSentMonster>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Select where to make @Skin.Current.Describe(Concept.Monster) appear</Header>
    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="target" Values="YellowSentMonster.ValidTargets(Game).OrderBy(t => Name(t))"/>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@Skin.Current.Format("Appear in {0}", target)" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Yellow;

    public Territory target;

    protected override YellowSentMonster ConfirmedResult => new YellowSentMonster(Game) { Initiator = Faction, Territory = target };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref target, YellowSentMonster.ValidTargets(Game), l.Territory);
    }
}
