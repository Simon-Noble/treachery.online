<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<AllyPermission>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Alliance Management</Header>

    <Body>

        <div class="text-center mt-0 mb-1">
            <img width="48" src="@Skin.Current.GetImageURL(Player.Ally)" />
        </div>


        @if (Player.AlliedPlayer.IsBot)
        {
            var ally = Player.AlliedPlayer;

            if (ally.TreacheryCards.Any(c => c.IsWeapon))
            {
                <div>They say they own a weapon.</div>
            }
            else
            {
                <div>They say they don't own weapons.</div>
            }

            if (ally.TreacheryCards.Any(c => c.IsDefense))
            {
                <div>They say they own a defense.</div>
            }
            else
            {
                <div>They say they don't own defenses.</div>
            }

            var safeLeaders = ally.KnownNonTraitors.Where(l => l.Faction == Faction)
                .Union(ally.Traitors.Where(l => l.Faction == Faction)
                .Union(ally.FaceDancers.Where(l => l.Faction == Faction)));

            if (safeLeaders.Any())
            {
                <div>They say you can safely use: <strong>@string.Join(", ", safeLeaders)</strong>.</div>
            }
            else
            {

                <div>They don't know of any safe leaders you could use.</div>
            }

            <div>They own <strong>@ally.Resources</strong> @Skin.Current.Describe(Concept.Resource).</div>
        }

        <div class="mt-1">
            <label class="mt-2 mb-0">How much are you willing to pay for their @(Faction == Faction.Brown ? "battles, " : "")bids and shipments (currently: <strong>@Game.GetPermittedUseOfAllySpice(Player.Ally)</strong>)? @(Faction == Faction.Red ? "Payments for bids flow back to you." : "")</label>
            <SelectResourcesComponent @bind-Value="spice" Min="0" Max="Player.Resources" />
        </div>

        @if (Karma.CanKarma(Game, Player))
        {
            var permittedKarma = Game.GetPermittedUseOfAllyKarma(Player.Ally);

            <SelectCardComponent @bind-Value="karmaCard" Values="Karma.ValidKarmaCards(Game, Player)" Required="false">
                <Label>Select a @Skin.Current.Describe(TreacheryCardType.Karma) card they may use to ship at @Skin.Current.Describe(Faction.Orange) rates (currently: <strong>@(permittedKarma == null ? "none" : permittedKarma.Name)</strong>)?</Label>
            </SelectCardComponent>
        }
        else
        {
            karmaCard = null;
        }

        @if (Faction == Faction.Red)
        {
            <div class="mt-1">
                <label class="mt-1 mb-0">How many revivals will you pay for them (currently: <strong>@(Game.RedWillPayForExtraRevival)</strong>)?</label>
                <SelectForcesComponent @bind-Value="emperorWillPayForExtraRevival" Min="0" Max="3" Faction="Player.Ally" Special="false" />
            </div>
        }
        else if (Faction == Faction.Orange)
        {
            <CheckboxComponent @bind-Value="guildAllyMayShipAsGuild">
                Allow shipment at @Skin.Current.Describe(Faction.Orange) rates and site-to-site (currently: <strong>@(Game.OrangeAllyMayShipAsGuild ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Purple)
        {
            <CheckboxComponent @bind-Value="purpleAllyMyReviveAsPurple">
                Allow revival at @Skin.Current.Describe(Faction.Purple) rates (currently: <strong>@(Game.PurpleAllyMayReviveAsPurple ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Grey)
        {
            <CheckboxComponent @bind-Value="greyAllyMayReplace">
                Allow replacing treachery cards they win (currently: <strong>@(Game.GreyAllyMayReplaceCards ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Yellow)
        {
            <CheckboxComponent @bind-Value="fremenAllowsThreeFreeRevivals">
                Allow 3 free revivals (currently: <strong>@(Game.YellowAllowsThreeFreeRevivals ? "yes" : "no")</strong>)
            </CheckboxComponent>

            <CheckboxComponent @bind-Value="fremenWillProtectFromShaiHulud">
                Protect them from @Skin.Current.Describe(Concept.Monster) (currently: <strong>@(Game.YellowWillProtectFromShaiHulud ? "yes" : "no")</strong>)
            </CheckboxComponent>

            @if (Game.Applicable(Rule.YellowSeesStorm))
            {
                <CheckboxComponent @bind-Value="fremenShareStormPrescience">
                    Share storm knowledge (currently: <strong>@(Game.YellowSharesPrescience ? "yes" : "no")</strong>)
                </CheckboxComponent>
            }
        }
        else if (Faction == Faction.Green)
        {
            <CheckboxComponent @bind-Value="greenSharePrescience">
                Share your Prescience (currently: <strong>@(Game.GreenSharesPrescience ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Blue)
        {
            <CheckboxComponent @bind-Value="blueAllyMayUseVoice">
                Allow use of Voice (currently: <strong>@(Game.BlueAllyMayUseVoice ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.White)
        {
            <CheckboxComponent @bind-Value="whiteAllyMayUseNoField">
                Allow shipment by No-Field (currently: <strong>@(Game.WhiteAllyMayUseNoField ? "yes" : "no")</strong>)
            </CheckboxComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Changes" ConfirmError="@Validation" Disabled="@(!Dirty)"/>

    </Body>

</GameEventComponentLayout>

@code {

    private bool purpleAllyMyReviveAsPurple;
    private bool greyAllyMayReplace;
    private bool guildAllyMayShipAsGuild;
    private int emperorWillPayForExtraRevival;
    private bool fremenWillProtectFromShaiHulud;
    private bool fremenAllowsThreeFreeRevivals;
    private bool fremenShareStormPrescience;
    private bool greenSharePrescience;
    private bool blueAllyMayUseVoice;
    private bool whiteAllyMayUseNoField;

    private int spice;
    private TreacheryCard karmaCard;

    protected override void OnParametersSet()
    {
        spice = Game.GetPermittedUseOfAllySpice(Player.Ally);
        karmaCard = Game.GetPermittedUseOfAllyKarma(Player.Ally);

        switch (Faction)
        {
            case Faction.Purple:
                purpleAllyMyReviveAsPurple = Game.PurpleAllyMayReviveAsPurple;
                break;
            case Faction.Grey:
                greyAllyMayReplace = Game.GreyAllyMayReplaceCards;
                break;
            case Faction.Orange:
                guildAllyMayShipAsGuild = Game.OrangeAllyMayShipAsGuild;
                break;
            case Faction.Red:
                emperorWillPayForExtraRevival = Game.RedWillPayForExtraRevival;
                break;
            case Faction.Yellow:
                fremenWillProtectFromShaiHulud = Game.YellowWillProtectFromShaiHulud;
                fremenAllowsThreeFreeRevivals = Game.YellowAllowsThreeFreeRevivals;
                fremenShareStormPrescience = Game.YellowSharesPrescience;
                break;
            case Faction.Green:
                greenSharePrescience = Game.GreenSharesPrescience;
                break;
            case Faction.Blue:
                blueAllyMayUseVoice = Game.BlueAllyMayUseVoice;
                break;
            case Faction.White:
                whiteAllyMayUseNoField = Game.WhiteAllyMayUseNoField;
                break;
        }
    }

    private bool Dirty
    {
        get
        {
            if (spice != Game.GetPermittedUseOfAllySpice(Player.Ally)) return true;
            if (karmaCard != Game.GetPermittedUseOfAllyKarma(Player.Ally)) return true;

            switch (Faction)
            {
                case Faction.Purple:
                    if (purpleAllyMyReviveAsPurple != Game.PurpleAllyMayReviveAsPurple) return true;
                    break;
                case Faction.Grey:
                    if (greyAllyMayReplace != Game.GreyAllyMayReplaceCards) return true;
                    break;
                case Faction.Orange:
                    if (guildAllyMayShipAsGuild != Game.OrangeAllyMayShipAsGuild) return true;
                    break;
                case Faction.Red:
                    if (emperorWillPayForExtraRevival != Game.RedWillPayForExtraRevival) return true;
                    break;
                case Faction.Yellow:
                    if (fremenWillProtectFromShaiHulud != Game.YellowWillProtectFromShaiHulud) return true;
                    if (fremenAllowsThreeFreeRevivals != Game.YellowAllowsThreeFreeRevivals) return true;
                    if (fremenShareStormPrescience != Game.YellowSharesPrescience) return true;
                    break;
                case Faction.Green:
                    if (greenSharePrescience != Game.GreenSharesPrescience) return true;
                    break;
                case Faction.Blue:
                    if (blueAllyMayUseVoice != Game.BlueAllyMayUseVoice) return true;
                    break;
                case Faction.White:
                    if (whiteAllyMayUseNoField != Game.WhiteAllyMayUseNoField) return true;
                    break;
            }

            return false;
        }
    }

    public void Dispose()
    {
    }

    protected override AllyPermission ConfirmedResult =>

            new AllyPermission(Game)
            {
                Initiator = Faction,
                RedWillPayForExtraRevival = emperorWillPayForExtraRevival,
                YellowAllowsThreeFreeRevivals = fremenAllowsThreeFreeRevivals,
                YellowWillProtectFromMonster = fremenWillProtectFromShaiHulud,
                YellowSharesPrescience = fremenShareStormPrescience,
                GreenSharesPrescience = greenSharePrescience,
                BlueAllowsUseOfVoice = blueAllyMayUseVoice,
                WhiteAllowsUseOfNoField = whiteAllyMayUseNoField,
                AllyMayShipAsOrange = guildAllyMayShipAsGuild,
                AllyMayReviveAsPurple = purpleAllyMyReviveAsPurple,
                AllyMayReplaceCards = greyAllyMayReplace,
                PermittedResources = spice,
                PermittedKarmaCard = karmaCard
            };
}

