<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<AllyPermission>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle">

    <Header>Alliance Management</Header>

    <Body>

        <div>You're allied with <span class="badge badge-primary badge-pill" style="@Color(Player.Ally)">@Skin.Current.Describe(Player.Ally)</span></div>

        @if (Player.AlliedPlayer.IsBot)
        {
            var ally = Player.AlliedPlayer;

            if (ally.TreacheryCards.Any(c => c.IsWeapon))
            {
                <div>They say they own a weapon.</div>
            }
            else
            {
                <div>They say they don't own weapons.</div>
            }

            if (ally.TreacheryCards.Any(c => c.IsDefense))
            {
                <div>They say they own a defense.</div>
            }
            else
            {
                <div>They say they don't own defenses.</div>
            }

            var safeLeaders = ally.KnownNonTraitors.Where(l => l.Faction == Faction)
                .Union(ally.Traitors.Where(l => l.Faction == Faction)
                .Union(ally.FaceDancers.Where(l => l.Faction == Faction)));

            if (safeLeaders.Any())
            {
                <div>They say you can safely use: <strong>@string.Join(", ", safeLeaders)</strong>.</div>
            }
            else
            {

                <div>They don't know of any safe leaders you could use.</div>
            }

            <div>They own <strong>@ally.Resources</strong> @Skin.Current.Describe(Concept.Resource).</div>
        }

        <label class="mt-2 mb-0">How much are you willing to pay for their bids and shipments (currently: <span class="badge badge-primary badge-pill">@Game.GetPermittedUseOfAllySpice(Player.Ally)</span>)? @(Faction == Faction.Red ? "Payments for bids flow back to you." : "")</label>
        <NumberPickerComponent @bind-Value="spice" Min="0" Max="Player.Resources" SymbolSRC="@Skin.Current.Harvester_URL" NumberBackgroundBorderColor="#FF5400" />

        @if (Karma.CanKarma(Game, Player))
        {
            var permittedKarma = Game.GetPermittedUseOfAllyKarma(Player.Ally);

            <SelectCardComponent @bind-Value="karmaCard" Values="Karma.ValidKarmaCards(Game, Player)">
                <Label>May your ally use one of your @Skin.Current.Describe(TreacheryCardType.Karma) cards to ship at @Skin.Current.Describe(Faction.Orange) rates (currently: <span class="badge badge-primary badge-pill">@(permittedKarma == null ? "no" : permittedKarma.Name)</span>)?</Label>
            </SelectCardComponent>
        }

        @if (Faction == Faction.Red)
        {
            <label class="mt-1 mb-0">How many forces may they revive at your expense (currently: <span class="badge badge-primary badge-pill">@(Game.RedWillPayForExtraRevival)</span>)?</label>
            <NumberPickerComponent @bind-Value="emperorWillPayForExtraRevival" Min="0" Max="3" SymbolSRC="@Skin.Current.GetFactionForceImageURL(Player.Ally)" />
        }
        else if (Faction == Faction.Orange)
        {
            <CheckboxComponent @bind-Value="guildAllyMayShipAsGuild">
                Allow them to ship at @Skin.Current.Describe(Faction.Orange) rates and site-to-site (currently: <span class="badge badge-primary badge-pill">@(Game.OrangeAllyMayShipAsGuild ? "yes" : "no")</span>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Purple)
        {
            <CheckboxComponent @bind-Value="purpleAllyMyReviveAsPurple">
                Allow them to revive at @Skin.Current.Describe(Faction.Purple) rates (currently: <span class="badge badge-primary badge-pill">@(Game.PurpleAllyMayReviveAsPurple ? "yes" : "no")</span>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Grey)
        {
            <CheckboxComponent @bind-Value="greyAllyMayReplace">
                Allow them to replace treachery cards they win by new cards (currently: <span class="badge badge-primary badge-pill">@(Game.GreyAllyMayReplaceCards ? "yes" : "no")</span>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Yellow)
        {
            <CheckboxComponent @bind-Value="fremenAllowsThreeFreeRevivals">
                Allow them to revive three forces for free (currently: <span class="badge badge-primary badge-pill">@(Game.YellowAllowsThreeFreeRevivals ? "yes" : "no")</span>)
            </CheckboxComponent>

            <CheckboxComponent @bind-Value="fremenWillProtectFromShaiHulud">
                Protect them from being devoured by @Skin.Current.Describe(Concept.Monster) (currently: <span class="badge badge-primary badge-pill">@(Game.YellowWillProtectFromShaiHulud ? "yes" : "no")</span>)
            </CheckboxComponent>

            @if (Game.Applicable(Rule.YellowSeesStorm))
            {
                <CheckboxComponent @bind-Value="fremenShareStormPrescience">
                    Share your storm knowledge with them (currently: <span class="badge badge-primary badge-pill">@(Game.YellowSharesPrescience ? "yes" : "no")</span>)
                </CheckboxComponent>
            }
        }
        else if (Faction == Faction.Green)
        {
            <CheckboxComponent @bind-Value="greenSharePrescience">
                Share your Prescience with them (currently: <span class="badge badge-primary badge-pill">@(Game.GreenSharesPrescience ? "yes" : "no")</span>)
            </CheckboxComponent>
        }
        else if (Faction == Faction.Blue)
        {
            <CheckboxComponent @bind-Value="blueAllyMayUseVoice">
                Allow them to use your Voice (currently: <span class="badge badge-primary badge-pill">@(Game.BlueAllyMayUseVoice ? "yes" : "no")</span>)
            </CheckboxComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@validationError" />

    </Body>

</GameEventComponentLayout>

@code {

    private bool purpleAllyMyReviveAsPurple;
    private bool greyAllyMayReplace;
    private bool guildAllyMayShipAsGuild;
    private int emperorWillPayForExtraRevival;
    private bool fremenWillProtectFromShaiHulud;
    private bool fremenAllowsThreeFreeRevivals;
    private bool fremenShareStormPrescience;
    private bool greenSharePrescience;
    private bool blueAllyMayUseVoice;
    private int spice;
    private TreacheryCard karmaCard;

    protected override void OnAfterRender(bool firstRender)
    {
        //Initialize<int, int>(ref spice, Player.ValidSpiceAmounts);
        //Initialize<int, TreacheryCard>(ref karmaCardId, Karma.ValidKarmaCards(Game, Player), true, -1);
    }

    protected override void OnParametersSet()
    {
        spice = Game.GetPermittedUseOfAllySpice(Player.Ally);
        karmaCard = Game.GetPermittedUseOfAllyKarma(Player.Ally);
        purpleAllyMyReviveAsPurple = Game.PurpleAllyMayReviveAsPurple;
        greyAllyMayReplace = Game.GreyAllyMayReplaceCards;
        guildAllyMayShipAsGuild = Game.OrangeAllyMayShipAsGuild;
        emperorWillPayForExtraRevival = Game.RedWillPayForExtraRevival;
        fremenWillProtectFromShaiHulud = Game.YellowWillProtectFromShaiHulud;
        fremenAllowsThreeFreeRevivals = Game.YellowAllowsThreeFreeRevivals;
        fremenShareStormPrescience = Game.YellowSharesPrescience;
        greenSharePrescience = Game.GreenSharesPrescience;
        blueAllyMayUseVoice = Game.BlueAllyMayUseVoice;
    }

    public void Dispose()
    {
    }

    protected override AllyPermission ConfirmedResult
    {
        get
        {
            return new AllyPermission(Game)
            {
                Initiator = Faction,
                RedWillPayForExtraRevival = emperorWillPayForExtraRevival,
                YellowAllowsThreeFreeRevivals = fremenAllowsThreeFreeRevivals,
                YellowWillProtectFromMonster = fremenWillProtectFromShaiHulud,
                YellowSharesPrescience = fremenShareStormPrescience,
                GreenSharesPrescience = greenSharePrescience,
                BlueAllowsUseOfVoice = blueAllyMayUseVoice,
                AllyMayShipAsOrange = guildAllyMayShipAsGuild,
                AllyMayReviveAsPurple = purpleAllyMyReviveAsPurple,
                AllyMayReplaceCards = greyAllyMayReplace,
                PermittedResources = spice,
                PermittedKarmaCard = karmaCard
            };
        }
    }
}
