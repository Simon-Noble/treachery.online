<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<GameEventType>
@typeparam GameEventType

@if (!dismissed)
{
    <GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

        <Header>@Title</Header>
        <Body>

            @if (Dismissable)
            {
                <ButtonRowComponent Confirm="Confirm" ConfirmText="@ConfirmLabel" ConfirmError=@Validation Other="Dismiss" OtherText="@DismissLabel" />
            }
            else
            {
                <ButtonRowComponent Confirm="Confirm" ConfirmText="@ConfirmLabel" ConfirmError=@Validation />
            }

            @if (AllowAutoConfirm)
            {
                <div class="mt-0 float-end">
                    <CheckboxComponent @bind-Value=autoConfirm OnChanged=SaveAutoConfirmSetting>Next time, auto @ConfirmLabel after 3 seconds</CheckboxComponent>
                </div>
            }

        </Body>

    </GameEventComponentLayout>
}

@code {

    protected override bool IsUrgent => Alert;

    private bool dismissed = false;
    private bool autoConfirm = false;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string ConfirmLabel { get; set; } = "Ok";

    [Parameter]
    public bool Alert { get; set; }

    [Parameter]
    public bool Dismissable { get; set; } = false;

    [Parameter]
    public string DismissLabel { get; set; } = "Dismiss";

    [Parameter]
    public bool AllowAutoConfirm { get; set; } = false;

    protected override GameEventType ConfirmedResult => new GameEventType() { Game = Game, Initiator = Faction };

    protected override void OnInitialized()
    {
        autoConfirm = GetAutoConfirmSetting();

        if (autoConfirm)
        {
            _ = Task.Delay(3000).ContinueWith(e => AutoPass());
        }
    }

    private async Task AutoPass()
    {
        if (autoConfirm && ConfirmedResult.IsValid)
        {
            await Confirm();
        }
    }

    private void Dismiss()
    {
        dismissed = true;
    }

    private static Dictionary<Type, bool> AutoConfirmSettings = new Dictionary<Type, bool>();

    private void SaveAutoConfirmSetting(bool value)
    {
        var type = typeof(GameEventType);

        if (AutoConfirmSettings.ContainsKey(type))
        {
            AutoConfirmSettings.Remove(type);
        }

        AutoConfirmSettings.Add(type, autoConfirm);
    }

    private bool GetAutoConfirmSetting()
    {
        var type = typeof(GameEventType);

        if (AutoConfirmSettings.ContainsKey(type))
        {
            return AutoConfirmSettings[type];
        }
        else {

            return false;
        }
    }
}

