<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PerformSetup>
@implements IDisposable

<div class="card p-1 mb-2 border-danger">
    <div class="card-header">
        Set <span class="badge badge-primary badge-pill" style="@Color(h.Game.NextFactionToPerformCustomSetup)">@Skin.Current.Describe(h.Game.NextFactionToPerformCustomSetup)</span> initial @Skin.Current.Describe(Concept.Resource) and forces.
    </div>
    <div class="card-body">

        <button class="btn btn-primary" @onclick="Confirm" disabled="@(!Valid)">Confirm</button>
        <div class="text-danger bg-dark">@validationError</div>

        <SelectComponent @bind-Value="resources" Values="ValidAmounts" Label="@Skin.Current.Describe(Concept.Resource)" Layout="SelectComponentLayout.OneInputPerLineLabelLeft" />

        <table class="table table-striped table-sm m-0 w-auto">
            <thead>
                <tr class="small">
                    <td>Location</td>
                    <td colspan="3">Forces<br /><kbd>click</kbd></td>
                    @if (HasSpecialForces)
                    {
                        <td colspan="3">@SpecialForceName<br /><kbd>ctrl+click</kbd></td>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var l in ValidLocations)
                {
                    <tr class="small">

                        <td>@l.ToString()</td>

                        <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, -1, false))" class="btn btn-primary btn-sm">-</button></td>
                        <td>@Forces(l, false)</td>
                        <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, 1, false))" class="btn btn-primary btn-sm">+</button></td>

                        @if (HasSpecialForces)
                        {
                            <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, -1, true))" class="btn btn-primary btn-sm">-</button></td>
                            <td>@Forces(l, true)</td>
                            <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, 1, true))" class="btn btn-primary btn-sm">+</button></td>
                        }

                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

@code {

    private Faction currentfaction;
    private int resources;
    private Dictionary<Location, Battalion> forces = new Dictionary<Location, Battalion>();

    protected override PerformSetup ConfirmedResult
    {
        get
        {
            return new PerformSetup(h.Game) { Initiator = h.Faction, Passed = false, Resources = resources, ForceLocations = forces };
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleAddForce;
            MapDrawer.OnLocationSelectedWithShift += HandleRemoveForce;

            if (HasSpecialForces)
            {
                MapDrawer.OnLocationSelectedWithCtrlOrAlt += HandleAddSpecialForce;
                MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleRemoveSpecialForce;
            }
        }

        if (currentfaction != h.Game.NextFactionToPerformCustomSetup)
        {
            forces = new Dictionary<Location, Battalion>();
            currentfaction = h.Game.NextFactionToPerformCustomSetup;
            StateHasChanged();
        }

        Initialize<int, int>(ref resources, ValidAmounts);
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleAddForce;
        MapDrawer.OnLocationSelectedWithShift -= HandleRemoveForce;

        if (HasSpecialForces)
        {
            MapDrawer.OnLocationSelectedWithCtrlOrAlt -= HandleAddSpecialForce;
            MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleRemoveSpecialForce;
        }
    }

    private Player CurrentPlayer
    {
        get
        {
            return h.Game.GetPlayer(h.Game.NextFactionToPerformCustomSetup);
        }
    }

    private bool HasSpecialForces
    {
        get
        {
            var p = CurrentPlayer;
            if (p != null)
            {
                return p.HasSpecialForces;
            }
            else
            {
                return false;
            }
        }
    }

    private string SpecialForceName
    {
        get
        {
            var p = CurrentPlayer;
            if (p != null)
            {
                return Skin.Current.Describe(CurrentPlayer.SpecialForce);
            }
            else
            {
                return "";
            }
        }
    }

    private void HandleAddForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, false);
        }
    }

    private void HandleAddSpecialForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, true);
        }
    }

    private void HandleRemoveForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, false);
        }
    }

    private void HandleRemoveSpecialForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, true);
        }
    }

    private IEnumerable<Location> ValidLocations
    {
        get
        {
            return h.Game.Map.Locations.OrderBy(l => l.ToString());
        }
    }

    protected int Forces(Location l, bool special)
    {
        if (forces.ContainsKey(l))
        {
            if (special)
            {
                return forces[l].AmountOfSpecialForces;
            }
            else
            {
                return forces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    protected void ForceAmountButton(Location location, int amount, bool specialForces)
    {
        if (forces.ContainsKey(location))
        {
            if (specialForces)
            {
                forces[location].ChangeSpecialForces(amount);
            }
            else
            {
                forces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        StateHasChanged();
    }

    public IEnumerable<int> ValidAmounts
    {
        get
        {
            return Enumerable.Range(1, 100);
        }
    }
}

