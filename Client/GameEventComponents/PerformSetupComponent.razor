<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PerformSetup>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>
        Set <span class="badge badge-primary badge-pill" style="@Color(Game.NextFactionToPerformCustomSetup)">@Skin.Current.Describe(Game.NextFactionToPerformCustomSetup)</span> initial @Skin.Current.Describe(Concept.Resource) and forces.
    </Header>

    <Body>

        <SelectResourcesComponent @bind-Value="resources" Min="0" Max="100" Label="@Skin.Current.Describe(Concept.Resource)" />

        <label class="mt-1">Initial forces on planet:</label>
        <ForceSelectionComponent h="h" OnChanged="@StateHasChanged" Forces="forces" Locations="ValidLocations" MaySelectFromStorm="true" AlwaysShowLocation="true" FullLocationName="false" FixedMaxForces="20" AllowMultipleTerritories="true"/>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private Faction currentfaction;
    private int resources;
    private Dictionary<Location, Battalion> forces = new Dictionary<Location, Battalion>();

    protected override PerformSetup ConfirmedResult => new PerformSetup(Game) { Initiator = Faction, Passed = false, Resources = resources, ForceLocations = forces };

    protected override void OnAfterRender(bool firstRender)
    {
        if (currentfaction != Game.NextFactionToPerformCustomSetup)
        {
            forces = new Dictionary<Location, Battalion>();
            currentfaction = Game.NextFactionToPerformCustomSetup;
            StateHasChanged();
        }

        if (firstRender)
        {
            h.OnLocationSelected += HandleAddForce;
            h.OnLocationSelectedWithShift += HandleRemoveForce;
            h.OnLocationSelectedWithCtrlOrAlt += HandleAddSpecialForce;
            h.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleRemoveSpecialForce;
        }
    }

    public void Dispose()
    {
        h.OnLocationSelected -= HandleAddForce;
        h.OnLocationSelectedWithShift -= HandleRemoveForce;
        h.OnLocationSelectedWithCtrlOrAlt -= HandleAddSpecialForce;
        h.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleRemoveSpecialForce;
    }

    private Player CurrentPlayer
    {
        get
        {
            return Game.GetPlayer(Game.NextFactionToPerformCustomSetup);
        }
    }

    private void HandleAddForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, false);
        }
    }

    private void HandleAddSpecialForce(object sender, Location l)
    {
        if (CurrentPlayer.HasSpecialForces && ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, true);
        }
    }

    private void HandleRemoveForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, false);
        }
    }

    private void HandleRemoveSpecialForce(object sender, Location l)
    {
        if (CurrentPlayer.HasSpecialForces && ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, true);
        }
    }

    private IEnumerable<Location> ValidLocations => Game.Map.Locations.OrderByDescending(l => l.IsStronghold).ThenBy(l => l.ToString());

    protected int Forces(Location l, bool special)
    {
        if (forces.ContainsKey(l))
        {
            if (special)
            {
                return forces[l].AmountOfSpecialForces;
            }
            else
            {
                return forces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    protected void ForceAmountButton(Location location, int amount, bool specialForces)
    {
        if (forces.ContainsKey(location))
        {
            if (specialForces)
            {
                forces[location].ChangeSpecialForces(amount);
            }
            else
            {
                forces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        StateHasChanged();
    }
}

