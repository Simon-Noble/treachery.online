<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<AmbassadorActivated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Activate your <FactionComponent Faction=@AmbassadorActivated.GetFaction(Game)/> Ambassador?</Header>
    <Body>
        @{
            switch (AmbassadorActivated.GetFaction(Game))
            {
                case Faction.Green:
                    <div>See the @AmbassadorActivated.GetVictim(Game) hand?</div>
                    break;

                case Faction.Blue:
                    <SelectFactionComponent @bind-Value=_blueFaction Values=@AmbassadorActivated.GetValidBlueFactions(Game)>
                        <Label>Activate the effect of which ambassador?</Label>
                    </SelectFactionComponent>
                    break;

                case Faction.Brown:

                    <div>Discard cards from your hand for 3 @Name(Concept.Resource) each?</div>
                    <SelectCardComponent Selected="_brownCards" Values=@AmbassadorActivated.GetValidBrownCards(Player) OnChanged="e => StateHasChanged()">
                        <Label>Select the cards you wish to discard for 3 @Skin.Current.Describe(Concept.Resource) each</Label>
                    </SelectCardComponent>
                    break;

                case Faction.Pink:
                
                    if (AmbassadorActivated.AllianceCanBeOffered(Game, Player))
                    {
                        <CheckboxComponent @bind-Value="_pinkOfferAlliance">Offer an alliance to @Name(AmbassadorActivated.GetVictim(Game))</CheckboxComponent>
                    }
                    else
                    {
                        _pinkOfferAlliance = false;
                    }

                    if (AmbassadorActivated.VidalCanBeTaken(Game)) {

                        <CheckboxComponent @bind-Value="_pinkTakeVidal">Take @Name(Game.Vidal)</CheckboxComponent>

                        if (_pinkTakeVidal && _pinkOfferAlliance && AmbassadorActivated.VidalCanBeGivenTo(Game, AmbassadorActivated.GetVictim(Game)))
                        {
                            <CheckboxComponent @bind-Value="_pinkGiveVidal">Give @Name(Game.Vidal) to @Name(AmbassadorActivated.GetVictim(Game)) if they agree to ally</CheckboxComponent>
                        }
                        else
                        {
                            _pinkGiveVidal = false;
                        }
                    }
                    else
                    {
                        _pinkTakeVidal = false;
                        _pinkGiveVidal = false;
                    }

                    break;

                case Faction.Red:
                    <div>Get 5 @Name(Concept.Resource)?</div>
                    break;

                case Faction.Yellow:

                    <div>Move a group of forces?</div>

                    var validSources = AmbassadorActivated.ValidYellowSources(Game, Player);

                    if (validSources.Any())
                    {
                        <SelectComponent OnChanged="StateHasChanged" ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="_yellowFromTerritory" Values="validSources">
                            <Label>From</Label>
                        </SelectComponent>

                        <ForceSelectionComponent Game=Game Player=Player OnChanged="StateHasChanged" Forces="_yellowForces" Locations="Player.LocationsWithAnyForcesInTerritory(_yellowFromTerritory)" InitializeToMaximum=true />

                        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="_yellowOrOrangeToLocation" Values=@AmbassadorActivated.ValidYellowTargets(Game, Player, _yellowForces)>
                            <Label>To</Label>
                        </SelectComponent>
                    }
                    else
                    {
                        _yellowFromTerritory = null;
                        _yellowForces = new();
                        _yellowOrOrangeToLocation = null;

                        <div>You don't have any forces to move.</div>
                    }
                    break;

            }
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmError=@Validation Pass="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Pink;

    private Faction _blueFaction;
    private List<TreacheryCard> _brownCards = new List<TreacheryCard>();
    private bool _pinkOfferAlliance;
    private bool _pinkTakeVidal;
    private bool _pinkGiveVidal;
    private Territory _yellowFromTerritory;
    private Location _yellowOrOrangeToLocation;
    private Dictionary<Location, Battalion> _yellowForces = new Dictionary<Location, Battalion>();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
            h.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
        h.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    protected override AmbassadorActivated ConfirmedResult => new AmbassadorActivated(Game) { 
        Initiator = Faction, 
        BlueSelectedFaction = _blueFaction,  
        BrownCards = _brownCards,
        PinkOfferAlliance = _pinkOfferAlliance, PinkGiveVidalToAlly = _pinkGiveVidal, PinkTakeVidal = _pinkTakeVidal,
        YellowOrOrangeTo = _yellowOrOrangeToLocation, YellowForceLocations = _yellowForces
    };

    protected override AmbassadorActivated PassedResult => new AmbassadorActivated(Game) { Initiator = Faction, Passed = true };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref _yellowOrOrangeToLocation, AmbassadorActivated.ValidYellowTargets(Game, Player, _yellowForces).OrderByDescending(l => l.IsStronghold).ThenBy(l => Name(l)), l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref _yellowFromTerritory, AmbassadorActivated.ValidYellowSources(Game, Player), l.Territory);
    }
}
