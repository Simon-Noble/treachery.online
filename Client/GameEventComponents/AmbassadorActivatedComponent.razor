<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<AmbassadorActivated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Activate your <FactionComponent Faction=@AmbassadorActivated.GetFaction(Game)/> Ambassador?</Header>
    <Body>

        @{
            var ambassador = AmbassadorActivated.GetFaction(Game);
            var victim = AmbassadorActivated.GetVictim(Game);

            if (ambassador == Faction.Blue)
            {
                <SelectFactionComponent @bind-Value=_actualAmbassador Values=@AmbassadorActivated.GetValidBlueFactions(Game)>
                    <Label>Activate the effect of which ambassador?</Label>
                </SelectFactionComponent>
                <br/>
            }
            else
            {
                _actualAmbassador = ambassador;
            }

            switch (_actualAmbassador)
            {
                case Faction.Green:

                    <div>See the <FactionComponent Faction=@victim Diameter=30/> hand?</div>
                    break;

                case Faction.Brown:

                    <div>Discard cards from your hand for 3 @Name(Concept.Resource) each?</div>
                    <SelectCardComponent Selected="_brownCards" Values=@AmbassadorActivated.GetValidBrownCards(Player) OnChanged="e => StateHasChanged()">
                        <Label>Select the cards you wish to discard for 3 @Skin.Current.Describe(Concept.Resource) each</Label>
                    </SelectCardComponent>
                    break;

                case Faction.Pink:
                
                    if (AmbassadorActivated.AllianceCanBeOffered(Game, Player))
                    {
                        <CheckboxComponent @bind-Value="_pinkOfferAlliance">Offer an alliance to @Name(victim)</CheckboxComponent>
                    }
                    else
                    {
                        _pinkOfferAlliance = false;
                    }

                    if (AmbassadorActivated.VidalCanBeTaken(Game)) {

                        <CheckboxComponent @bind-Value="_pinkTakeVidal">Take @Name(Game.Vidal)</CheckboxComponent>

                        if (_pinkTakeVidal && _pinkOfferAlliance && AmbassadorActivated.VidalCanBeGivenTo(Game, victim))
                        {
                            <CheckboxComponent @bind-Value="_pinkGiveVidal">Give @Name(Game.Vidal) to @Name(victim) if they agree to ally</CheckboxComponent>
                        }
                        else
                        {
                            _pinkGiveVidal = false;
                        }
                    }
                    else
                    {
                        _pinkTakeVidal = false;
                        _pinkGiveVidal = false;
                    }

                    break;

                case Faction.Red:

                    <div>Receive 5 @Name(Concept.Resource)?</div>
                    break;

                case Faction.Yellow:

                    <div>Move a group of your forces?</div>

                    var validSources = AmbassadorActivated.ValidYellowSources(Game, Player);

                    if (validSources.Any())
                    {
                        <div class="mt-1 mb-1">
                            <SelectComponent OnChanged="StateHasChanged" ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="_yellowFromTerritory" Values="validSources">
                                <Label>From</Label>
                            </SelectComponent>

                            <ForceSelectionComponent Game=Game Player=Player OnChanged="StateHasChanged" Forces="_yellowForces" Locations="Player.LocationsWithAnyForcesInTerritory(_yellowFromTerritory)" InitializeToMaximum=true />

                            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="_yellowOrOrangeToLocation" Values=@AmbassadorActivated.ValidYellowTargets(Game, Player, _yellowForces)>
                                <Label>To</Label>
                            </SelectComponent>
                        </div>
                    }
                    else
                    {
                        _yellowFromTerritory = null;
                        _yellowForces = new();
                        _yellowOrOrangeToLocation = null;

                        <div>You don't have any forces to move.</div>
                    }
                    break;

                case Faction.Black:
                    
                    if (victim == Faction.Black)
                    {
                        <div>See one of the <FactionComponent Faction=@victim Diameter=30 /> traitors?</div>
                    }
                    else if (victim == Faction.Purple)
                    {
                        <div>See one of the <FactionComponent Faction=@victim Diameter=30 /> unrevealed Face Dancers?</div>
                    }
                    else {

                        <div>See the<FactionComponent Faction=@victim Diameter=30 /> traitor?</div>
                    }
                    break;

                case Faction.Grey:

                    <div>Discard a card from your hand to draw a new one?</div>
                    <SelectCardComponent @bind-Value=@_greyCard Values=@AmbassadorActivated.GetValidGreyCards(Player)>
                        <Label>Select the card you wish to discard</Label>
                    </SelectCardComponent>
                    break;

                case Faction.White:

                    <div>Buy a treachery card for 3 @Name(Concept.Resource)?</div>
                    break;

                case Faction.Orange:

                    <div>Send up to 4 forces to any location?</div>

                    var validTargets = AmbassadorActivated.ValidOrangeTargets(Game, Player);
                    if (validTargets.Any())
                    {
                        <div class="mt-1 mb-1">
                            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="_yellowOrOrangeToLocation" Values="validTargets.OrderByDescending(l => l.IsStronghold).ThenBy(l => Name(l))">
                                <Label>To</Label>
                            </SelectComponent>
                        </div>

                        <SelectForcesComponent @bind-Value=_orangeForceAmount Min="0" Max=@AmbassadorActivated.ValidOrangeMaxForces(Player) Faction="Faction" Special="false" />
                    }
                    else
                    {
                        _yellowOrOrangeToLocation = null;
                        _orangeForceAmount = 0;

                        <div>There are no valid locations to ship to.</div>
                    }
                    break;

                case Faction.Purple:

                    <div>Revive one of your leaders or up to 4 forces for free?</div>
                    @if (AmbassadorActivated.ValidPurpleMaxAmount(Player) > 0)
                    {
                        <SelectForcesComponent @bind-Value="_purpleAmountOfForces" Min="0" Max=@AmbassadorActivated.ValidPurpleMaxAmount(Player) Faction="Faction" Special="false" />
                    }
                    else
                    {
                        _purpleAmountOfForces = 0;
                    }

                    <SelectHeroComponent Game="Game" @bind-Value=@_purpleHero Values="AmbassadorActivated.ValidPurpleHeroes(Game, Player)" Required="false" />

                    @if (_purpleHero != null && Revival.MayAssignSkill(Game, Player, _purpleHero))
                    {
                        <RadioComponent @bind-Value=_purpleAssignSkill Values="@(new bool[] {false,true})" ValueLabels="@(new string[] {"No","Yes"})">
                            <Label>Do you wish to assign a skill to this leader?</Label>
                        </RadioComponent>
                    }
                    else
                    {
                        _purpleAssignSkill = false;
                    }

                    break;
            }
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmError=@Validation Pass="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Pink;

    private Faction _actualAmbassador;
    private List<TreacheryCard> _brownCards = new List<TreacheryCard>();
    private bool _pinkOfferAlliance;
    private bool _pinkTakeVidal;
    private bool _pinkGiveVidal;
    private Territory _yellowFromTerritory;
    private Location _yellowOrOrangeToLocation;
    private Dictionary<Location, Battalion> _yellowForces = new Dictionary<Location, Battalion>();
    private TreacheryCard _greyCard;
    private int _orangeForceAmount;
    private int _purpleAmountOfForces;
    private IHero _purpleHero;
    private bool _purpleAssignSkill;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
            h.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
        h.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    protected override AmbassadorActivated ConfirmedResult => new AmbassadorActivated(Game) { 
        Initiator = Faction, 
        BlueSelectedFaction = _actualAmbassador,  
        BrownCards = _brownCards,
        PinkOfferAlliance = _pinkOfferAlliance, PinkGiveVidalToAlly = _pinkGiveVidal, PinkTakeVidal = _pinkTakeVidal,
        YellowOrOrangeTo = _yellowOrOrangeToLocation, 
        YellowForceLocations = _yellowForces,
        OrangeForceAmount = _orangeForceAmount,
        GreyCard = _greyCard,
        PurpleAmountOfForces = _purpleAmountOfForces, PurpleHero = _purpleHero, PurpleAssignSkill = _purpleAssignSkill

    };

    protected override AmbassadorActivated PassedResult => new AmbassadorActivated(Game) { Initiator = Faction, Passed = true };

    private void HandleLocationSelected(object sender, Location l)
    {
        var targets = _actualAmbassador == Faction.Yellow ? AmbassadorActivated.ValidYellowTargets(Game, Player, _yellowForces) : AmbassadorActivated.ValidOrangeTargets(Game, Player);
        SetIfValid(ref _yellowOrOrangeToLocation, targets.OrderByDescending(l => l.IsStronghold).ThenBy(l => Name(l)), l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref _yellowFromTerritory, AmbassadorActivated.ValidYellowSources(Game, Player), l.Territory);
    }
}
