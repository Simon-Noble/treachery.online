<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BrownRemoveForce>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Use @Skin.Current.Describe(BrownRemoveForce.CardToUse(Player)) to force a player to send 1 force to their reserves?</Header>

    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="location" Values="BrownRemoveForce.ValidLocations(Game)">
            <Label>From</Label>
        </SelectComponent>

        <SelectFactionComponent @bind-Value="target" Values="BrownRemoveForce.ValidFactions(Game, Player, location)" />

        <div class="mt-1">
            <SelectFromImageComponent @bind-Value="special" Values="ForceChoices" ImageURLs="ImageURLs" ImageWidth="40" Required="true" />
        </div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Remove Force" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Brown;

    protected override string Background => Skin.Current.GetImageURL(BrownRemoveForce.CardToUse(Player));

    private Location location;
    private Faction target;
    private bool special;

    protected override BrownRemoveForce ConfirmedResult => new BrownRemoveForce(Game) { Initiator = Faction, Location = location, Target = target, SpecialForce = special };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
    }

    private IEnumerable<bool> ForceChoices => BrownRemoveForce.ValidSpecialForceChoices(Game, Player, location, target);

    private IEnumerable<string> ImageURLs => BrownRemoveForce.ValidSpecialForceChoices(Game, Player, location, target).Select(special => special ? Skin.Current.GetFactionSpecialForceImageURL(target) : Skin.Current.GetFactionForceImageURL(target));

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref location, BrownRemoveForce.ValidLocations(Game), l);
    }
}
