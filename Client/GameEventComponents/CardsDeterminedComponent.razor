<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<CardsDetermined>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Select cards in play</Header>
    <Body>

        <h4>Treachery Cards</h4>
        <SelectCardComponent Selected="selectedTreacheryCards" Values="Game.TreacheryDeck.Items" OnChanged="StateHasChanged"/>

        @if(Game.WhiteCache.Any())
        {
            <h4>@Skin.Current.Describe(Faction.White) Cards</h4>
            <SelectCardComponent Selected="selectedWhiteCards" Values="Game.WhiteCache" OnChanged="StateHasChanged"/>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Cards" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private List<TreacheryCard> selectedTreacheryCards;
    private List<TreacheryCard> selectedWhiteCards;

    protected override void OnParametersSet()
    {
        selectedTreacheryCards = new List<TreacheryCard>(Game.TreacheryDeck.Items);
        selectedWhiteCards = new List<TreacheryCard>(Game.WhiteCache);
    }

    protected override CardsDetermined ConfirmedResult => new CardsDetermined(Game) { Initiator = Faction, TreacheryCards = selectedTreacheryCards, WhiteCards = selectedWhiteCards };
}
