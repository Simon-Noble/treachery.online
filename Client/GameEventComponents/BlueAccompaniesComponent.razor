<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlueAccompanies>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Accompany the latest shipment?</Header>
    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="target" Values="BlueAccompanies.ValidTargets(Game, Player)">
            <Label>To</Label>
        </SelectComponent>

        @if (BlueAccompanies.MaySendExtraAdvisor(Game, Player, target))
        {
            <CheckboxComponent @bind-Value="addExtraAdvisor">Do you wish to send one additional @Name(Player.SpecialForce)?</CheckboxComponent>
        }
        else
        {
            addExtraAdvisor = false;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Yes" ConfirmError=@Validation Pass="Pass" PassText="No" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Blue;

    private Location target;
    private bool addExtraAdvisor;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
    }

    protected override BlueAccompanies ConfirmedResult => new BlueAccompanies(Game) { Initiator = Faction, Location = target, Accompanies = true, ExtraAdvisor = addExtraAdvisor };

    protected override BlueAccompanies PassedResult => new BlueAccompanies(Game) { Initiator = Faction, Accompanies = false };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Location, Location>(ref target, BlueAccompanies.ValidTargets(Game, Player), l);
    }
}
