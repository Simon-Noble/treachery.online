<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlueAccompanies>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle">

    <Header>Accompany the latest shipment?</Header>
    <Body>

        @if (Player.ForcesInReserve > 0 && Game.Applicable(Rule.BlueAccompaniesToShipmentLocation))
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="target" Values="BlueAccompanies.ValidTargets(Game, Player)">
                <Label>To</Label>
            </SelectComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Yes" ConfirmError="@validationError" Pass="Pass" PassText="No" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Blue;

    private Location target;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
        }

        //Initialize<string, Location>(ref target, BlueAccompanies.ValidTargets(Game, Player));
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
    }

    protected override BlueAccompanies ConfirmedResult => new BlueAccompanies(Game) { Initiator = Faction, Location = target, Accompanies = true };

    protected override BlueAccompanies PassedResult => new BlueAccompanies(Game) { Initiator = Faction, Accompanies = false };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Location, Location>(ref target, BlueAccompanies.ValidTargets(Game, Player), l);
    }
}
