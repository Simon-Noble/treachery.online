<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlueAccompanies>
@implements IDisposable

<div class="card p-1 mb-2 border-danger">
    <div class="card-header">Accompany the latest shipment?</div>
    <div class="card-body">
        <div class="form-group">

            @if (h.Player.ForcesInReserve > 0 && h.Game.Applicable(Rule.BlueAccompaniesToShipmentLocation))
            {
                <SelectComponent Label="To" ButtonHint="ClickHintButton.LMB" Value="target" Values="BlueAccompanies.ValidTargets(h.Game, h.Player).Select(t => t.ToString())"/>
            }

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Yes" ConfirmError="@validationError" Pass="Pass" PassText="No"/>

        </div>
    </div>
</div>

@code {

    private string target;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
        }

        Initialize<string, Location>(ref target, BlueAccompanies.ValidTargets(h.Game, h.Player));
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
    }

    protected override BlueAccompanies ConfirmedResult
    {
        get
        {
            return new BlueAccompanies(h.Game) { Initiator = h.Faction, Location = h.Game.Map.Get(target), Accompanies = true };
        }
    }

    protected override BlueAccompanies PassedResult
    {
        get
        {
            return new BlueAccompanies(h.Game) { Initiator = h.Faction, Accompanies = false };
        }
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<string, Location>(ref target, BlueAccompanies.ValidTargets(h.Game, h.Player), l);
    }
}
