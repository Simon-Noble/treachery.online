<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<EstablishPlayers>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>@h.NextPhase()</Header>
    <Body>

        <CheckboxComponent Value="info.HostParticipates">The host (you) will participate in this game</CheckboxComponent>

        <div class="mt-2"><strong>Players:</strong> @string.Join(", ", Players)</div>

        <SelectNumberComponent Disabled="@Readonly" @bind-Value="info.MaximumNumberOfTurns" Min="1" Max="EstablishPlayers.GetMaximumNumberOfTurns()" Label="Maximum number of turns"/>

        <SelectNumberComponent Disabled="@Readonly" @bind-Value="info.MaximumNumberOfPlayers" Min="1" Max="EstablishPlayers.GetMaximumNumberOfPlayers()" Label="Maximum number of players"/>

        <SelectFactionComponent Disabled="@Readonly" Selected="info.FactionsInPlay" Values="EstablishPlayers.AvailableFactions()" OnChanged="StateHasChanged">
            <Label>Factions in play</Label>
        </SelectFactionComponent>

        <label class="mt-1 mb-0">Bots</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.Bots))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" Callback="StateHasChanged" />
        }

        <SelectComponent Disabled="@Readonly" @bind-Value="@Ruleset" Values="Rulesets">
            <Label>Rules</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="StartNewOrLoadedGame" ConfirmText="@StartButtonLabel" ConfirmError="@Validation" />

        @if (h.Host.LoadedGame == null)
        {
            <div class="text-info mt-2 mb-1">You can enable or disable individual rules below.</div>
        }

        <label class="mt-1 mb-0">Core Game, Advanced Rules</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.CoreAdvanced))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

        <label class="mt-1 mb-0">Core Game, Exceptions to Basic Rules</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.CoreBasicExceptions))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

        <label class="mt-1 mb-0">Core Game, Exceptions to Advanced Rules</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.CoreAdvancedExceptions))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

        <label class="mt-1 mb-0">Ixians &amp; Tleilaxu Expansion</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.ExpansionIxAndBtBasic))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

        <label class="mt-1 mb-0">Ixians &amp; Tleilaxu Expansion, Advanced Rules</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.ExpansionIxAndBtAdvanced))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

        <label class="mt-1 mb-0">House Rules</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.House))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private GameInfo info
    {

        get
        {
            return h.Host.GameBeingEstablished;
        }
    }

    private Ruleset Ruleset
    {
        get
        {
            return info.Ruleset;
        }
        set
        {
            info.Ruleset = value;
            RulesetChanged(value);
        }
    }

    private void RulesetChanged(Ruleset ruleset)
    {
        var botRules = info.Rules.Where(r => Game.GetRuleGroup(r) == RuleGroup.Bots).ToArray();

        info.Rules.Clear();
        info.Rules.AddRange(botRules);

        if (Game.RulesetDefinition.ContainsKey(info.Ruleset))
        {
            info.Rules.AddRange(Game.RulesetDefinition[info.Ruleset]);
        }

        StateHasChanged();
    }

    private async Task StartNewOrLoadedGame()
    {
        var skinData = Skin.Current == Skin.Dune1979 ? "" : Skin.SkinToString(Skin.Current);
        if (h.Host.LoadedGame != null)
        {
            await h.Host.LoadGameAndSkin(h.Host.LoadedGameData, h.Host.LoadedGame, skinData);
        }
        else
        {
            await base.Confirm();
            if (skinData != "")
            {
                await h.Host.LoadSkin(skinData);
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (h.Host.LoadedGame != null)
        {
            info.Ruleset = h.Host.LoadedGame.Ruleset;
            info.MaximumNumberOfPlayers = h.Host.LoadedGame.MaximumNumberOfPlayers;
            info.MaximumNumberOfTurns = h.Host.LoadedGame.MaximumNumberOfTurns;
            info.Rules = h.Host.LoadedGame.AllRules.ToList();
            info.Ruleset = h.Host.LoadedGame.Ruleset;
            info.FactionsInPlay = h.Host.LoadedGame.Players.Select(p => p.Faction).ToList();
        }
    }

    protected override EstablishPlayers ConfirmedResult
    {
        get
        {
            return new EstablishPlayers(Game)
            {
                GameName = string.Format("{0}'s Game", h.PlayerName),
                Seed = new Random().Next(),
                Players = Players,
                MaximumTurns = info.MaximumNumberOfTurns,
                MaximumNumberOfPlayers = info.MaximumNumberOfPlayers,
                ApplicableRules = info.Rules.ToArray(),
                FactionsInPlay = info.FactionsInPlay
            };
        }
    }

    private IEnumerable<string> Players
    {
        get
        {
            return h.Host.JoinedPlayers.Where(p => info.HostParticipates || p != h.PlayerName);
        }
    }

    private IEnumerable<Ruleset> Rulesets
    {
        get
        {
            return Enumerations.GetValuesExceptDefault(typeof(Ruleset), Ruleset.None);
        }
    }

    private string StyleDef(Faction f)
    {
        return string.Format("background-color:{0}", Skin.Current.GetFactionColorTransparant(f));
    }

    private bool Readonly => h.Host.LoadedGame != null;

    private string StartButtonLabel => string.Format("{0} Game!", h.Host.LoadedGame == null ? "Start" : "Continue");
}
