<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<EstablishPlayers>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType() Collapsible=false>

    <Header>Please review your game configuration</Header>
    <Body>

        <CheckboxComponent @bind-Value="info.HostParticipates">The host (you) will participate in this game</CheckboxComponent>

        <CheckboxComponent @bind-Value="info.InviteOthers">Invite single players and observers in other games to join this game</CheckboxComponent>

        <div class="mt-2"><strong>Players:</strong> @string.Join(", ", Players)</div>

        <SelectNumberComponent Disabled="@Readonly" @bind-Value="info.MaximumNumberOfTurns" Min="1" Max="EstablishPlayers.GetMaximumNumberOfTurns()" Label="Maximum number of turns:"/>

        <SelectNumberComponent Disabled="@Readonly" @bind-Value="info.MaximumNumberOfPlayers" Min="2" Max="EstablishPlayers.GetMaximumNumberOfPlayers()" Label="Maximum number of players:"/>

        <SelectFromImageComponent Disabled="@Readonly" Selected="info.FactionsInPlay" Values="EstablishPlayers.AvailableFactions()" T=Faction OnChanged=@StateHasChanged ImageWidth="40" Required=false>
            <Label>Factions in play:</Label>
        </SelectFromImageComponent>

        <label class="mt-2 mb-0">AI Players:</label>
        @foreach (var rule in Game.GetRulesInGroup(RuleGroup.Bots, Game.ExpansionLevel))
        {
            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" Callback="StateHasChanged" />
        }

        <SelectComponent Disabled="@Readonly" @bind-Value="@Ruleset" Values=@Game.GetAvailableRulesets()>
            <Label>Ruleset:</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="StartNewOrLoadedGame" ConfirmText="@StartButtonLabel" ConfirmError=@Validate />

        @if (Client.Host.LoadedGame == null)
        {
            <CheckboxComponent @bind-Value=_advancedOptions>Show advanced options</CheckboxComponent>
        }
        else
        {
            _advancedOptions = true;
        }

        @if (_advancedOptions)
        {
            foreach (var rulegroup in EstablishPlayers.AvailableRuleGroups())
            {
                if (Game.GetRulesInGroup(rulegroup, Game.ExpansionLevel).Any())
                {
                    <label class="mt-1 mb-0">@Skin.Current.Describe(rulegroup)</label>
                    @foreach (var rule in Game.GetRulesInGroup(rulegroup, Game.ExpansionLevel).OrderBy(r => Name(r)))
                    {
                        @if (IsNew(rule))
                        {
                            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules">
                                <span class="badge badge-info">new!</span>
                            </ChecklistItemComponent>
                        }
                        else
                        {
                            <ChecklistItemComponent Disabled="@Readonly" Value="@rule" Values="info.Rules" />
                        }
                    }
                }
            }
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private GameInfo info => Client.Host.GameBeingEstablished;

    private bool _advancedOptions = false;

    private Ruleset _ruleset;
    private Ruleset Ruleset
    {
        get
        {
            return _ruleset;
        }
        set
        {
            _ruleset = value;
            RulesetChanged(value);
        }
    }

    private void RulesetChanged(Ruleset ruleset)
    {
        var botRules = info.Rules.Where(r => Game.GetRuleGroup(r) == RuleGroup.Bots).ToArray();

        info.Rules.Clear();
        info.Rules.AddRange(botRules);

        if (Game.RulesetDefinition.ContainsKey(ruleset))
        {
            info.Rules.AddRange(Game.RulesetDefinition[ruleset]);
        }

        StateHasChanged();
    }

    private Message Validate => Client.Host.LoadedGame == null ? Validation : null;

    private async Task StartNewOrLoadedGame()
    {
        var skinData = Skin.Current == Skin.Default ? "" : Skin.Current.SkinToString();
        if (Client.Host.LoadedGame != null)
        {
            await Client.Host.LoadGameAndSkin(Client.Host.LoadedGameData, Client.Host.LoadedGame, skinData);
        }
        else
        {
            await base.Confirm();
            if (skinData != "")
            {
                await Client.Host.LoadSkin(skinData);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Client.Host.LoadedGame != null)
        {
            info.MaximumNumberOfPlayers = Client.Host.LoadedGame.MaximumNumberOfPlayers;
            info.MaximumNumberOfTurns = Client.Host.LoadedGame.MaximumNumberOfTurns;
            info.Rules = Client.Host.LoadedGame.AllRules.ToList();
            _ruleset = Client.Host.LoadedGame.Ruleset;
            info.FactionsInPlay = Client.Host.LoadedGame.Players.Select(p => p.Faction).ToList();
        }
    }

    protected override EstablishPlayers ConfirmedResult
    {
        get
        {
            return new EstablishPlayers(Game, Faction.None)
            {
                GameName = string.Format("{0}'s Game", Client.PlayerName),
                Seed = new Random().Next(),
                Players = Players,
                MaximumTurns = info.MaximumNumberOfTurns,
                MaximumNumberOfPlayers = info.MaximumNumberOfPlayers,
                ApplicableRules = info.Rules.ToArray(),
                FactionsInPlay = info.FactionsInPlay
            };
        }
    }

    private IEnumerable<string> Players => Client.Host.JoinedPlayers.Where(p => info.HostParticipates || p != Client.PlayerName);

    private string StyleDef(Faction f) => string.Format("background-color:{0}", Skin.Current.GetFactionColorTransparant(f, "bb"));

    private bool Readonly => Client.Host.LoadedGame != null;

    private string StartButtonLabel => Client.Host.LoadedGame == null ? "Go!" : "Continue!";

    private bool IsNew(Rule rule) => false; // rule == Rule.CustomDecks || rule == Rule.DisableEndOfGameReport;
}
