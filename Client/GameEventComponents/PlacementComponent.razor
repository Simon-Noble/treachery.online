<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PlacementEventType>
@typeparam PlacementEventType
@implements IDisposable

@code {

    protected Territory fromTerritory;
    protected Location toLocation;
    protected Dictionary<Location, Battalion> forces = new Dictionary<Location, Battalion>();
    protected bool asAdvisors = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
            h.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        }
    }

    public void Dispose()
    {
        h.OnLocationSelected -= HandleLocationSelected;
        h.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    protected void AsAdvisorsOnChange(ChangeEventArgs args)
    {
        asAdvisors = Convert.ToBoolean(args.Value);
        StateHasChanged();
    }

    protected virtual IEnumerable<Territory> ValidSources => PlacementEvent.TerritoriesWithAnyForcesNotInStorm(Game, Player);

    protected virtual IEnumerable<Location> ValidTargets
    {
        get
        {
            if (forces.Sum(kvp => kvp.Value.TotalAmountOfForces) > 0)
            {
                return PlacementEvent.ValidTargets(Game, Player, forces).OrderByDescending(l => l.IsStronghold).ThenBy(l => l.Territory.Name).ThenBy(l => l.Name);
            }
            else
            {
                return new Location[] { };
            }
        }
    }

    protected void SelectValidToLocation() {

        toLocation = ValidTargets.FirstOrDefault();
        StateHasChanged();
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref toLocation, ValidTargets, l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref fromTerritory, ValidSources, l.Territory);
    }
}
