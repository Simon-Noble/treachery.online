<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<TakeLosses>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>Please choose how to distribute a storm loss total of at least <strong>@TakeLosses.LossesToTake(Game).Amount</strong> over your forces in <strong>@Name(TakeLosses.LossesToTake(Game).Location)</strong></Header>
    <Body>

        @if (TakeLosses.ValidMaxForceAmount(Game, Player) > 0)
        {
            <SelectForcesComponent @bind-Value="forceAmount" Min="0" Max="TakeLosses.ValidMaxForceAmount(Game, Player)" Faction="Faction" Special="false" />
        }
        else
        {
            forceAmount = 0;
        }

        @if (TakeLosses.ValidMaxSpecialForceAmount(Game, Player) > 0)
        {
            <SelectForcesComponent @bind-Value="specialForceAmount" Min="0" Max="TakeLosses.ValidMaxSpecialForceAmount(Game, Player)" Faction="Faction" Special="true" />
        }
        else {

            specialForceAmount = 0;
        }

        <p>Total losses: <SimpleNumberComponent>@(forceAmount + specialForceAmount)</SimpleNumberComponent></p>

            @if (Faction == Faction.Brown && TakeLosses.CanPreventLosses(Game, Player))
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Losses" ConfirmError=@Validation Other="Other" OtherText="@(UseUselessLabel)" />
        }
        else
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Losses" ConfirmError=@Validation />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private int forceAmount;
    private int specialForceAmount;

    protected override TakeLosses ConfirmedResult => new TakeLosses(Game, Faction) { ForceAmount = forceAmount, SpecialForceAmount = specialForceAmount, UseUselessCard = false };

    protected override TakeLosses OtherResult => new TakeLosses(Game, Faction) { ForceAmount = forceAmount, SpecialForceAmount = specialForceAmount, UseUselessCard = true };

    private string UseUselessLabel => Skin.Current.Format("Use {0} to prevent losses", TakeLosses.ValidUselessCardToPreventLosses(Game, Player));
}
