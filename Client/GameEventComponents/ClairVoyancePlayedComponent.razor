<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<ClairVoyancePlayed>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle">

    <Header>Play @Support.GetCardTitle(TreacheryCardType.Clairvoyance)</Header>
    <Body>

        <SelectComponent @bind-Value="target" Values="ClairVoyancePlayed.ValidTargets(Game, Player)">
            <Label>Target Faction</Label>
        </SelectComponent>

        <SelectComponent @bind-Value="question" Values="ClairVoyancePlayed.ValidQuestions(Game, target)" ValueLabels="ClairVoyancePlayed.ValidQuestions(Game, target).Select(q => ToLabel(q))">
            <Label>Question</Label>
        </SelectComponent>

        @if (question == ClairvoyanceQuestion.CardTypeInBattle || question == ClairvoyanceQuestion.CardTypeAsWeaponInBattle || question == ClairvoyanceQuestion.CardTypeAsDefenseInBattle || question == ClairvoyanceQuestion.HasCardTypeInHand)
        {
            <SelectComponent @bind-Value="questionParameterA" Values="Voice.ValidTypes(Game).Select(v => v.ToString())" ValueLabels="Voice.ValidTypes(Game)">
                <Label>Card Type</Label>
            </SelectComponent>
        }
        else if (question == ClairvoyanceQuestion.LeaderAsFacedancer || question == ClairvoyanceQuestion.LeaderAsTraitor || question == ClairvoyanceQuestion.LeaderInBattle)
        {
            <SelectComponent @bind-Value="questionParameterA" Values="Game.TraitorsInPlay.OrderBy(l => l.Name).Select(l => l.Id).Select(v => v.ToString())" ValueLabels="Game.TraitorsInPlay.OrderBy(l => l.Name)">
                <Label>Leader</Label>
            </SelectComponent>
        }
        else if (question == ClairvoyanceQuestion.Prediction)
        {
            <SelectComponent @bind-Value="questionParameterA" Values="Game.Players.Select(p => p.Faction).Select(v => v.ToString())" ValueLabels="Game.Players.Select(p => p.Faction)">
                <Label>Faction</Label>
            </SelectComponent>
            <SelectComponent @bind-Value="questionParameterB" Values="BluePrediction.ValidTurns(Game).Select(v => v.ToString())">
                <Label>Turn</Label>
            </SelectComponent>
        }
        else if (question == ClairvoyanceQuestion.DialOfMoreThanXInBattle)
        {
            <SelectComponent @bind-Value="questionParameterA" Values="ValidDials.Select(v => v.ToString())">
                <Label>Dial</Label>
            </SelectComponent>
        }
        else if (question == ClairvoyanceQuestion.WillAttackX)
        {
            <SelectComponent @bind-Value="questionParameterA" Values="Game.Map.Territories.Select(t => t.Id).Select(v => v.ToString())" ValueLabels="Game.Map.Territories">
                <Label>Territory</Label>
            </SelectComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@validationError" />

    </Body>

</GameEventComponentLayout>

@code {

    private Faction target;
    private ClairvoyanceQuestion question;
    private string questionParameterA;
    private string questionParameterB;

    protected override void OnAfterRender(bool firstRender)
    {
        Initialize<Faction, Faction>(ref target, ClairVoyancePlayed.ValidTargets(Game, Player));
        Initialize<ClairvoyanceQuestion, ClairvoyanceQuestion>(ref question, ClairVoyancePlayed.ValidQuestions(Game, target));

        if (question == ClairvoyanceQuestion.CardTypeInBattle || question == ClairvoyanceQuestion.CardTypeAsWeaponInBattle || question == ClairvoyanceQuestion.CardTypeAsDefenseInBattle || question == ClairvoyanceQuestion.HasCardTypeInHand)
        {
            Initialize<string, string>(ref questionParameterA, Voice.ValidTypes(Game).Select(v => v.ToString()));
        }
        else if (question == ClairvoyanceQuestion.LeaderAsFacedancer || question == ClairvoyanceQuestion.LeaderAsTraitor || question == ClairvoyanceQuestion.LeaderInBattle)
        {
            Initialize<string, string>(ref questionParameterA, Game.TraitorsInPlay.OrderBy(l => l.Name).Select(l => l.Id).Select(v => v.ToString()));
        }
        else if (question == ClairvoyanceQuestion.Prediction)
        {
            Initialize<string, string>(ref questionParameterA, Game.Players.Select(p => p.Faction).Select(v => v.ToString()));
            Initialize<string, string>(ref questionParameterB, BluePrediction.ValidTurns(Game).Select(v => v.ToString()));
        }
        else if (question == ClairvoyanceQuestion.DialOfMoreThanXInBattle)
        {
            Initialize<string, string>(ref questionParameterA, ValidDials.Select(v => v.ToString()));
        }
        else if (question == ClairvoyanceQuestion.WillAttackX)
        {
            Initialize<string, string>(ref questionParameterA, Game.Map.Territories.Select(t => t.Id).Select(v => v.ToString()));
        }
    }

    protected override ClairVoyancePlayed ConfirmedResult => new ClairVoyancePlayed(Game) { Initiator = Faction, Target = target, Question = question, QuestionParameter1 = questionParameterA, QuestionParameter2 = questionParameterB };

    private IEnumerable<float> ValidDials
    {
        get
        {
            var result = new List<float>();
            for (float current = 0.0f; current <= 25; current += 0.5f)
            {
                result.Add(current);
            }

            return result;
        }
    }

    private string ToLabel(ClairvoyanceQuestion q)
    {
        return Skin.Current.Format(Skin.Current.Describe(q), "...", "...");
    }
}
