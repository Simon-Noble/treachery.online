<!--
* Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<ClairVoyancePlayed>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>@DescribeCard(TreacheryCardType.Clairvoyance)</Header>
    <Body>

        <SelectFactionComponent @bind-Value="target" Values="ClairVoyancePlayed.ValidTargets(Game, Player)">
            <Label>Target Faction</Label>
        </SelectFactionComponent>

        <SelectComponent @bind-Value="question" Values="ClairVoyancePlayed.ValidQuestions(Game, target)" ValueLabels="ClairVoyancePlayed.ValidQuestions(Game, target).Select(q => ToLabel(q))" >
            <Label>Question</Label>
        </SelectComponent>

        @switch (question)
        {
            case ClairvoyanceQuestion.CardTypeInBattle or ClairvoyanceQuestion.CardTypeAsWeaponInBattle or ClairvoyanceQuestion.CardTypeAsDefenseInBattle or ClairvoyanceQuestion.HasCardTypeInHand:
                <SelectComponent @bind-Value="questionParameterA" Values="Voice.ValidTypes(Game).Cast<object>()">
                    <Label>Card Type</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.LeaderAsFacedancer or ClairvoyanceQuestion.LeaderAsTraitor or ClairvoyanceQuestion.LeaderInBattle: 
                <SelectComponent @bind-Value="questionParameterA" 
                        Values="Game.TraitorsInPlay.OrderBy(l => Name(l)).Select(l => l.Id).Cast<object>()" 
                        ValueLabels="Game.TraitorsInPlay.Select(l => Name(l)).OrderBy(l => l)">
                    <Label>Leader</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.Prediction:
                <SelectComponent @bind-Value="questionParameterA" Values="Game.Players.Select(p => p.Faction).Cast<object>()">
                    <Label>Faction</Label>
                </SelectComponent>

                <SelectComponent @bind-Value="questionParameterB" Values="BluePrediction.ValidTurns(Game).Cast<object>()">
                    <Label>Turn</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.DialOfMoreThanXInBattle:
                <SelectComponent @bind-Value="questionParameterA" Values="ValidDials.Cast<object>()">
                    <Label>Dial</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.WillAttackX:
                <SelectComponent @bind-Value="questionParameterA" 
                        Values="Game.Map.Territories.OrderByDescending(l => l.IsStronghold).ThenBy(l => Skin.Current.Describe(l)).Select(l => l.Id).Cast<object>()" 
                        ValueLabels="Game.Map.Territories.OrderByDescending(l => l.IsStronghold).ThenBy(l => Skin.Current.Describe(l)).Select(l => Skin.Current.Describe(l))">
                    <Label>Territory</Label>
                </SelectComponent>
                break;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@Skin.Current.Format("Use {0}", TreacheryCardType.Clairvoyance)" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    private Faction target;
    private ClairvoyanceQuestion question;
    private object questionParameterA;
    private object questionParameterB;

    protected override ClairVoyancePlayed ConfirmedResult => new ClairVoyancePlayed(Game) { Initiator = Faction, Target = target, Question = question, Parameter1 = questionParameterA, Parameter2 = questionParameterB };

    private IEnumerable<float> ValidDials
    {
        get
        {
            var result = new List<float>();
            for (float current = 0.0f; current <= 25; current += 0.5f)
            {
                result.Add(current);
            }

            return result;
        }
    }

    private string ToLabel(ClairvoyanceQuestion q)
    {
        return ClairVoyancePlayed.Express(q).ToString(Skin.Current);
    }
}
