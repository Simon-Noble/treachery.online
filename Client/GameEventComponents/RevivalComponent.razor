<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Revival>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>Select forces and/or leaders to revive</Header>
    <Body>

        @if (Player.Faction != Faction.Purple && Game.IsPlaying(Faction.Purple) && Game.KilledHeroes(Player).Any())
        {
            <div class="text-info small mb-1">Note: you can only revive once during your turn. If you want to request early leader revival from @Skin.Current.Describe(Faction.Purple), you need to do that first. Then, after you agree on a price, select the leader to revive from the drop down below.</div>
        }

        @if (Player.Nexus == Faction.Red && NexusPlayed.CanUseSecretAlly(Game, Player))
        {
            <CheckboxComponent @bind-Value=@useRedSecretAlly>Use your Nexus card to get 3 additional free revivals beyond your revival limit?</CheckboxComponent>
        }
        else
        {
            useRedSecretAlly = false;
        }

        @if (Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly) > 0)
        {
            <SelectForcesComponent @bind-Value="amountOfForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly)" Faction="Faction" Special="false" />
        }
        else
        {
            amountOfForces = 0;
        }

        @if (Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly) > 0)
        {
            <SelectForcesComponent @bind-Value="amountOfSpecialForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly)" Faction="Faction" Special="true" />
        }
        else
        {
            amountOfSpecialForces = 0;
        }

        @if (Revival.ValidMaxRevivalsByRed(Game, Player) > 0)
        {
            <div class="mt-2">You may select up to <SimpleNumberComponent>@Revival.ValidMaxRevivalsByRed(Game, Player)</SimpleNumberComponent> forces to be revived by your ally:</div>

            @if (Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly) > 0)
            {
                <SelectForcesComponent @bind-Value="forcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="false" />
            }
            else
            {
                forcesPaidByRed = 0;
            }

            @if (Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly) > 0)
            {
                <SelectForcesComponent @bind-Value="specialForcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="true" />
            }
            else
            {
                specialForcesPaidByRed = 0;
            }
        }
        else
        {
            forcesPaidByRed = 0;
            specialForcesPaidByRed = 0;
        }

        <SelectFromImageComponent Game="Game" @bind-Value="hero" Values="Revival.ValidRevivalHeroes(Game, Player)" Required="false" ImageWidth="80"/>

        @if (hero != null && Revival.MayAssignSkill(Game, Player, hero))
        {
            <RadioComponent @bind-Value="assignSkill" Values="@(new bool[] {false,true})" ValueLabels="@(new string[] {"No","Yes"})">
                <Label>Do you wish to assign a skill to this leader?</Label>
            </RadioComponent>
        }
        else
        {
            assignSkill = false;
        }

        @if (Revival.MaySelectLocationForRevivedForces(Game, Player, amountOfForces + forcesPaidByRed + specialForcesPaidByRed, amountOfSpecialForces, useRedSecretAlly))
        {
            var forcename = Faction == Faction.Yellow ? Skin.Current.SpecialForceName_STR[Faction.Yellow] : Skin.Current.ForceName_STR[Faction.Purple];

            <CheckboxComponent @bind-Value="reviveToLocation">Place revived @forcename on the planet?</CheckboxComponent>

            if (reviveToLocation)
            {
                <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="location" Values=@Revival.ValidRevivedForceLocations(Game, Player)>
                    <Label>Place them where?</Label>
                </SelectComponent>
            }
            else
            {
                location = null;
            }
        }
        else
        {
            location = null;
        }

        <div class="mt-1 text-end">Revival cost for you: <SimpleNumberComponent>@(CostOfRevival.TotalCostForPlayer)</SimpleNumberComponent></div>

        @if (Player.Ally == Faction.Red)
        {
            <div class="mt-1 text-end">Revival cost for @Skin.Current.Describe(Faction.Red): <SimpleNumberComponent>@(CostOfRevival.CostForEmperor)</SimpleNumberComponent></div>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Revive" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    private int amountOfForces;
    private int amountOfSpecialForces;
    private int forcesPaidByRed;
    private int specialForcesPaidByRed;
    private IHero hero;
    private bool assignSkill;
    private bool useRedSecretAlly;
    private Location location;
    private bool reviveToLocation;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
    }

    protected override Revival ConfirmedResult => new Revival(Game) { 
        Initiator = Faction, 
        AmountOfForces = amountOfForces, 
        AmountOfSpecialForces = amountOfSpecialForces, 
        ExtraForcesPaidByRed = forcesPaidByRed, 
        ExtraSpecialForcesPaidByRed = specialForcesPaidByRed, 
        Hero = hero, 
        AssignSkill = assignSkill,
        Location = location,
        UsesRedSecretAlly = useRedSecretAlly
    };

    private RevivalCost CostOfRevival => Revival.DetermineCost(Game, Player, hero, amountOfForces, amountOfSpecialForces, forcesPaidByRed, specialForcesPaidByRed, useRedSecretAlly);

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Location, Location>(ref location, BlueAccompanies.ValidTargets(Game, Player), l);
    }
}
