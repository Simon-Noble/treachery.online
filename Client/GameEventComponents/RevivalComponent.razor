<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Revival>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Select forces and/or leaders to revive</Header>
    <Body>

        @if (Player.Faction != Faction.Purple && Game.IsPlaying(Faction.Purple))
        {
            <div class="text-info small mb-1">Note: you can only revive once during your turn. If you want to request early leader revival from @Skin.Current.Describe(Faction.Purple), you need to do that first. Then, after you agree on a price, select the leader to revive from the drop down below.</div>
        }

        @if (Revival.ValidMaxRevivals(Game, Player, false) > 0)
        {
            <SelectForcesComponent @bind-Value="amountOfForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, false)" Faction="Faction" Special="false" />
        }
        else
        {
            amountOfForces = 0;
        }

        @if (Revival.ValidMaxRevivals(Game, Player, true) > 0)
        {
            <SelectForcesComponent @bind-Value="amountOfSpecialForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, true)" Faction="Faction" Special="true" />
        }
        else
        {
            amountOfSpecialForces = 0;
        }

        @if (Revival.ValidMaxRevivalsByRed(Game, Player) > 0)
        {
            <div class="mt-2">You may select up to <span class="badge bg-primary rounded-pill">@Revival.ValidMaxRevivalsByRed(Game, Player)</span> forces to be revived by your ally:</div>

            @if (Revival.ValidMaxRevivals(Game, Player, false) > 0)
            {
                <SelectForcesComponent @bind-Value="forcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="false" />
            }
            else
            {
                forcesPaidByRed = 0;
            }

            @if (Revival.ValidMaxRevivals(Game, Player, true) > 0)
            {
                <SelectForcesComponent @bind-Value="specialForcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="true" />
            }
            else
            {
                specialForcesPaidByRed = 0;
            }
        }
        else
        {
            forcesPaidByRed = 0;
            specialForcesPaidByRed = 0;
        }

        <SelectHeroComponent Game="Game" @bind-Value="hero" Values="Revival.ValidRevivalHeroes(Game, Player)" Required="false" />

        @if (hero != null && Revival.MayAssignSkill(Game, Player, hero))
        {
            <RadioComponent @bind-Value="assignSkill" Values="@(new bool[] {false,true})" ValueLabels="@(new string[] {"No","Yes"})">
                <Label>Do you wish to assign a skill to this leader?</Label>
            </RadioComponent>
        }
        else
        {
            assignSkill = false;
        }

        <div class="mt-1 text-end">Revival cost for you: <span class="badge bg-primary rounded-pill">@(CostOfRevival.TotalCostForPlayer)</span></div>

        @if (Player.Ally == Faction.Red)
        {
            <div class="mt-1 text-end">Revival cost for @Skin.Current.Describe(Faction.Red): <span class="badge bg-primary rounded-pill">@(CostOfRevival.CostForEmperor)</span></div>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Revive" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    private int amountOfForces;
    private int amountOfSpecialForces;
    private int forcesPaidByRed;
    private int specialForcesPaidByRed;
    private IHero hero;
    private bool assignSkill;

    protected override Revival ConfirmedResult => new Revival(Game) { Initiator = Faction, AmountOfForces = amountOfForces, AmountOfSpecialForces = amountOfSpecialForces, ExtraForcesPaidByRed = forcesPaidByRed, ExtraSpecialForcesPaidByRed = specialForcesPaidByRed, Hero = hero, AssignSkill = assignSkill };

    private RevivalCost CostOfRevival => Revival.DetermineCost(Game, Player, hero, amountOfForces, amountOfSpecialForces, forcesPaidByRed, specialForcesPaidByRed);
}
