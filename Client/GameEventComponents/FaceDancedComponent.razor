<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<FaceDanced>
@implements IDisposable

@if (Game.Version > 150) {

    <GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" CollapsedType=GetType()>

        <Header>Choose which forces to replace by your own</Header>
        <Body>

            <div class="mb-2">You may place up to <strong>@FaceDanced.MaximumNumberOfForces(Game, Player)</strong> forces in <strong>@Name(Game.CurrentBattle.Territory)</strong> from your reserves and/or from anywhere on the planet.</div>

            <SelectForcesComponent @bind-Value="forcesFromReserve" Min="0" Max="Player.ForcesInReserve" Faction="Faction" Special="false" Label="From reserves:" />

            @if (FaceDanced.ValidSourceLocations(Game, Player).Any())
            {
                <label class="mt-2 mb-0">From somewhere on the planet:</label>
                <ForceSelectionComponent Game=Game Player=Player OnChanged="@StateHasChanged" Forces="forces" Locations="FaceDanced.ValidSourceLocations(Game, Player)" MaySelectFromStorm="true" AlwaysShowLocation="true" AllowMultipleTerritories="true" />
            }

            <label class="mt-2 mb-0">Select where to put your replacements:</label>
            <ForceSelectionComponent Game=Game Player=Player OnChanged="@StateHasChanged" Forces="targetForces" Locations="FaceDanced.ValidTargetLocations(Game)" MaySelectFromStorm="true" AlwaysShowLocation="true" FullLocationName="false" FixedMaxForces="@FaceDanced.MaximumNumberOfForces(Game, Player)" />

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Reveal & Place Forces" ConfirmError=@Validation />

        </Body>

    </GameEventComponentLayout>

}
else {

    <GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" CollapsedType=GetType()>

        <Header>Reveal a Face Dancer?</Header>
        <Body>

        @if (FaceDanced.MayCallFaceDancer(Game, Player))
        {
            <div class="mb-2">If you decide to reveal, you may place up to <strong>@FaceDanced.MaximumNumberOfForces(Game, Player)</strong> forces in <strong>@Name(Game.CurrentBattle.Territory)</strong> from your reserves and/or from anywhere on the planet.</div>

            <SelectForcesComponent @bind-Value="forcesFromReserve" Min="0" Max="Player.ForcesInReserve" Faction="Faction" Special="false" Label="From reserves:"/>

            @if (FaceDanced.ValidSourceLocations(Game, Player).Any())
            {
                <label class="mt-2 mb-0">From somewhere on the planet:</label>
                <ForceSelectionComponent Game=Game Player=Player OnChanged="@StateHasChanged" Forces="forces" Locations="FaceDanced.ValidSourceLocations(Game, Player)" MaySelectFromStorm="true" AlwaysShowLocation="true" AllowMultipleTerritories="true"/>
            }

            <label class="mt-2 mb-0">Select where to put your replacements:</label>
            <ForceSelectionComponent Game=Game Player=Player OnChanged="@StateHasChanged" Forces="targetForces" Locations="FaceDanced.ValidTargetLocations(Game)" MaySelectFromStorm="true" AlwaysShowLocation="true" FullLocationName="false" FixedMaxForces="@FaceDanced.MaximumNumberOfForces(Game, Player)" />

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Reveal & Place Forces" ConfirmError=@Validation Pass="Pass" PassText="Pass" />
        }
        else
        {
            <ButtonRowComponent Pass="Pass" PassText="Pass" />
        }

        </Body>

    </GameEventComponentLayout>
}

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Purple;

    private Dictionary<Location, Battalion> forces = new Dictionary<Location, Battalion>();
    private Dictionary<Location, Battalion> targetForces = new Dictionary<Location, Battalion>();
    private int forcesFromReserve;

    protected override FaceDanced ConfirmedResult => Game.Version > 150 ?
        new FaceDanced(Game) { Initiator = Faction, ForceLocations = forces, ForcesFromReserve = forcesFromReserve, TargetForceLocations = targetForces } :
        new FaceDanced(Game) { Initiator = Faction, FaceDancerCalled = true, ForceLocations = forces, ForcesFromReserve = forcesFromReserve, TargetForceLocations = targetForces };

    protected override FaceDanced PassedResult => new FaceDanced(Game) { Initiator = Faction, FaceDancerCalled = false };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleAddForce;
            h.OnLocationSelectedWithShift += HandleRemoveForce;
            h.OnLocationSelectedWithCtrlOrAlt += HandleAddTargetForce;
            h.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleRemoveTargetForce;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleAddForce;
        h.OnLocationSelectedWithShift -= HandleRemoveForce;
        h.OnLocationSelectedWithCtrlOrAlt -= HandleAddTargetForce;
        h.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleRemoveTargetForce;
    }

    private void HandleAddForce(object sender, Location l)
    {
        if (FaceDanced.ValidSourceLocations(Game, Player).Contains(l))
        {
            ForceAmountButton(l, 1, false);
        }
    }

    private void HandleAddTargetForce(object sender, Location l)
    {
        if (FaceDanced.ValidTargetLocations(Game).Contains(l))
        {
            TargetForceAmountButton(l, 1, false);
        }
    }

    private void HandleRemoveForce(object sender, Location l)
    {
        if (FaceDanced.ValidSourceLocations(Game, Player).Contains(l))
        {
            ForceAmountButton(l, -1, false);
        }
    }

    private void HandleRemoveTargetForce(object sender, Location l)
    {
        if (FaceDanced.ValidTargetLocations(Game).Contains(l))
        {
            TargetForceAmountButton(l, -1, false);
        }
    }

    protected int Forces(Location l, bool special)
    {
        if (forces.ContainsKey(l))
        {
            if (special)
            {
                return forces[l].AmountOfSpecialForces;
            }
            else
            {
                return forces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    protected void ForceAmountButton(Location location, int amount, bool specialForces)
    {
        if (forces.ContainsKey(location))
        {
            if (specialForces)
            {
                forces[location].ChangeSpecialForces(amount);
            }
            else
            {
                forces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        StateHasChanged();
    }

    protected int TargetForces(Location l, bool special)
    {
        if (targetForces.ContainsKey(l))
        {
            if (special)
            {
                return targetForces[l].AmountOfSpecialForces;
            }
            else
            {
                return targetForces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    protected void TargetForceAmountButton(Location location, int amount, bool specialForces)
    {
        if (targetForces.ContainsKey(location))
        {
            if (specialForces)
            {
                targetForces[location].ChangeSpecialForces(amount);
            }
            else
            {
                targetForces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                targetForces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                targetForces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        StateHasChanged();
    }
}
