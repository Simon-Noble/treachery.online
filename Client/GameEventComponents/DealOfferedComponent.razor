<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<DealOffered>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Offer a Deal</Header>
    <Body>

        <SelectFactionComponent Selected="to" Values="Game.ValidTargets(Player)" OnChanged="StateHasChanged">
            <Label>Offer to whom (select none to offer to all)</Label>
        </SelectFactionComponent>

        <SelectResourcesComponent @bind-Value="price" Min="0" Max="50" />

        <SelectComponent @bind-Value="type" Values="DealOffered.GetHumanDealTypes(Game, Player)">
            <Label>Type of Deal</Label>
        </SelectComponent>

        <SelectComponent @bind-Value="until" Values="ApplicableEndPhases">
            <Label>Until</Label>
        </SelectComponent>

        <textarea class="form-control mt-1" rows="5" @bind="text" maxlength="512" placeholder="Deal description" />

        <ButtonRowComponent Confirm="ConfirmOffer" ConfirmText="Offer Deal" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    private List<Faction> to = new List<Faction>();
    private int price;
    private DealType type;
    private string text = "";
    private Phase until;

    protected override void OnInitialized()
    {
        Collapsed = true;
    }

    private void OnChangeFactions()
    {
        StateHasChanged();
    }

    protected override DealOffered ConfirmedResult => new DealOffered(Game) { Initiator = Faction, To = to.Count >= Game.Players.Count - 1 ? Array.Empty<Faction>() : to.ToArray(), Price = price, Type = type, Text = text, EndPhase = until };

    private async Task ConfirmOffer()
    {
        await base.Confirm();
        text = "";
    }

    private IEnumerable<Phase> ApplicableEndPhases
    {
        get
        {
            return type switch
            {
                DealType.ShareStormPrescience => new Phase[] { Phase.TurnConcluded },
                DealType.ShareBiddingPrescience => new Phase[] { Phase.Bidding, Phase.BiddingReport },
                DealType.ShareResourceDeckPrescience => new Phase[] { Phase.TurnConcluded },
                _ => new Phase[] { Phase.TurnConcluded, Phase.GameEnded }
            };
        }
    }
}
