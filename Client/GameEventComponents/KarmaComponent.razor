<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Karma>

<div class="card p-1 mb-2" style="@BackgroundStyle">
    <div class="card-header" style="@HeaderStyle">
        Use @Skin.Current.Describe(TreacheryCardType.Karma) to prevent a faction from using one of their advantages
        <CollapseButton @bind-Collapsed="Collapsed" />
    </div>
    @if (!Collapsed)
    {
        <div class="card-body" style="@BodyStyle">

            <label class="mb-0" for="karamaCard">Select a card to play</label>
            <select class="custom-select" @bind="cardId" id="karamaCard">
                @foreach (var v in Karma.ValidKarmaCards(h.Game, h.Player))
                {
                    <option value="@v.Id">@v</option>
                }
            </select>

            <label class="mb-0" for="karamaCard">Select an advantage to prevent</label> <InfoComponent Contents="@InfoMessage" />
            <select class="custom-select" @bind="prevented" id="karamaPrevented">
                @foreach (var v in Karma.ValidFactionAdvantages(h.Game, h.Player))
                {
                    <option value="@v">@Skin.Current.Describe(v)</option>
                }
            </select>

            <button class="btn btn-primary mt-1" @onclick="Confirm" disabled=@(!Valid)>Ok</button>
            <div class="text-danger bg-dark">@validationError</div>

        </div>
    }
</div>

@code {

    private int cardId;
    private FactionAdvantage prevented;

    protected override void OnAfterRender(bool firstRender)
    {
        Initialize<int, TreacheryCard>(ref cardId, Karma.ValidKarmaCards(h.Game, h.Player));
        Initialize<FactionAdvantage, FactionAdvantage>(ref prevented, Karma.ValidFactionAdvantages(h.Game, h.Player));
    }

    protected override Karma ConfirmedResult
    {

        get
        {
            return new Karma(h.Game) { Initiator = h.Faction, Card = TreacheryCardManager.Lookup.Find(cardId), Prevented = prevented };
        }
    }

    private string InfoMessage
    {
        get
        {
            return "Prevention of an advantages with a * cannot be done automatically and must be done verbally between players. This might require an undo-action by the host after the action you want to prevent has occured.";
        }
    }
}
