<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<RedBidSupport>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>How much of your @Skin.Current.Describe(Concept.Resource) may non-allied factions use for bidding?</Header>
    <Body>

        @foreach (var faction in amounts.Keys)
        {
            <SelectResourcesFromFactionComponent @bind-Value="amounts[faction]" Min="0" Max="Player.Resources" Faction="faction" OnChanged="e => StateHasChanged()" />
        }

        <div class="text-info small">Your contributions to opponent bids will flow back to you <i>at the end</i> of the bidding phase.</div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Support" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Red;

    private Dictionary<Faction, int> amounts = new Dictionary<Faction, int>();

    protected override void OnInitialized()
    {
        foreach (var f in ValidTargets)
        {
            amounts.Add(f, Game.SpiceForBidsRedCanPay(f));
        }
    }

    protected override RedBidSupport ConfirmedResult => new RedBidSupport(Game) { Initiator = Faction, Amounts = amounts };

    private IEnumerable<Faction> ValidTargets => Game.PlayersOtherThan(Player).Where(f => f != Player.Ally);
}
