<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits PlacementComponent<Caravan>

<div class="card p-1 mb-2 border-danger" style="@BackgroundStyle">
    <div class="card-header" style="@HeaderStyle">Perform a @Skin.Current.Describe(TreacheryCardType.Caravan)?</div>
    <div class="card-body" style="@BodyStyle">

        @if (ValidSources.Any())
        {
            var locations = h.Player.LocationsWithAnyForcesInTerritory(h.Game.Map.TerritoryLookup.Find(fromTerritoryId)).ToList();

            <label for="caravanFrom">From <kbd>ctrl+click</kbd></label>
            <select class="custom-select" @bind="fromTerritoryId" id="caravanFrom">
                @foreach (var t in ValidSources)
                {
                    <option value="@t.Id">@t.Name</option>
                }
            </select>

            <table class="table table-striped table-sm m-0 w-auto">
                <thead>
                    <tr class="small">
                        @if (locations.Count > 1)
                        {
                            <td>Location</td>
                        }

                        <td colspan="3">@h.Player.ForceName</td>
                        @if (h.Player.HasSpecialForcesToMove)
                        {
                            <td colspan="3">@h.Player.SpecialForceName</td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var l in locations)
                    {
                        <tr class="small">
                            @if (locations.Count > 1)
                            {
                                <td>@l.Name</td>
                            }

                            @if (l.Sector != h.Game.SectorInStorm)
                            {
                                <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, -1, false))" disabled="@(Forces(l, false) == 0)" class="btn btn-primary btn-sm">-</button></td>
                                <td>@Forces(l, false)</td>
                                <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, 1, false))" disabled="@(Forces(l, false) == h.Player.ForcesIn(l))" class="btn btn-primary btn-sm">+</button></td>
                            }
                            else
                            {
                                <td colspan="3" class="font-italic text-danger">cannot move from storm</td>
                            }

                            @if (h.Player.HasSpecialForcesToMove)
                            {
                                @if (l.Sector != h.Game.SectorInStorm)
                                {
                                    <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, -1, true))" disabled="@(Forces(l, true) == 0)" class="btn btn-primary btn-sm">-</button></td>
                                    <td>@Forces(l, true)</td>
                                    <td class="p-0"><button type="button" @onclick="(e => ForceAmountButton(l, 1, true))" disabled="@(Forces(l, true) == h.Player.SpecialForcesIn(l))" class="btn btn-primary btn-sm">+</button></td>
                                }
                                else
                                {
                                    <td colspan="3" class="font-italic text-danger">cannot move from storm</td>
                                }
                            }
                        </tr>
                    }

                </tbody>
            </table>

            <label for="caravanTo">To <kbd>click</kbd></label>
            <select class="custom-select" @bind="toLocationId" id="caravanTo">
                @foreach (var f in ValidTargets)
                {
                    <option value="@h.Game.Map.LocationLookup.GetId(f)">@f.ToString()</option>
                }
            </select>

            @if (h.Game.ContainsConflictingAlly(h.Player, h.Game.Map.LocationLookup.Find(toLocationId)))
            {
                <div class="text-danger bg-dark">Note: any of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
            }

            @if (h.Faction == Faction.Blue)
            {
                <div>Move as fighters or advisors?</div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="AsAdvisorsOnChange" type="radio" id="caravanAsAdvisorsNo" value="false" checked="@(!asAdvisors)">
                    <label class="custom-control-label" for="caravanAsAdvisorsNo">Fighters</label>
                </div>
                <div class="custom-control custom-radio">
                    <input class="custom-control-input" @onchange="AsAdvisorsOnChange" type="radio" id="caravanAsAdvisorsYes" value="true" checked="@(asAdvisors)">
                    <label class="custom-control-label" for="caravanAsAdvisorsYes">Advisors</label>
                </div>
            }

            <button class="btn btn-primary mt-1" @onclick="Confirm" disabled=@(!Valid)>Ok</button>
            <div class="text-danger bg-dark">@validationError</div>
        }
    </div>
</div>

@code {

    override protected Caravan ConfirmedResult
    {
        get
        {
            return new Caravan(h.Game) { Initiator = h.Faction, ForceLocations = forces, To = h.Game.Map.LocationLookup.Find(toLocationId), AsAdvisors = asAdvisors, Passed = false };
        }
    }
}
