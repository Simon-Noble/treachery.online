<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PerformYellowSetup>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle">

    <Header>Distribute @(10 - forces.Sum(fl => fl.Value.AmountOfForces + fl.Value.AmountOfSpecialForces)) forces on @Game.Map.SietchTabr.ToString(), @Game.Map.FalseWallSouth.ToString(), and @Game.Map.FalseWallWest.ToString().</Header>
    <Body>

        <ForceSelectionComponent h="h" OnChanged="@StateHasChanged" Forces="forces" Locations="ValidLocations" MaySelectFromStorm="true" AlwaysShowLocation="true" FullLocationName="true" FixedMaxForces="10" FixedMaxSpecialForces="0" />

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@Validation" />

        <p>You may use the planet map:</p>
        <div><ClickHintComponent Button="ClickHintButton.LMB" /> and <ClickHintComponent Button="ClickHintButton.LMB" Modifier="ClickHintModifier.SHIFT" /> to add or remove @Player.ForceName.</div>
        @if (Player.HasSpecialForces)
        {
            <div><ClickHintComponent Button="ClickHintButton.LMB" Modifier="ClickHintModifier.CTRL" /> and <ClickHintComponent Button="ClickHintButton.LMB" Modifier="ClickHintModifier.CTRL | ClickHintModifier.SHIFT" /> to add or remove @Player.SpecialForceName.</div>
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Yellow;

    private Dictionary<Location, Battalion> forces = new Dictionary<Location, Battalion>();

    protected override PerformYellowSetup ConfirmedResult => new PerformYellowSetup(Game) { Initiator = Faction, ForceLocations = forces };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleAddForce;
            MapDrawer.OnLocationSelectedWithShift += HandleRemoveForce;

            if (Player.HasSpecialForces)
            {
                MapDrawer.OnLocationSelectedWithCtrlOrAlt += HandleAddSpecialForce;
                MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleRemoveSpecialForce;
            }
        }
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleAddForce;
        MapDrawer.OnLocationSelectedWithShift -= HandleRemoveForce;

        if (Player.HasSpecialForces)
        {
            MapDrawer.OnLocationSelectedWithCtrlOrAlt -= HandleAddSpecialForce;
            MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleRemoveSpecialForce;
        }
    }

    private void HandleAddForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, false);
        }
    }

    private void HandleAddSpecialForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, 1, true);
        }
    }

    private void HandleRemoveForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, false);
        }
    }

    private void HandleRemoveSpecialForce(object sender, Location l)
    {
        if (ValidLocations.Contains(l))
        {
            ForceAmountButton(l, -1, true);
        }
    }

    private IEnumerable<Location> ValidLocations
    {
        get
        {
            var result = new List<Location>();
            result.Add(Game.Map.SietchTabr);
            result.AddRange(Game.Map.FalseWallSouth.Locations);
            result.AddRange(Game.Map.FalseWallWest.Locations);
            return result;
        }
    }

    protected int Forces(Location l, bool special)
    {
        if (forces.ContainsKey(l))
        {
            if (special)
            {
                return forces[l].AmountOfSpecialForces;
            }
            else
            {
                return forces[l].AmountOfForces;
            }
        }
        else
        {
            return 0;
        }
    }

    protected void ForceAmountButton(Location location, int amount, bool specialForces)
    {
        if (forces.ContainsKey(location))
        {
            if (specialForces)
            {
                forces[location].ChangeSpecialForces(amount);
            }
            else
            {
                forces[location].ChangeForces(amount);
            }
        }
        else if (amount > 0)
        {
            if (specialForces)
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = amount, AmountOfForces = 0 });
            }
            else
            {
                forces.Add(location, new Battalion() { AmountOfSpecialForces = 0, AmountOfForces = amount });
            }
        }

        StateHasChanged();
    }
}
