<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Battle>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle">

    <Header>Plan your battle against @Skin.Current.Describe(Opponent) in @Game.CurrentBattle.Territory.Name.</Header>

    <Body>

        <div class="text-warning">@(h.IAm(Game.CurrentBattle.Aggressor) ? "You are aggressor." : Skin.Current.Format("Aggressor: {0}.", Game.CurrentBattle.Aggressor))</div>

        @if (Game.CurrentVoice != null)
        {
            @if (Faction == Faction.Blue || Player.Ally == Faction.Blue)
            {
                <div class="text-success">Your opponent @(Game.CurrentVoice.Must? "must use" : "may not use") @Skin.Current.Describe(Game.CurrentVoice.Type).</div>
            }
            else
            {
                <div class="text-warning">You @(Game.CurrentVoice.Must? "must use" : "may not use") @Skin.Current.Describe(Game.CurrentVoice.Type).</div>
            }
        }

        @if (Faction == Faction.Green || Player.Ally == Faction.Green)
        {
            var opponentBattlePlan = Game.CurrentBattle.Initiator == Faction ? Game.DefenderBattleAction : Game.AggressorBattleAction;
            if (Game.GreenKarma)
            {
                if (opponentBattlePlan != null)
                {
                    <div class="text-success">Enemy @PrescienceAspect.Dial: @GetTextForAspect(PrescienceAspect.Dial, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Weapon, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Weapon: @GetTextForAspect(PrescienceAspect.Weapon, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Defense, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Defense: @GetTextForAspect(PrescienceAspect.Defense, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Leader, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Leader: @GetTextForAspect(PrescienceAspect.Leader, opponentBattlePlan).</div>
                }
                else
                {
                    <div class="text-success">Enemy battle plan will be visible as soon as they confirm it.</div>
                }
            }
            else if (Game.CurrentPrescience != null)
            {
                if (opponentBattlePlan != null)
                {

                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(Game.CurrentPrescience.Aspect, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @Game.CurrentPrescience.Aspect: @GetTextForAspect(Game.CurrentPrescience.Aspect, opponentBattlePlan).</div>
                }
                else
                {
                    <div class="text-success">Enemy @Game.CurrentPrescience.Aspect will be visible as soon as they confirm their battle plan.</div>
                }
            }
        }
        <SelectForcesComponent @bind-Value="forces" Min="0" Max="Battle.MaxForces(Game, Player, false)" Faction="Faction" Special="false" />

        @if (Battle.MaxForces(Game, Player, true) > 0)
        {
            <SelectForcesComponent @bind-Value="specialForces" Min="0" Max="Battle.MaxForces(Game, Player, true)" Faction="Faction" Special="true" />
        }

        @if (Battle.MustPayForForcesInBattle(Game, Player))
        {
            <SelectResourcesComponent @bind-Value="resources" Min="0" Max="Math.Min(Player.Resources, forces + specialForces)" />
        }

        <SelectHeroComponent @bind-Value="hero" Values="Battle.ValidBattleHeroes(Game, Player)">
            <Label>Hero</Label>
        </SelectHeroComponent>

        <SelectCardComponent @bind-Value="weapon" Values="Weapons" Required="false">
            <Label>Weapon</Label>
        </SelectCardComponent>

        <SelectCardComponent @bind-Value="defense" Values="Defenses" Required="false">
            <Label>Defense</Label>
        </SelectCardComponent>

        @if (Faction == Faction.Green && Game.Applicable(Rule.GreenMessiah))
        {
            <RadioComponent @bind-Value="messiah" Values="@(new bool[] {false,true})" ValueLabels="@(new string[] {"No","Yes"})">
                <Label>Should the @Skin.Current.Describe(Concept.Messiah) join the fight?</Label>
            </RadioComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Battle!" ConfirmError="@Validation" />

        <div class="text-info small">Toggle <img src="@Skin.Current.Eye_URL" /> on the map to show/hide the battle wheel.</div>

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private const string NONE = "None";

    private int forces;
    private int specialForces;
    private int resources;
    private IHero hero;
    private bool messiah = false;
    private TreacheryCard defense;
    private TreacheryCard weapon;

    /*protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await DrawIfNeeded();
    }
    
    private int lastforces;
    private int lastspecialForces;
    private int lastResources;
    private IHero lasthero;
    private bool lastmessiah = false;
    private TreacheryCard lastdefense;
    private TreacheryCard lastweapon;

    private void DrawIfNeeded()
    {
        if (
            forces != lastforces ||
            specialForces != lastspecialForces ||
            resources != lastResources ||
            hero != lasthero ||
            messiah != lastmessiah ||
            defense != lastdefense ||
            weapon != lastweapon)
        {
            lastforces = forces;
            lastspecialForces = specialForces;
            lastResources = resources;
            lasthero = hero;
            lastmessiah = messiah;
            lastdefense = defense;
            lastweapon = weapon;

            //h._battleUnderConstruction = (Battle)ConfirmedResult;
            //await MapDrawer.Draw();
        }
    }
    */

    protected override void OnParametersSet()
    {
        if (h.RevisedPlan != null)
        {
            forces = h.RevisedPlan.Forces + h.RevisedPlan.ForcesAtHalfStrength;
            specialForces = h.RevisedPlan.SpecialForces + h.RevisedPlan.SpecialForcesAtHalfStrength;
            resources = h.RevisedPlan.Cost(Game);
            hero = h.RevisedPlan.Hero;
            messiah = h.RevisedPlan.Messiah;
            defense = h.RevisedPlan.Defense;
            weapon = h.RevisedPlan.Weapon;
            h.RevisedPlan = null;
        }
    }

    protected override Battle ConfirmedResult
    {
        get
        {
            Battle.DetermineForces(Game, Player, forces, specialForces, resources, out int forcesFull, out int forcesHalf, out int specialForcesFull, out int specialForcesHalf);

            return new Battle(Game)
            {
                Initiator = Faction,
                Defense = defense,
                Forces = forcesFull,
                ForcesAtHalfStrength = forcesHalf,
                Hero = hero,
                Messiah = messiah,
                SpecialForces = specialForcesFull,
                SpecialForcesAtHalfStrength = specialForcesHalf,
                Weapon = weapon
            };
        }
    }

    private void OnChange(ChangeEventArgs args)
    {
        messiah = Convert.ToBoolean(args.Value);
        StateHasChanged();
    }

    private Faction Opponent
    {
        get
        {
            if (Game.CurrentBattle != null)
            {
                if (Game.CurrentBattle.Initiator == Faction)
                {
                    return Game.CurrentBattle.Target;
                }
                else
                {
                    return Game.CurrentBattle.Initiator;
                }
            }
            else
            {
                return Faction.None;
            }
        }
    }

    private string GetTextForAspect(PrescienceAspect aspect, Battle plan)
    {
        switch (aspect)
        {
            case PrescienceAspect.Defense: return plan.Defense == null ? "None" : Skin.Current.Describe(plan.Defense);
            case PrescienceAspect.Weapon: return plan.Weapon == null ? "None" : Skin.Current.Describe(plan.Weapon);
            case PrescienceAspect.Dial: return plan.Dial(Game, Faction).ToString();
            case PrescienceAspect.Leader: return plan.Hero == null ? "None" : Skin.Current.Describe(plan.Hero);
        }

        return "?";
    }

    private string GetPopupForAspect(PrescienceAspect aspect, Battle plan)
    {
        switch (aspect)
        {
            case PrescienceAspect.Defense: return plan.Defense == null ? "" : Support.GetTreacheryCardHoverHTML(plan.Defense);
            case PrescienceAspect.Weapon: return plan.Weapon == null ? "" : Support.GetTreacheryCardHoverHTML(plan.Weapon);
            case PrescienceAspect.Dial: return "";
            case PrescienceAspect.Leader: return plan.Hero == null ? "" : Support.GetHeroHoverHTML(plan.Hero);
        }

        return "?";
    }

    private IEnumerable<TreacheryCard> Weapons => Battle.ValidWeapons(Game, Player, defense).OrderBy(c => c);

    private IEnumerable<TreacheryCard> Defenses => Battle.ValidDefenses(Game, Player, weapon).OrderBy(c => c);
}
