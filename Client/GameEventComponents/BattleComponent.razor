<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Battle>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>Plan your battle against @Skin.Current.Describe(Opponent) in @Game.CurrentBattle.Territory.Name.</Header>

    <Body>

        <div class="text-warning">@(h.IAm(Game.CurrentBattle.EffectiveAggressor) ? "You are aggressor." : Skin.Current.Format("Aggressor: {0}.", Game.CurrentBattle.EffectiveAggressor.Faction))</div>

        @if (Game.CurrentVoice != null)
        {
            @if (Faction == Faction.Blue || Player.Ally == Faction.Blue)
            {
                <div class="text-success">Your opponent @(Game.CurrentVoice.Must? "must use" : "may not use") @Skin.Current.Describe(Game.CurrentVoice.Type).</div>
            }
            else
            {
                <div class="text-warning">You @(Game.CurrentVoice.Must? "must use" : "may not use") @Skin.Current.Describe(Game.CurrentVoice.Type).</div>
            }
        }

        @if (Faction == Faction.Green || Player.Ally == Faction.Green)
        {
            var opponentBattlePlan = Game.CurrentBattle.Initiator == Faction ? Game.DefenderBattleAction : Game.AggressorBattleAction;
            if (Game.GreenKarma)
            {
                if (opponentBattlePlan != null)
                {
                    <div class="text-success">Enemy @PrescienceAspect.Dial: @GetTextForAspect(PrescienceAspect.Dial, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Weapon, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Weapon: @GetTextForAspect(PrescienceAspect.Weapon, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Defense, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Defense: @GetTextForAspect(PrescienceAspect.Defense, opponentBattlePlan).</div>
                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(PrescienceAspect.Leader, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @PrescienceAspect.Leader: @GetTextForAspect(PrescienceAspect.Leader, opponentBattlePlan).</div>
                }
                else
                {
                    <div class="text-success">Enemy battle plan will be visible as soon as they confirm it.</div>
                }
            }
            else if (Game.CurrentPrescience != null)
            {
                if (opponentBattlePlan != null)
                {

                    <div class="text-success" data-animation="true" data-content="@GetPopupForAspect(Game.CurrentPrescience.Aspect, opponentBattlePlan)" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover">Enemy @Game.CurrentPrescience.Aspect: @GetTextForAspect(Game.CurrentPrescience.Aspect, opponentBattlePlan).</div>
                }
                else
                {
                    <div class="text-success">Enemy @Game.CurrentPrescience.Aspect will be visible as soon as they confirm their battle plan.</div>
                }
            }
        }

        <div class="mt-1">

            @if (Battle.MaxForces(Game, Player, false) > 0)
            {
                <SelectForcesComponent @bind-Value="forces" Min="0" Max="Battle.MaxForces(Game, Player, false)" Faction="Faction" Special="false" /> <span>&nbsp;</span>
            }

            @if (Battle.MaxForces(Game, Player, true) > 0)
            {
                <SelectForcesComponent @bind-Value="specialForces" Min="0" Max="Battle.MaxForces(Game, Player, true)" Faction="Faction" Special="true" /> <span>&nbsp;</span>
            }

            @if (Battle.MustPayForForcesInBattle(Game, Player))
            {
                <SelectResourcesComponent @bind-Value="resources" Min="0" Max="Battle.MaxResources(Game, Player, forces, specialForces)" /> <span>&nbsp;</span>

                @if (Player.Ally == Faction.Brown && Battle.MaxAllyResources(Game, Player, forces, specialForces) > 0)
                {
                    <SelectResourcesFromFactionComponent @bind-Value="resourcesFromAlly" Min="0" Max="Battle.MaxAllyResources(Game, Player, forces, specialForces)" Faction="Player.Ally" />
                }
                else
                {
                    resourcesFromAlly = 0;
                }
            }
            else
            {
                resources = 0;
                resourcesFromAlly = 0;
            }

            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="white" class="bi bi-arrow-right" viewBox="0 0 16 16" style="vertical-align: super">
                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z" />
            </svg>

            <NumberComponent Value="ConfirmedResult.Dial(Game, Game.CurrentBattle.OpponentOf(Faction).Faction)" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />

        </div>

        @if (Battle.ValidBattleHeroes(Game, Player).Any())
        {
            <SelectHeroComponent Game="Game" @bind-Value="hero" Values="Battle.ValidBattleHeroes(Game, Player)" />
        }
        else
        {
            hero = null;
        }

        @if (Weapons.Any())
        {
            <SelectCardComponent @bind-Value="weapon" Values="Weapons" Required="false">
                <Label>Weapon</Label>
            </SelectCardComponent>
        }
        else
        {
            weapon = null;
        }

        @if (Defenses.Any())
        {
            <SelectCardComponent @bind-Value="defense" Values="Defenses" Required="false">
                <Label>Defense</Label>
            </SelectCardComponent>
        }
        else
        {
            defense = null;
        }

        @if (Faction == Faction.Green && Game.Applicable(Rule.GreenMessiah))
        {
            <RadioComponent @bind-Value="messiah" Values="@(new bool[] {false,true})" ValueLabels="@(new string[] {"No","Yes"})">
                <Label>Should the @Skin.Current.Describe(Concept.Messiah) join the fight?</Label>
            </RadioComponent>
        }
        else
        {
            messiah = false;
        }

        @if (Battle.MaxBankerBoost(Game, Player, hero) > 0)
        {
            <SelectResourcesComponent @bind-Value="bankerBoost" Min="0" Max="Battle.MaxBankerBoost(Game, Player, hero)" Label="@Skin.Current.Format("Boost {0} {1} with {2}?", Skin.Current.Describe(LeaderSkill.Banker), hero, Concept.Resource)"/>
        }
        else
        {
            bankerBoost = 0;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Battle!" ConfirmError="@Validation" />

        <div class="text-info small">Toggle <img src="@Skin.Current.Eye_URL" /> on the map to show/hide the battle wheel.</div>

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private const string NONE = "None";

    private int forces;
    private int specialForces;
    private int resources;
    private int resourcesFromAlly;
    private IHero hero;
    private bool messiah = false;
    private TreacheryCard defense;
    private TreacheryCard weapon;
    private int bankerBoost;

    protected override void OnInitialized()
    {
        h.ShowWheelsAndHMS = true;
    }

    protected override void OnParametersSet()
    {
        var plan = h.GetRevisablePlan();
        if (plan != null)
        {
            forces = plan.Forces + plan.ForcesAtHalfStrength;
            specialForces = plan.SpecialForces + plan.SpecialForcesAtHalfStrength;
            resources = plan.Cost(Game) - plan.AllyContributionAmount;
            resourcesFromAlly = plan.AllyContributionAmount;
            hero = plan.Hero;
            messiah = plan.Messiah;
            defense = plan.Defense;
            weapon = plan.Weapon;
            bankerBoost = plan.BankerBonus;
        }
    }

    private int lastforces;
    private int lastspecialForces;
    private int lastResources;
    private int lastResourcesFromAlly;
    private IHero lasthero;
    private bool lastmessiah = false;
    private TreacheryCard lastdefense;
    private TreacheryCard lastweapon;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) StartRedrawCycle(1000);
    }

    protected override async Task RedrawAsync()
    {
        if (
        forces != lastforces ||
        specialForces != lastspecialForces ||
        resources != lastResources ||
        resourcesFromAlly != lastResourcesFromAlly ||
        hero != lasthero ||
        messiah != lastmessiah ||
        defense != lastdefense ||
        weapon != lastweapon)
        {
            lastforces = forces;
            lastspecialForces = specialForces;
            lastResources = resources;
            lastResourcesFromAlly = resourcesFromAlly;
            lasthero = hero;
            lastmessiah = messiah;
            lastdefense = defense;
            lastweapon = weapon;

            h._battleUnderConstruction = ConfirmedResult;
            //NEWMAP//await MapDrawer.Draw();
        }
    }

    protected override Battle ConfirmedResult
    {
        get
        {
            Battle.DetermineForces(Game, Player, forces, specialForces, resources, out int forcesFull, out int forcesHalf, out int specialForcesFull, out int specialForcesHalf);

            var result = new Battle(Game)
            {
                Initiator = Faction,
                Defense = defense,
                Forces = forcesFull,
                ForcesAtHalfStrength = forcesHalf,
                AllyContributionAmount = resourcesFromAlly,
                Hero = hero,
                Messiah = messiah,
                SpecialForces = specialForcesFull,
                SpecialForcesAtHalfStrength = specialForcesHalf,
                Weapon = weapon,
                BankerBonus = bankerBoost
            };

            h.SetRevisablePlan(result);

            return result;
        }
    }

    private Faction Opponent
    {
        get
        {
            if (Game.CurrentBattle != null)
            {
                if (Game.CurrentBattle.Initiator == Faction)
                {
                    return Game.CurrentBattle.Target;
                }
                else
                {
                    return Game.CurrentBattle.Initiator;
                }
            }
            else
            {
                return Faction.None;
            }
        }
    }

    private string GetTextForAspect(PrescienceAspect aspect, Battle plan)
    {
        switch (aspect)
        {
            case PrescienceAspect.Defense: return plan.Defense == null ? "None" : Skin.Current.Describe(plan.Defense);
            case PrescienceAspect.Weapon: return plan.Weapon == null ? "None" : Skin.Current.Describe(plan.Weapon);
            case PrescienceAspect.Dial: return plan.Dial(Game, Faction).ToString();
            case PrescienceAspect.Leader: return plan.Hero == null ? "None" : Skin.Current.Describe(plan.Hero);
        }

        return "?";
    }

    private string GetPopupForAspect(PrescienceAspect aspect, Battle plan)
    {
        switch (aspect)
        {
            case PrescienceAspect.Defense: return plan.Defense == null ? "" : Support.GetTreacheryCardHoverHTML(plan.Defense);
            case PrescienceAspect.Weapon: return plan.Weapon == null ? "" : Support.GetTreacheryCardHoverHTML(plan.Weapon);
            case PrescienceAspect.Dial: return "";
            case PrescienceAspect.Leader: return plan.Hero == null ? "" : Support.GetHeroHoverHTML(plan.Hero, Game);
        }

        return "?";
    }

    private IEnumerable<TreacheryCard> Weapons => Battle.ValidWeapons(Game, Player, defense, hero).OrderBy(c => c);

    private IEnumerable<TreacheryCard> Defenses => Battle.ValidDefenses(Game, Player, weapon).OrderBy(c => c);
}
