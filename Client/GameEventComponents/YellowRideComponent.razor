<!--
* Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->
@inherits PlacementComponent<YellowRidesMonster>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>@Title</Header>
    <Body>

        @if (YellowRidesMonster.ValidSources(Game).Any())
        {
            <ForceSelectionComponent Game=Game Player=Player OnChanged="@StateHasChanged" Forces=@forces Locations=@YellowRidesMonster.ValidSources(Game) />
        }
        else
        {
            var maxForcesFromReserves = YellowRidesMonster.MaxForcesFromReserves(Game, Player, false);
            var maxSpecialForcesFromReserves = YellowRidesMonster.MaxForcesFromReserves(Game, Player, true);

            if (maxForcesFromReserves > 0 || maxSpecialForcesFromReserves > 0)
            {
                if (maxForcesFromReserves > 0)
                {
                    <SelectForcesComponent @bind-Value="_forcesFromReserves" Min="0" Max=@maxForcesFromReserves Faction="Faction" Special="false" />
                }
                else
                {
                    _forcesFromReserves = 0;
                }

                if (maxSpecialForcesFromReserves > 0)
                {
                    <SelectForcesComponent @bind-Value="_specialForcesFromReserves" Min="0" Max=@maxSpecialForcesFromReserves Faction="Faction" Special="true" />
                }
                else
                {
                    _specialForcesFromReserves = 0;
                }
            }
        }
        
        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="toLocation" Values="ValidTargets">
            <Label>To</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Ride!" ConfirmError="@Validation" Pass="Pass" PassText="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    private int _forcesFromReserves;
    private int _specialForcesFromReserves;

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Yellow;

    protected override YellowRidesMonster ConfirmedResult => new(Game, Faction) { ForceLocations = forces, To = toLocation, ForcesFromReserves = _forcesFromReserves, SpecialForcesFromReserves = _specialForcesFromReserves, Passed = false };

    protected override YellowRidesMonster PassedResult => new(Game, Faction) { Passed = true };

    protected override IEnumerable<Location> ValidTargets => YellowRidesMonster.ValidTargets(Game, Player).OrderByDescending(l => l.IsStronghold).ThenBy(l => Skin.Current.Describe(l));

    protected override bool InformAboutCaravan => false;

    protected override string Title
    {
        get
        {
            var toRide = YellowRidesMonster.ToRide(Game);
            if (toRide.IsGreatMonster)
            {
                return Skin.Current.Format("Ride the {0} with forces from your reserves?", Concept.GreatMonster);
            }

            return Skin.Current.Format("Ride the Worm that appeared in {0}?", toRide.Territory);
        }
    }

    protected override bool MayPass => false;
}
