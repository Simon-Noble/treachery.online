<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits PlacementComponent<YellowRidesMonster>

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle">

    <Header>Travel with @Skin.Current.Describe(Concept.Monster)</Header>
    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" Value="fromTerritory" Values="ValidSources">
            <Label>From</Label>
        </SelectComponent>

        @{
            var locations = Player.LocationsWithAnyForcesInTerritory(fromTerritory).ToList();

            <table class="table table-striped table-sm m-0 w-auto">
                <tbody>
                    @foreach (var l in locations)
                    {
                        <tr class="small">
                            @if (locations.Count > 1)
                            {
                                <td>@l.Name</td>
                            }

                            @if (l.Sector != Game.SectorInStorm)
                            {
                                <td><NumberPickerComponent Value="@Forces(l, false)" OnDown="(e => ForceAmountButton(l, -1, false))" OnUp="(e => ForceAmountButton(l, 1, false))" Min="0" Max="Player.ForcesIn(l)" SymbolSRC="@Skin.Current.GetFactionForceImageURL(Faction)" /></td>
                            }
                            else
                            {
                                <td class="font-italic text-danger">cannot move from storm</td>
                            }

                            @if (Player.SpecialForcesIn(l) > 0)
                            {
                                if (l.Sector != Game.SectorInStorm)
                                {
                                    <td><NumberPickerComponent Value="@Forces(l, true)" OnDown="(e => ForceAmountButton(l, -1, true))" OnUp="(e => ForceAmountButton(l, 1, true))" Min="0" Max="Player.SpecialForcesIn(l)" SymbolSRC="@Skin.Current.GetFactionSpecialForceImageURL(Faction)" /></td>
                                }
                                else
                                {
                                    <td class="font-italic text-danger">cannot move from storm</td>
                                }
                            }
                        </tr>
                    }

                </tbody>
            </table>
        }

        <SelectComponent ButtonHint="ClickHintButton.LMB" Value="toLocation" Values="ValidTargets">
            <Label>To</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@validationError" Pass="Pass" PassText="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Yellow;

    override protected YellowRidesMonster ConfirmedResult => new YellowRidesMonster(h.Game) { Initiator = h.Faction, ForceLocations = forces, To = toLocation, Passed = false };

    override protected YellowRidesMonster PassedResult => new YellowRidesMonster(h.Game) { Initiator = h.Faction, Passed = true };

    protected override IEnumerable<Territory> ValidSources => YellowRidesMonster.ValidSources(h.Game);

    protected override IEnumerable<Location> ValidTargets => YellowRidesMonster.ValidTargets(h.Game, h.Player);
}
