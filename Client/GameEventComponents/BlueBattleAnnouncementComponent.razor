<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlueBattleAnnouncement>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>Flip advisors to fighters</Header>
    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="target" Values="BlueBattleAnnouncement.ValidTerritories(Game, Player)">
            <Label>Territory</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Flip to Fighters" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Blue;

    private Territory target;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            h.OnLocationSelected += HandleLocationSelected;
        }
    }

    protected override BlueBattleAnnouncement ConfirmedResult => new BlueBattleAnnouncement(Game) { Initiator = Faction, Territory = target };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Territory, Territory>(ref target, BlueBattleAnnouncement.ValidTerritories(Game, Player), l.Territory);
    }

    public override void Dispose()
    {
        base.Dispose();
        h.OnLocationSelected -= HandleLocationSelected;
    }
}
