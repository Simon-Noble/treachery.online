<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlueBattleAnnouncement>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle">

    <Header>Choose a territory in which you have advisors and wish to battle, flipping them to fighters.</Header>
    <Body>

        @if (h.Player.ForcesInReserve > 0 && h.Game.Applicable(Rule.BlueAccompaniesToShipmentLocation))
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" Value="target" Values="BlueBattleAnnouncement.ValidTerritories(h.Game, h.Player)">
                <Label>Territory</Label>
            </SelectComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@validationError" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Blue;

    private Territory target;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
        }

        //Initialize<int, Territory>(ref targetId, BlueBattleAnnouncement.ValidTerritories(h.Game, h.Player));
    }

    protected override BlueBattleAnnouncement ConfirmedResult => new BlueBattleAnnouncement(h.Game) { Initiator = h.Faction, Territory = target };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Territory, Territory>(ref target, BlueBattleAnnouncement.ValidTerritories(h.Game, h.Player), l.Territory);
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
    }
}
