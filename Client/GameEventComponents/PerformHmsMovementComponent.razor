<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PerformHmsMovement>
@implements IDisposable

<div class="card p-1 mb-2 border-danger">
    <div class="card-header">
        Move the Hidden Mobile Stronghold one territory, or pass.
    </div>
    <div class="card-body">

        <p class="text-info">You have @Game.HmsMovesLeft move(s) left. </p>

        <label for="hmsMoveLocation">Territory <kbd>click</kbd></label>
        <select class="custom-select" @bind="@target" id="hmsMoveLocation">
            @foreach (var f in PerformHmsMovement.ValidLocations(Game))
            {
                <option value="@f">@f.ToString()</option>
            }
        </select>

        <button class="btn btn-primary mt-1" @onclick="Confirm" disabled="@(!Valid)">Move</button>
        <div class="text-danger bg-dark">@validationError</div>

        <button class="btn btn-primary mt-1" @onclick="Pass">Pass</button>
    </div>
</div>

@code {

    public string target = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
        }

        Initialize<string, Location>(ref target, PerformHmsMovement.ValidLocations(Game));
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
    }

    protected override PerformHmsMovement ConfirmedResult
    {
        get
        {
            return new PerformHmsMovement(Game) { Initiator = Faction, Passed = false, Target = Game.Map.Get(target) };
        }
    }

    protected override PerformHmsMovement PassedResult
    {
        get
        {
            return new PerformHmsMovement(Game) { Initiator = Faction, Passed = true };
        }
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<string, Location>(ref target, Game.Map.Locations, l);
    }
}
