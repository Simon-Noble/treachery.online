@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<TerrorPlanted>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>You may now place a Terror Token in a Stronghold</Header>
    <Body>

        @if (TerrorPlanted.MayRemoveTokens(Game, Player))
        {
            <RadioComponent @bind-Value=_remove Values="new bool[] {false, true}" ValueLabels=@ValueLabels />
        }
        else
        {
            _remove = false;
        }

        <SelectComponent @bind-Value="_type" Values=@TerrorPlanted.ValidTerrorTypes(Game, _remove)>
            <Label>Token</Label>
        </SelectComponent>

        <div class="text-info">
            @Skin.Current.GetTerrorTypeDescription(_type)
        </div>

        @if (!_remove)
        {
            <SelectComponent ButtonHint=ClickHintButton.LMB @bind-Value=_stronghold Values=@TerrorPlanted.ValidStrongholds(Game, Player)>
                <Label>Stronghold</Label>
            </SelectComponent>
        }

        <ButtonRowComponent Pass="Pass" Confirm="Confirm" ConfirmText=@ConfirmLabel ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Cyan;

    private bool _remove;
    private TerrorType _type;
    private Territory _stronghold;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    protected override TerrorPlanted ConfirmedResult => new TerrorPlanted(Game, Faction) { Type = _type, Stronghold = _remove ? null : _stronghold };

    protected override TerrorPlanted PassedResult => new TerrorPlanted(Game, Faction) { Passed = true };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Territory, Territory>(ref _stronghold, TerrorPlanted.ValidStrongholds(Game, Player), l.Territory);
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    private string[] ValueLabels => new string[] { "Place or move a token", Skin.Current.Format("Remove a token to gain 4 ", Concept.Resource) };

    private string ConfirmLabel => _remove ? "Remove token" : (Game.UnplacedTerrorTokens.Contains(_type) ? "Place token" : "Move token");
}
