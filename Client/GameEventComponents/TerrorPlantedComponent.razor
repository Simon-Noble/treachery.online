<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<TerrorPlanted>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType()>

    <Header>You may now place a Terror Token in a Stronghold</Header>
    <Body>

        @if (TerrorPlanted.MayRemoveTokens(Game, Player))
        {
            <RadioComponent Value=_remove Values="new bool[] {false, true}" ValueLabels=@ValueLabels/>
        }
        else
        {
            _remove = false;
        }

        <SelectComponent @bind-Value="_type" Values=@TerrorPlanted.ValidTerrorTypes(Game, _remove)>
            <Label>Token</Label>
        </SelectComponent>

        <div class="text-info">
            @Skin.Current.GetTerrorTypeDescription(_type)
        </div>

        <SelectComponent ButtonHint=ClickHintButton.LMB @bind-Value=_stronghold Values=@TerrorPlanted.ValidStrongholds(Game, Player)>
            <Label>Stronghold</Label>
        </SelectComponent>

        <ButtonRowComponent Pass="Pass" Confirm="Confirm" ConfirmText=@ConfirmLabel ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Cyan;

    private bool _remove;
    private TerrorType _type;
    private Territory _stronghold;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    protected override TerrorPlanted ConfirmedResult => new TerrorPlanted(Game, Faction) { Type = _type, Stronghold = _remove ? null : _stronghold };

    protected override TerrorPlanted PassedResult => new TerrorPlanted(Game, Faction) { Passed = true };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid<Territory, Territory>(ref _stronghold, TerrorPlanted.ValidStrongholds(Game, Player), l.Territory);
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    private string[] ValueLabels => new string[] { "Place or move a token", Skin.Current.Format("Remove a token to gain 4 ", Concept.Resource) };

    private string ConfirmLabel => _remove ? "Remove token" : (Game.UnplacedTerrorTokens.Contains(_type) ? "Place token" : "Move token");
}
