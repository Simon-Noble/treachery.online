<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Shipment>
@implements IDisposable

<GameEventComponentLayout Border="@Border" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" @bind-Collapsed="@Collapsed">

    <Header>

        @if (Faction == Faction.Yellow)
        {
            <div>Bring any number of forces onto @(Game.Map.TheGreatFlat.Territory.Name) or onto any one territory within two territories of @(Game.Map.TheGreatFlat.Territory.Name).</div>

            @if (MayShipAsGuild)
            {
                <div>In addition, your ally allows you to ship to other locations as well from your reserves.</div>
            }
        }
        else
        {
            <div>Select forces to ship, or pass.</div>
        }

        @if (MayShipAsGuild)
        {
            <div>You may ship site-to-site any number of forces from a source location to another location.</div>
        }

        @if (Faction == Faction.Orange)
        {
            <div>You may ship any number of forces from any one location back to your reserves.</div>
        }

    </Header>
    <Body>

        @if (MayShipAsGuild)
        {
            <RadioComponent @bind-Value="shipmentType" Values="@ValidShipmentTypes" ValueLabels="@ValidShipmentTypeLabels" />
        }
        else
        {
            shipmentType = SHIPMENT_NORMAL;
        }

        @if (shipmentType == SHIPMENT_SITETOSITE)
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="shipmentFrom" Values="ValidSourceLocations">
                <Label>From</Label>
            </SelectComponent>
        }
        else
        {
            shipmentFrom = null;
        }

        <div class="mt-1">
            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="shipmentTo" Values="ValidShipmentLocations.OrderByDescending(l => l.IsStronghold).ThenBy(l => l.Territory.Name).ThenBy(l => l.Name)">
                <Label>To</Label>
            </SelectComponent>
        </div>

        @if (shipmentType != SHIPMENT_BACK && Game.ContainsConflictingAlly(Player, shipmentTo))
        {
            <div class="text-danger bg-dark">Note: any of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
        }

        @if (Faction == Faction.White && !Game.Prevented(FactionAdvantage.WhiteNofield) || Player.Ally == Faction.White && Game.WhiteAllyMayUseNoField)
        {
            var validNoFieldValues = new List<int>();
            validNoFieldValues.Add(-1);
            validNoFieldValues.AddRange(Shipment.ValidNoFieldValues(Game));

            var validNoFieldValueLabels = new List<string>();
            validNoFieldValueLabels.Add("Don't use a No-Field");
            validNoFieldValueLabels.AddRange(Shipment.ValidNoFieldValues(Game).Select(v => v.ToString()));

            <RadioComponent @bind-Value="nofieldValue" Values="validNoFieldValues" ValueLabels="validNoFieldValueLabels">
                <Label>Use a @Skin.Current.Describe(Faction.White) No-Field for this shipment?</Label>
            </RadioComponent>
        }
        else
        {
            nofieldValue = -1;
        }

        @if (!(Faction == Faction.White && nofieldValue >= 0))
        {
            <div class="mt-1">

                @if (ValidShipmentForces > 0)
                {
                    <SelectForcesComponent @bind-Value="shipmentForceAmount" Min="0" Max="ValidShipmentForces" Faction="Faction" Special="false" />
                }

                @if (ValidShipmentSpecialForces > 0)
                {
                    <SelectForcesComponent @bind-Value="shipmentSpecialForceAmount" Min="0" Max="ValidShipmentSpecialForces" Faction="Faction" Special="true" />
                }

            </div>
        }
        else
        {
            shipmentForceAmount = 0;
            shipmentSpecialForceAmount = 1;
        }

        @if (Player.Ally != Faction.None && Cost > 0)
        {
            <div class="mt-1">
                <SelectResourcesFromFactionComponent @bind-Value="shipmentAllyContributionAmount" Min="0" Max="Game.SpiceYourAllyCanPay(Player)" Faction="Player.Ally" />
            </div>
        }

        @if (Shipment.CanKarma(Game, Player) && (Faction != Faction.Yellow || shipmentType == SHIPMENT_SITETOSITE))
        {
            <div class="mt-1">
                <SelectCardComponent @bind-Value="karmaCard" Values="Shipment.ValidKarmaCards(Game, Player)" Required="false">
                    <Label>Use @Skin.Current.Describe(TreacheryCardType.Karma) to ship at @Skin.Current.Describe(Faction.Orange) rate?</Label>
                </SelectCardComponent>
            </div>
        }
        else
        {
            karmaCard = null;
        }

        <div class="mt-1 text-right">Total cost of shipment: <span class="badge badge-primary badge-pill">@Cost</span></div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm" ConfirmError="@Validation" Pass="Pass" PassText="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    const int SHIPMENT_NORMAL = 0;
    const int SHIPMENT_SITETOSITE = 1;
    const int SHIPMENT_BACK = 2;

    private int shipmentType = SHIPMENT_NORMAL;
    private TreacheryCard karmaCard;
    private int shipmentForceAmount;
    private int shipmentSpecialForceAmount;
    private Location shipmentFrom;
    private Location shipmentTo;
    private int shipmentAllyContributionAmount;
    private int nofieldValue = -1;

    protected override Shipment ConfirmedResult
    {
        get
        {
            int direction = (shipmentType == SHIPMENT_BACK ? -1 : 1);
            var from = (shipmentType == SHIPMENT_SITETOSITE ? shipmentFrom : null);

            return new Shipment(Game)
            {
                Initiator = Faction,
                ForceAmount = direction * shipmentForceAmount,
                SpecialForceAmount = direction * shipmentSpecialForceAmount,
                NoFieldValue = nofieldValue,
                From = from,
                To = shipmentTo,
                Passed = false,
                KarmaCard = karmaCard,
                AllyContributionAmount = shipmentAllyContributionAmount
            };
        }
    }

    protected override Shipment PassedResult => new Shipment(Game) { Initiator = Faction, Passed = true };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MapDrawer.OnLocationSelected += HandleLocationSelected;
            MapDrawer.OnLocationSelectedWithShift += HandleLocationSelectedWithModifier;
            MapDrawer.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
            MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        }
    }

    public void Dispose()
    {
        MapDrawer.OnLocationSelected -= HandleLocationSelected;
        MapDrawer.OnLocationSelectedWithShift -= HandleLocationSelectedWithModifier;
        MapDrawer.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
        MapDrawer.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref shipmentTo, ValidShipmentLocations, l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref shipmentFrom, ValidSourceLocations, l);
    }

    private void ShipmentTypeOnChange(ChangeEventArgs args)
    {
        shipmentType = Convert.ToInt32(args.Value);
        StateHasChanged();
    }

    private IEnumerable<Location> ValidShipmentLocations
    {
        get
        {
            switch (shipmentType)
            {
                case SHIPMENT_NORMAL:
                case SHIPMENT_SITETOSITE:
                    return Shipment.ValidShipmentLocations(Game, Player);

                case SHIPMENT_BACK:
                    return Player.LocationsWithAnyForces;
            }

            return new Location[] { };
        }
    }

    private int ValidShipmentForces
    {
        get
        {
            switch (shipmentType)
            {
                case SHIPMENT_NORMAL: return Shipment.ValidMaxNormalShipmentForces(Player, false, nofieldValue);
                case SHIPMENT_SITETOSITE: return Shipment.ValidMaxShipmentSiteToSiteForces(Player, false, shipmentFrom);
                case SHIPMENT_BACK: return Shipment.ValidMaxShipmentBackForces(Player, false, shipmentTo);
            }

            return 0;
        }
    }

    private int ValidShipmentSpecialForces
    {
        get
        {
            switch (shipmentType)
            {
                case SHIPMENT_NORMAL: return Shipment.ValidMaxNormalShipmentForces(Player, true, nofieldValue);
                case SHIPMENT_SITETOSITE: return Shipment.ValidMaxShipmentSiteToSiteForces(Player, true, shipmentFrom);
                case SHIPMENT_BACK: return Shipment.ValidMaxShipmentBackForces(Player, true, shipmentTo);
            }

            return 0;
        }
    }

    private IEnumerable<Location> ValidSourceLocations => Game.LocationsWithAnyForcesNotInStorm(Player);

    private bool MayShipAsGuild => Game.MayShipAsGuild(Player);

    private int Cost => Shipment.DetermineCost(Game, Player, (Shipment) ConfirmedResult);

    private IEnumerable<int> ValidShipmentTypes
    {
        get
        {
            @if (MayShipAsGuild)
            {
                if (Faction == Faction.Orange)
                {
                    return new int[] { SHIPMENT_NORMAL, SHIPMENT_SITETOSITE, SHIPMENT_BACK };
                }
                else
                {
                    return new int[] { SHIPMENT_NORMAL, SHIPMENT_SITETOSITE };
                }
            }

            return Array.Empty<int>();
        }
    }

    private IEnumerable<string> ValidShipmentTypeLabels
    {
        get
        {
            @if (MayShipAsGuild)
            {
                if (Faction == Faction.Orange)
                {
                    return new string[] { "Normal Shipment", "Site-to-site", "Back to reserves" };
                }
                else
                {
                    return new string[] { "Normal Shipment", "Site-to-site" };
                }
            }

            return Array.Empty<string>();
        }
    }
}
