<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<PlayerReplaced>
@implements IDisposable

<div class="card p-1 mb-2 @Border" style="@BackgroundStyle">
    <div class="card-header">
        Replace a player with a Bot
        <CollapseButton @bind-Collapsed="Collapsed" />
    </div>

    @if (!Collapsed)
    {
        <div class="card-body">

            <label for="toReplace">Faction</label>
            <select class="custom-select" @bind="toReplace" id="toReplace">
                @foreach (var f in PlayerReplaced.ValidTargets(h.Game))
                {
                    <option value="@f">@Skin.Current.Describe(f)</option>
                }
            </select>

            <button class="btn btn-primary mt-1" @onclick="Confirm" disabled=@(!Valid)>Ok</button>
            <div class="text-danger bg-dark">@validationError</div>

        </div>
    }

</div>

@code {

    private Faction toReplace;

    protected override void OnInitialized()
    {
        Collapsed = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Initialize<Faction, Faction>(ref toReplace, PlayerReplaced.ValidTargets(h.Game));
    }

    protected override PlayerReplaced ConfirmedResult
    {
        get
        {
            return new PlayerReplaced(h.Game) { Initiator = h.Faction, ToReplace = toReplace };
        }
    }

    public void Dispose()
    {

    }
}