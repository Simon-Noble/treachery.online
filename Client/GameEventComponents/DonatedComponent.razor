<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;

@inherits GameEventComponent<Donated>

<div class="card p-1 mb-2 @Border" style="@BackgroundStyle">

    <div class="card-header">
        Bribe @(h.Faction == Faction.Red?"any":"a non-allied") faction
        <CollapseButton @bind-Collapsed="Collapsed"/>
    </div>

    @if (!Collapsed)
    {
        <div class="card-body">

            <SelectComponent @bind-Value="target" Values="Donated.ValidTargets(h.Game, h.Player)" Label="Faction" />

            <NumberPickerComponent @bind-Value="resources" Min="Donated.MinAmount(h.Game, h.Player)" Max="Donated.MaxAmount(h.Game, h.Player)" SymbolSRC="@Skin.Current.Harvester_URL" />

            @if (h.Game.Applicable(Rule.CardsCanBeTraded))
            {
                <SelectComponent @bind-Value="card" Values="h.Player.TreacheryCards.Select(h => h.Id)" ValueLabels="h.Player.TreacheryCards" Label="Give one of your cards">
                    <option value="-1">None</option>
                </SelectComponent>
            }

            <button class="btn btn-primary" @onclick="Confirm" disabled=@(!Valid)>Ok</button>

            <div class="text-danger bg-dark">@validationError</div>

        </div>
    }

</div>

@code {

    private Faction target;
    private int resources;
    private int card = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        Initialize<Faction, Faction>(ref target, Donated.ValidTargets(h.Game, h.Player));
        Initialize<int, int>(ref resources, Donated.ValidAmounts(h.Game, h.Player));
        Initialize<int, TreacheryCard>(ref card, h.Player.TreacheryCards, true, -1);
    }

    protected override Donated ConfirmedResult
    {
        get
        {
            return new Donated(h.Game) { Initiator = h.Faction, Target = target, Resources = resources, Card = TreacheryCardManager.Lookup.Find(card) };
        }
    }
}
