<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Donated>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle=@BodyStyle CollapsedType=GetType() Collapsed=CollapseState.Collapsed>

    <Header>Give @Skin.Current.Describe(Concept.Resource) to a faction</Header>
    <Body>

        <SelectFromImageComponent @bind-Value="target" Values="Targets" Required=true ImageWidth="40" />

        <div class="mt-1">
            <SelectResourcesComponent @bind-Value="resources" Min="MinAmount" Max="MaxAmount" />
        </div>

        @if (Game.Applicable(Rule.CardsCanBeTraded))
        {
            <div class="mt-1">
                <SelectFromImageComponent @bind-Value="card" Values="Player.TreacheryCards" Required="false" ImageWidth="80" />
            </div>
        }
        else
        {
            card = null;
        }

        @if (h.IsHost)
        {
            <CheckboxComponent @bind-Value="fromBank">
                Host only: give from @Skin.Current.Describe(Concept.Resource) bank (you may select a negative amount to put that amount of @Skin.Current.Describe(Concept.Resource) from target faction in the bank)
            </CheckboxComponent>
        }
        else
        {
            fromBank = false;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Gift" ConfirmError=@Validation />

    </Body>

</GameEventComponentLayout>

@code {

    private Faction target;
    private int resources;
    private TreacheryCard card;
    private bool fromBank;

    protected override Donated ConfirmedResult => new Donated(Game, Faction) { Target = target, Resources = resources, Card = card, FromBank = fromBank };

    private IEnumerable<Faction> Targets
    {
        get
        {
            if (!fromBank)
            {
                return Donated.ValidTargets(Game, Player);
            }
            else
            {
                return Game.Players.Select(p => p.Faction);
            }
        }
    }

    private int MaxAmount => !fromBank ? Donated.MaxAmount(Player) : 99;

    private int MinAmount => !fromBank ? Donated.MinAmount(Game, Player) : -99;
}
