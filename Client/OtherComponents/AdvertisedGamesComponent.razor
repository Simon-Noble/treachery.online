<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;
@inject IJSRuntime JSRuntime;

<HoverPanel Height=300 HandleWidth=20 BackgroundColor="#e8dba6dd" Position="HoverPanel.HoverPanelPosition.Top">

    <div class="p-2">

        @foreach (var g in Client.JoinableAdvertisedGames)
        {
            if (!joinPWD.ContainsKey(g.HostID))
            {
                joinPWD.Add(g.HostID, "");
            }

            if (!Client.JoinErrors.ContainsKey(g.HostID))
            {
                Client.JoinErrors.Add(g.HostID, "");
            }

            <div class="alert alert-primary" role="alert">
                You are invited to join @g.GameName (@g.Players.Count() human players, @Skin.Current.Describe(Game.DetermineApproximateRuleset(g.FactionsInPlay, g.Rules, Game.ExpansionLevel)), maximum players: @g.MaximumNumberOfPlayers, maximum turns: @g.MaximumNumberOfTurns!
                &nbsp;
                @if (g.HasPassword)
                {
                    <input class="form-inline" style="max-width:120px" @bind="joinPWD[g.HostID]" maxlength="24" placeholder="Game password" />
                }
                <button class="btn btn-primary" @onclick="@(e => JoinGameAsPlayer(g.HostID, joinPWD[g.HostID]))">Join</button>
                <div class="text-danger">@Client.JoinErrors[g.HostID]</div>
            </div>
        }

    </div>

</HoverPanel>

@code {

    private Dictionary<int, string> joinPWD = new Dictionary<int, string>();

    private async Task JoinGameAsPlayer(int hostID, string pwd)
    {
        Client.Reset();
        Client.JoinErrors[hostID] = "";
        await Client.Request(hostID, new PlayerJoined() { HashedPassword = Support.GetHash(pwd), Name = Client.PlayerName });
    }
}