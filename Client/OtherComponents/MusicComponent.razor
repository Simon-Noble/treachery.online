<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@using System.Linq;
@inherits GameComponent;
 
@if (Visible)
{
    <div class="card p-1 mb-2 small">
        <div class="card-body">
            <div class="form-group mt-1 mb-0 p-0">
                <label class="mt-0" for="musicVolume">&nbsp;Music volume</label>
                <input class="mt-2" id="musicVolume" type="range" min="0" max="100" step="1" @bind="@DesiredMusicVolume" @bind:event="oninput" />
            </div>
            <div class="form-group mt-1 mb-0 p-0">
                <label class="mt-0" for="effectVolume">&nbsp;Sound effects volume</label>
                <input class="mt-2" id="effectVolume" type="range" min="0" max="100" step="1" @bind="@DesiredEffectVolume" @bind:event="oninput" />
            </div>
            <div class="form-group mt-1 mb-0 p-0">
                <label class="mt-0" for="chatVolume">&nbsp;Chat notification volume</label>
                <input class="mt-2" id="chatVolume" type="range" min="0" max="100" step="1" @bind="@DesiredChatVolume" @bind:event="oninput" />
            </div>

            <SelectComponent @bind-Value=h.AudioDevice Values=@audioDevices ValueLabels=@audioDevices.Select(d => d.Label)>
                <Label>Microphone</Label>
            </SelectComponent>

            <SelectComponent @bind-Value=h.VideoDevice Values=@videoDevices ValueLabels=@videoDevices.Select(d => d.Label)>
                <Label>Camera</Label>
            </SelectComponent>

        </div>
    </div>

}

@code {

    [Parameter]
    public bool Visible { get; set; } = false;

    private float DesiredMusicVolume = 0;
    private float DesiredEffectVolume = 0;
    private float DesiredChatVolume = 0;
    private string CurrentSoundtrack = "";
    private float CurrentMusicVolume = -1;

    private List<CaptureDevice> audioDevices = new List<CaptureDevice>();
    private List<CaptureDevice> videoDevices = new List<CaptureDevice>();

    protected override async Task OnInitializedAsync()
    {
        var devices = await Browser.GetCaptureDevices();
        audioDevices = devices.Where(d => d.Kind == "audioinput").ToList();
        videoDevices = devices.Where(d => d.Kind == "videoinput").ToList();

        await LoadSettings();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateMusicAndSound();
        await SaveSettings();
    }

    private async Task UpdateMusicAndSound()
    {
        if (h.HostProxy != null)
        {
            var soundtrackToPlay = DetermineSoundtrack();

            if (CurrentSoundtrack != soundtrackToPlay)
            {
                await Browser.FadeAndStopSound(CurrentSoundtrack, DesiredMusicVolume);
                await Browser.PlaySound(soundtrackToPlay, DesiredMusicVolume, true);
                CurrentSoundtrack = soundtrackToPlay;
            }
            else if (CurrentMusicVolume != DesiredMusicVolume)
            {
                if (DesiredMusicVolume <= 4)
                {
                    await Browser.StopSounds();
                    CurrentSoundtrack = "";
                }
                else
                {
                    await Browser.ChangeSoundVolume(soundtrackToPlay, DesiredMusicVolume);
                }

                CurrentMusicVolume = DesiredMusicVolume;
            }

            h.CurrentEffectVolume = DesiredEffectVolume;
            h.CurrentChatVolume = DesiredChatVolume;
        }
    }

    private string DetermineSoundtrack()
    {
        if (h.Game == null)
        {
            return Skin.Current.MusicGeneral_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.Setup)
        {
            return Skin.Current.MusicSetup_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.Blow || h.Game.CurrentMainPhase == MainPhase.Charity)
        {
            return Skin.Current.MusicResourceBlow_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.Bidding)
        {
            return Skin.Current.MusicBidding_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.ShipmentAndMove)
        {
            return Skin.Current.MusicShipmentAndMove_URL;
        }
        else if (h.Game.CurrentPhase == Phase.BattlePhase || h.Game.CurrentPhase == Phase.BeginningOfBattle)
        {
            return Skin.Current.MusicBattle_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.Battle)
        {
            return Skin.Current.MusicBattleClimax_URL;
        }
        else if (h.Game.CurrentMainPhase == MainPhase.Collection || h.Game.CurrentMainPhase == MainPhase.Contemplate || h.Game.CurrentMainPhase == MainPhase.Ended)
        {
            return Skin.Current.MusicMentat_URL;
        }
        else
        {
            return Skin.Current.MusicGeneral_URL;
        }
    }

    private async Task SaveSettings()
    {
        await Browser.SaveSetting("treachery.online;setting.music", DesiredMusicVolume);
        await Browser.SaveSetting("treachery.online;setting.effect", DesiredEffectVolume);
        await Browser.SaveSetting("treachery.online;setting.chatvolume", DesiredChatVolume);
        
        if (h.AudioDevice != null)
        {
            await Browser.SaveSetting("treachery.online;setting.audiodevice", h.AudioDevice.DeviceId);
        }

        if (h.VideoDevice != null)
        {
            await Browser.SaveSetting("treachery.online;setting.videodevice", h.VideoDevice.DeviceId);
        }
    }

    private async Task LoadSettings()
    {
        try
        {
            DesiredMusicVolume = await Browser.LoadSetting<float>("treachery.online;setting.music");
            if (DesiredMusicVolume == 0) DesiredMusicVolume = 50;
            DesiredEffectVolume = await Browser.LoadSetting<float>("treachery.online;setting.effect");
            if (DesiredEffectVolume == 0) DesiredEffectVolume = 50;
            DesiredChatVolume = await Browser.LoadSetting<float>("treachery.online;setting.chatvolume");
            if (DesiredChatVolume == 0) DesiredChatVolume = 50;
            var videoDeviceId = await Browser.LoadSetting<string>("treachery.online;setting.videodevice");
            h.VideoDevice = videoDevices.FirstOrDefault(d => d.DeviceId == videoDeviceId);
            if (h.VideoDevice == null) h.VideoDevice = videoDevices.FirstOrDefault();
            var audioDeviceId = await Browser.LoadSetting<string>("treachery.online;setting.audiodevice");
            h.AudioDevice = audioDevices.FirstOrDefault(d => d.DeviceId == audioDeviceId);
            if (h.AudioDevice== null) h.AudioDevice = audioDevices.FirstOrDefault();
        }
        catch (Exception)
        {

        }
    }

}
