@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">Start a new game</div>
    <div class="card-body">
        <input type="text" class="form-control" @bind="hostPWD" maxlength="24" placeholder="Game password (optional)" />

        <label class="btn btn-dark btn-sm mt-1 p-2 text-start p-0 mt-0 mb-0" title="Load game...">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="white" class="bi bi-file-earmark-arrow-up" viewBox="0 0 16 16">
                <path d="M8.5 11.5a.5.5 0 0 1-1 0V7.707L6.354 8.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 7.707V11.5z" />
                <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z" />
            </svg>
            @LoadGameLabel
            <input hidden type="file" id="fileInput" @ref="_fileInput" @onchange="LoadGame" />
        </label>
        @if (recentGameState != null || restoredGame != null)
        {
            <label class="btn btn-dark btn-sm mt-1 p-2 text-start p-0 mt-0 mb-0" title="Restore game..." @onclick="RestoreGame">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="white" class="bi bi-play-fill" viewBox="0 0 16 16">
                    <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
                </svg>
                @RestoreGameLabel
            </label>
        }
        <a class="btn btn-dark btn-sm mt-1 p-2 text-start p-0 mt-0 mb-0" href="https://discord.gg/qsMSgtYN" target="_blank" title="Find players on Dune Discord">
            <svg style="margin-right:2px" width="18" height="18" viewBox="0 -28.5 256 256" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
                <g>
                    <path d="M216.856339,16.5966031 C200.285002,8.84328665 182.566144,3.2084988 164.041564,0 C161.766523,4.11318106 159.108624,9.64549908 157.276099,14.0464379 C137.583995,11.0849896 118.072967,11.0849896 98.7430163,14.0464379 C96.9108417,9.64549908 94.1925838,4.11318106 91.8971895,0 C73.3526068,3.2084988 55.6133949,8.86399117 39.0420583,16.6376612 C5.61752293,67.146514 -3.4433191,116.400813 1.08711069,164.955721 C23.2560196,181.510915 44.7403634,191.567697 65.8621325,198.148576 C71.0772151,190.971126 75.7283628,183.341335 79.7352139,175.300261 C72.104019,172.400575 64.7949724,168.822202 57.8887866,164.667963 C59.7209612,163.310589 61.5131304,161.891452 63.2445898,160.431257 C105.36741,180.133187 151.134928,180.133187 192.754523,160.431257 C194.506336,161.891452 196.298154,163.310589 198.110326,164.667963 C191.183787,168.842556 183.854737,172.420929 176.223542,175.320965 C180.230393,183.341335 184.861538,190.991831 190.096624,198.16893 C211.238746,191.588051 232.743023,181.531619 254.911949,164.955721 C260.227747,108.668201 245.831087,59.8662432 216.856339,16.5966031 Z M85.4738752,135.09489 C72.8290281,135.09489 62.4592217,123.290155 62.4592217,108.914901 C62.4592217,94.5396472 72.607595,82.7145587 85.4738752,82.7145587 C98.3405064,82.7145587 108.709962,94.5189427 108.488529,108.914901 C108.508531,123.290155 98.3405064,135.09489 85.4738752,135.09489 Z M170.525237,135.09489 C157.88039,135.09489 147.510584,123.290155 147.510584,108.914901 C147.510584,94.5396472 157.658606,82.7145587 170.525237,82.7145587 C183.391518,82.7145587 193.761324,94.5189427 193.539891,108.914901 C193.539891,123.290155 183.391518,135.09489 170.525237,135.09489 Z" fill="white" fill-rule="nonzero"/>
                </g>
            </svg>
            Find players on Dune Discord
        </a>

        <div class="text-danger small">@_loadValidationError</div>
        <button class="btn btn-primary mt-1" @onclick="StartNewGame">@StartNewGameLabel</button>
    </div>
</div>

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">Join or observe a game</div>
    <div class="card-body">

        @if (!Client.RunningGames.Any())
        {
            <div class="text-info">No games hosted...</div>
        }
        else
        {
            <table class="table table-sm" id="availableGames">
                <tbody>

                    @foreach (var av in Client.RunningGames)
                    {
                        if (!joinPWD.ContainsKey(av.HostID))
                        {
                            joinPWD.Add(av.HostID, "");
                        }

                        if (!Client.JoinErrors.ContainsKey(av.HostID))
                        {
                            Client.JoinErrors.Add(av.HostID, "");
                        }

                        var fontColorStyle = av.LastAction != null && DateTime.Now.Subtract((DateTime)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                        <tr class="small table-dark">
                            <td class="w-25" style="@fontColorStyle">@av.GameName</td>
                            
                            @if (av.CurrentPhase == Phase.AwaitingPlayers)
                            {
                                <td class="w-50">
                                    @av.Players.Count() Players, @Skin.Current.Describe(Game.DetermineApproximateRuleset(av.FactionsInPlay, av.Rules, Game.ExpansionLevel)), maximum players: @av.MaximumNumberOfPlayers, maximum turns: @av.MaximumNumberOfTurns
                                </td>
                                <td class="w-25">

                                    @if (av.HasPassword)
                                    {
                                        <input class="form-inline input-sm" style="max-width:120px" @bind="joinPWD[av.HostID]" maxlength="24" placeholder="Game password" />
                                    }
                                    <button class="btn btn-primary btn-sm" @onclick="@(e => JoinGameAsPlayer(av.HostID, joinPWD[av.HostID]))">Join</button>
                                    <button class="btn btn-primary btn-sm" @onclick="@(e => JoinGameAsObserver(av.HostID, joinPWD[av.HostID]))">Observe</button>
                                    <div class="text-danger">@Client.JoinErrors[av.HostID]</div>
                                </td>
                            }
                            else
                            {
                                var factions = av.FactionsInPlay != null ? av.FactionsInPlay : new List<Faction>();
                                <td style="@fontColorStyle">
                                    @Name(Game.DetermineApproximateRuleset(factions, av.Rules, Game.ExpansionLevel)), Turn @av.CurrentTurn: @Name(av.CurrentMainPhase)
                                    <br>
                                    @foreach (var f in factions.Where(f => f != Faction.None))
                                    {
                                        <Image Shown="f" Width="20" Shadow=""/>
                                    }
                                    @NumberOfBotsMessage(av)

                                </td>
                                <td>
                                    @if (Client.GameInProgressHostId == av.HostID)
                                    {
                                        <div class="form-inline">
                                            @if (av.HasPassword)
                                            {
                                                <input class="form-inline input-sm" @bind="joinPWD[av.HostID]" maxlength="24" placeholder="Game password" />
                                            }
                                            <button class="btn btn-primary btn-sm" @onclick="@(e => RejoinGameAsPlayer(av.HostID, joinPWD[av.HostID]))">Reconnect</button>
                                        </div>
                                        <div class="text-danger">@Client.JoinErrors[av.HostID]</div>
                                    }
                                    <button class="btn btn-primary btn-sm" @onclick="@(e => RejoinGameAsObserver(av.HostID, joinPWD[av.HostID]))">Observe</button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {

    private const int MAX_SAVEGAME_SIZE = 4194304;

    public object _fileInput;
    private string _loadValidationError = "";

    private string loadedGameData = null;
    private Game loadedGame = null;

    private string restoredGameData = null;
    private Game restoredGame = null;

    private string recentGameData = null;
    private GameState recentGameState = null;

    private string hostPWD = "";
    private Dictionary<int, string> joinPWD = new();

    public GameInfo RejoinableGame(int hostID)
    {
        return Client.RunningGames.FirstOrDefault(g => g.HostID == hostID && g.CurrentPhase > Phase.AwaitingPlayers);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Delay(200).ContinueWith(e => LoadRecentGame());
            StartRedrawCycle(5000);
        }
    }

    private async Task LoadRecentGame()
    {
        recentGameData = await Browser.LoadSetting<string>(string.Format("treachery.online;latestgame;{0}", Client.PlayerName.ToLower().Trim()));
        if (recentGameData != default)
        {
            recentGameState = GameState.Load(recentGameData);
            StateHasChanged();
        }
    }

    private async Task StartNewGame()
    {
        await Client.StartHost(hostPWD, loadedGameData != null ? loadedGameData : restoredGameData, loadedGame != null ? loadedGame : restoredGame);
    }

    private async Task JoinGameAsPlayer(int hostID, string pwd)
    {
        Client.JoinErrors[hostID] = "";
        await Client.Request(hostID, new PlayerJoined { HashedPassword = Support.GetHash(pwd), Name = Client.PlayerName });
    }

    private async Task RejoinGameAsPlayer(int hostID, string pwd)
    {
        Client.JoinErrors[hostID] = "";
        await Client.Request(Client.GameInProgressHostId, new PlayerRejoined { HashedPassword = Support.GetHash(pwd), Name = Client.PlayerName });
    }

    private async Task JoinGameAsObserver(int hostID, string pwd)
    {
        Client.JoinErrors[hostID] = "";
        await Client.Request(hostID, new ObserverJoined { HashedPassword = Support.GetHash(pwd), Name = Client.PlayerName });
    }

    private async Task RejoinGameAsObserver(int hostID, string pwd)
    {
        Client.JoinErrors[hostID] = "";
        await Client.Request(hostID, new ObserverRejoined { HashedPassword = Support.GetHash(pwd), Name = Client.PlayerName });
    }

    private string NumberOfBotsMessage(GameInfo av)
    {
        if (av.NumberOfBots == 1)
        {
            return string.Format(" ({0} players, 1 bot)", av.Players.Length);
        }

        if (av.NumberOfBots > 1)
        {
            return string.Format(" ({0} players, {1} bots)", av.Players.Length, av.NumberOfBots);
        }

        return string.Format(" ({0} players)", av.Players.Length);
    }

    bool _loading = false;
    private async Task LoadGame()
    {
        _loading = true;
        _loadValidationError = "";
        StateHasChanged();
        await Task.Delay(200).ContinueWith(e => LoadGame_Continued());
    }

    private async Task LoadGame_Continued()
    {
        try
        {
            loadedGameData = await Browser.LoadFile(_fileInput);
            await Browser.ClearFileInput("fileInput");

            if (loadedGameData.Length < MAX_SAVEGAME_SIZE)
            {
                var state = GameState.Load(loadedGameData);

                if (state.Version > 0)
                {
                    restoredGame = null;
                    restoredGameData = null;

                    var result = Game.TryLoad(state, true, true, out loadedGame);
                    if (result != null)
                    {
                        _loadValidationError = string.Format("Error loading game ({0})", result.ToString(Skin.Current));
                    }
                }
                else
                {
                    _loadValidationError = "Invalid savegame file....";
                }
            }
            else
            {
                _loadValidationError = "Savegame file is too big...";
            }
        }
        catch (Exception e)
        {
            _loadValidationError = string.Format("Error loading game ({0})", e.Message);
        }

        _loading = false;
        StateHasChanged();
    }

    bool _restoring = false;
    private async void RestoreGame()
    {
        loadedGame = null;
        loadedGameData = null;
        _restoring = true;
        StateHasChanged();
        await Task.Delay(200).ContinueWith(e => RestoreGame_Continued());
    }

    private void RestoreGame_Continued()
    {
        if (Game.TryLoad(recentGameState, false, true, out restoredGame) == null)
        {
            restoredGameData = recentGameData;
        }

        _restoring = false;
        StateHasChanged();
    }

    private string LoadGameLabel
    {
        get
        {
            if (_loading)
            {
                return "Loading...";
            }

            if (loadedGame == null)
            {
                return "Click here if you wish to load a saved game...";
            }

            return Skin.Current.Format("Loaded game: {0} players - turn {1}, started: {2}", loadedGame.Players.Count, loadedGame.CurrentTurn, loadedGame.Started);
        }
    }

    private string RestoreGameLabel
    {
        get
        {
            if (_restoring)
            {
                return "Restoring...";
            }

            if (restoredGame != null)
            {
                return Skin.Current.Format("Restored game: {0} players - turn {1}, started: {2}", restoredGame.Players.Count, restoredGame.CurrentTurn, restoredGame.Started);
            }

            if (recentGameState != null)
            {
                return Skin.Current.Format("Click here to restore your most recently hosted game");
            }

            return "";
        }
    }

    private string StartNewGameLabel => loadedGame != null || restoredGame != null ? "Continue Game!" : "Create Game!";

}
