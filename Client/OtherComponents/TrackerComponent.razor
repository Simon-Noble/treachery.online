<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using System.Linq;
@using Treachery.Client.GenericComponents;
@inherits GameComponent

<CardPickerComponent Tracker="this" Id="picker" />

<div class="card mb-2">

    <div class="card-header">
        Card Tracker
        <InfoComponent Contents="@InfoMessage" />
        <CollapseButton @bind-Collapsed="Collapsed" />
    </div>

    @if (!Collapsed)
    {
        <div class="card-body">

            <div class="mb-1">

                @foreach (var p in Players)
                {
                    <button class="btn @ButtonStyle(p) p-1" @onclick="(e => Toggle(p))" data-bs-toggle="tooltip" title="@Skin.Current.Describe(p.Faction)">
                        <img class="img-fluid" width="29" height="29" src="@Skin.Current.GetFactionTableImageURL(p.Faction)" />
                    </button>
                }

                <button class="btn @ButtonStyle(h.Game.TreacheryDiscardPile) p-1" @onclick="(e => Toggle(h.Game.TreacheryDiscardPile))" data-bs-toggle="tooltip" title="Discarded Treachery Cards">
                    <img class="img-fluid ms-1 me-1" width="21" height="29" src="@Skin.Current.CardBack_TreacheryCard_URL" />
                </button>

                <button class="btn @ButtonStyle(h.Game.ResourceCardDeck) p-1" @onclick="(e => Toggle(h.Game.ResourceCardDeck))" data-bs-toggle="tooltip" title="Discarded Spice Cards">
                    <img class="img-fluid ms-1 me-1" width="21" height="29" src="@Skin.Current.CardBack_ResourceCard_URL" />
                </button>

            </div>

            @if (Shown is Player)
            {
                var p = (Player)Shown;

                <div>Treachery cards</div>
                <div class="row row-cols-4 m-0">

                    @for (int i = 0; i < p.MaximumNumberOfCards; i++)
                    {
                        int selIndex = i;
                        int cardId = Info.TrackedTreacheryCards[p.Faction][selIndex];

                        <div class="card border-0"
                                data-bs-toggle="popover" data-bs-animation="true" data-bs-content="@DeterminePopup(Info.TrackedTreacheryCards[p.Faction][selIndex])" data-bs-html="true" data-bs-placement="top" data-bs-trigger="hover">

                            @if (cardId == TreacheryCard.NONE)
                            {
                                <a class="btn btn-link p-1" data-bs-toggle="modal" data-bs-target="#picker" @onmousedown="e => SetCurrent(p.Faction, selIndex)">
                                    <svg class="img-fluid w-100" viewBox="0 0 268 372" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="268" height="372" rx="20" style="fill:rgb(64,64,64);stroke-width:3;stroke:rgb(200,200,200)" />
                                    </svg>
                                </a>
                            }
                            else if (cardId == TreacheryCard.UNKNOWN)
                            {
                                <a class="btn btn-link p-1" data-bs-toggle="modal" data-bs-target="#picker" @onmousedown="e => SetCurrent(p.Faction, selIndex)">
                                    <img src="@Skin.Current.CardBack_TreacheryCard_URL" class="img-fluid" />
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-link p-1" data-bs-toggle="modal" data-bs-target="#picker" @onmousedown="e => SetCurrent(p.Faction, selIndex)">
                                    <img src="@DetermineImageSrc(cardId)" class="img-fluid" />
                                </a>
                            }

                        </div>
                    }

                </div>

                @if (p.Faction == Faction.Green)
                {
                    <div>Traitors discarded at start</div>
                    <PickFromImageComponent Value=@LeaderManager.HeroLookup.Find(Info.GetDiscardedTraitor(0)) OnChanged=@(hero => Info.ChangeDiscardedTraitor(0, hero?.Id)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors" ImageURLs="AllTraitors_ImageURLs" PopupHTMLs="AllTraitors_Popups"/>
                    <PickFromImageComponent Value=@LeaderManager.HeroLookup.Find(Info.GetDiscardedTraitor(1)) OnChanged=@(hero => Info.ChangeDiscardedTraitor(1, hero?.Id)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors" ImageURLs="AllTraitors_ImageURLs" PopupHTMLs="AllTraitors_Popups"/>
                    <PickFromImageComponent Value=@LeaderManager.HeroLookup.Find(Info.GetDiscardedTraitor(2)) OnChanged=@(hero => Info.ChangeDiscardedTraitor(2, hero?.Id)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors" ImageURLs="AllTraitors_ImageURLs" PopupHTMLs="AllTraitors_Popups"/>
                }
                else if (p.Faction != Faction.Purple)
                {
                    <div>Revealed @(p.NumberOfTraitors > 1 ? "Traitors" : "Traitor")</div>
                    @for (int i = 0; i < p.NumberOfTraitors; i++)
                    {
                        var selIndex = i;
                        <PickFromImageComponent Value=@LeaderManager.HeroLookup.Find(Info.GetSelectedTraitor(p.Faction, selIndex)) OnChanged=@(hero => Info.ChangeSelectedTraitor(p.Faction, selIndex, hero?.Id)) Title="Select Revealed Traitor" Required=false ImageWidth=60 Values="AllTraitors" ImageURLs="AllTraitors_ImageURLs" PopupHTMLs="AllTraitors_Popups"/>
                    }
                }
                else
                {
                    <div>Revealed Face Dancers</div>
                    @for (int i = 0; i < p.NumberOfFacedancers; i++)
                    {
                        var selIndex = i;
                        <PickFromImageComponent Value=@LeaderManager.HeroLookup.Find(Info.GetSelectedTraitor(p.Faction, selIndex)) OnChanged=@(hero => Info.ChangeSelectedTraitor(p.Faction, selIndex, hero?.Id)) Title="Select Revealed Face Dancer" Required=false ImageWidth=60 Values="AllTraitors" ImageURLs="AllTraitors_ImageURLs" PopupHTMLs="AllTraitors_Popups"/>
                    }
                }
            }

            else if (Shown == h.Game.TreacheryDiscardPile)
            {
                <ul class="list-inline mt-0">

                    @foreach (var c in Info.DiscardedCards.Union(Info.RemovedCards))
                    {
                        <li class="list-inline-item">

                            <p class="mb-0">
                                <span class="badge bg-primary rounded-pill" data-bs-animation="true" data-bs-content="@Support.GetTreacheryCardHoverHTML(c)" data-bs-html="true" data-bs-placement="top" data-bs-trigger="hover" data-bs-toggle="popover" data-container="body">@c</span>
                                <button class="close" @onclick="@(e => SetNotDiscarded(c))"><span aria-hidden="true">&times;</span></button>
                            </p>

                        </li>
                    }

                    @if (!Info.DiscardedCards.Any() && !Info.RemovedCards.Any())
                    {
                        <li class="list-inline-item text-info">No treachery cards discarded yet.</li>
                    }

                </ul>

                <button class="btn btn-primary btn-sm" @onclick="@Info.ClearDiscarded">Reshuffle (clear) discarded cards</button>
            }

            else if (Shown == h.Game.ResourceCardDeck)
            {
                <div>Top @Skin.Current.Describe(Concept.Resource) Card</div>
                <PickFromImageComponent Value=SpiceCard(Info.TrackedSpiceCard) OnChanged=@(card => Info.TrackedSpiceCard = card?.ToString()) Title="Select Card" Required=false ImageWidth=60 Values="AllSpiceCards" ImageURLs="AllSpiceCards_ImageURLs" PopupHTMLs="AllSpiceCards_Popups"/>

                if (h.Game.Applicable(Rule.IncreasedResourceFlow))
                {
                    @if (h.Game.ResourceCardDiscardPileA.Items.Any() || h.Game.ResourceCardDiscardPileA.Items.Any())
                    {
                        <div class="small"><strong>Discard pile A:</strong> @string.Join(", ", h.Game.ResourceCardDiscardPileA.Items)</div>
                        <div class="small"><strong>Discard pile B:</strong> @string.Join(", ", h.Game.ResourceCardDiscardPileB.Items)</div>
                    }
                }
                else
                {
                    @if (h.Game.ResourceCardDiscardPileA.Items.Any())
                    {
                        <div class="small"><strong>Discarded:</strong> @string.Join(", ", h.Game.ResourceCardDiscardPileA.Items)</div>
                    }
                }
            }

        </div>
    }

</div>


@code {

    private object Shown = null;

    private int trackedGameId = -1;

    private GreenIntelligence Info = null;

    private bool popoversNeedUpdate = true;

    protected override async Task OnInitializedAsync()
    {
        Info = new GreenIntelligence(h.Game);

        try
        {
            await Load();
        }
        catch (Exception e)
        {
            Support.Log(e);
        }

        AllTraitors = h.Game.TraitorsInPlay.OrderBy(l => l.Name).ToList();
        AllSpiceCards = Game.ResourceCardDeck.Items.OrderBy(rc => rc.ToString()).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (trackedGameId != h.Game.Seed)
        {
            await Load();
            trackedGameId = h.Game.Seed;
        }
        else
        {
            await Save();
        }

        if (popoversNeedUpdate)
        {
            popoversNeedUpdate = false;
            await Browser.EnablePopovers();
        }
    }

    Faction currentlyPickedFaction = Faction.None;
    int currentlyPickedCardId;

    public int CurrentCard
    {
        get
        {
            if (currentlyPickedFaction != Faction.None)
            {
                return Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId];
            }
            else
            {
                return TreacheryCard.NONE;
            }
        }
    }

    private void SetCurrent(Faction f, int i)
    {
        currentlyPickedFaction = f;
        currentlyPickedCardId = i;
    }

    public void Pick(int cardID)
    {
        try
        {
            Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] = cardID;
            popoversNeedUpdate = true;
            StateHasChanged();
        }
        catch (Exception)
        {

        }
    }

    public void Discard()
    {
        try
        {
            if (Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] != TreacheryCard.NONE && Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] != TreacheryCard.UNKNOWN)
            {
                Info.Discard(currentlyPickedFaction, currentlyPickedCardId);
                popoversNeedUpdate = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }

    public IEnumerable<TreacheryCard> CardsToPick => Info.AvailableDistinctCards(currentlyPickedFaction, currentlyPickedCardId);

    private void SetNotDiscarded(TreacheryCard c)
    {
        Info.SetNotDiscarded(c);
        popoversNeedUpdate = true;
        StateHasChanged();
    }

    public string DeterminePopup(int cardID)
    {
        if (cardID == -1)
        {
            return "<div class='p-1 small' style='color:black;background-color:white;border: 1px solid black;'>Unknown</div>";
        }
        else if (cardID == -2)
        {
            return "<div class='p-1 small' style='color:black;background-color:white;border: 1px solid black;'>None</div>";
        }
        else
        {
            var card = TreacheryCardManager.Lookup.Find(cardID);
            return Support.GetTreacheryCardHoverHTML(card);
        }
    }

    private string DetermineImageSrc(int cardID)
    {
        var card = TreacheryCardManager.Lookup.Find(cardID);
        return Skin.Current.GetImageURL(card);
    }

    private async Task Save()
    {
        await Browser.SaveSetting(string.Format("treachery.online;currentgame;{0};trackerdata", h.Game.Seed), Info.ToString());
    }

    private async Task Load()
    {
        var trackerdata = await Browser.LoadSetting<string>(string.Format("treachery.online;currentgame;{0};trackerdata", h.Game.Seed));
        if (trackerdata != null && trackerdata != "")
        {
            Info = GreenIntelligence.Parse(h.Game, trackerdata);
            StateHasChanged();
        }
    }

    public class CardInfo
    {
        public Player Player;
        public int CardNumber;
        public int CardId;
    }

    private IList<IHero> AllTraitors { get; set; }

    private IEnumerable<string> AllTraitors_ImageURLs => AllTraitors.Select(c => Skin.Current.GetImageURL(c));

    private IEnumerable<string> AllTraitors_Popups => AllTraitors.Select(c => Support.GetHeroHoverHTML(c, Game));

    private IList<ResourceCard> AllSpiceCards { get; set; }

    private IEnumerable<string> AllSpiceCards_ImageURLs => AllSpiceCards.Select(c => Skin.Current.GetImageURL(c));

    private IEnumerable<string> AllSpiceCards_Popups => AllSpiceCards.Select(c => Support.GetResourceCardHoverHTML(c));

    private ResourceCard SpiceCard(string name) => AllSpiceCards.FirstOrDefault(c => c.ToString() == name);

    private IEnumerable<Player> Players => h.Game.Players.OrderBy(p => Skin.Current.Describe(p.Faction));

    private string InfoMessage => Skin.Current.Format("Welcome to the {0} Tracker! Use it to take note of (discarded) traitors, the top spice card and treachery cards.<br>When a (possibly unknown) card is won, click on an empty card placeholder and select it.<br>To indicate that a card was discarded, click it and then select the 'trash can' which will move the card to the Discarded section. When an unknown card becomes known and discarded, select it first, then discard it.<br>When the discard pile is shuffled into a new draw pile, click 'reshuffle' to clear the Discarded section.<br>If you sent a card to the Discarded section by mistake, click on the X next to it.", Faction.Green);

    private void Toggle(object toShow)
    {
        if (toShow == Shown)
        {
            Shown = null;
        }
        else
        {
            Shown = toShow;
        }

        popoversNeedUpdate = true;
    }

    private string ButtonStyle(object o)
    {
        if (o == Shown)
        {
            return "btn-primary";
        }
        else
        {
            return "btn-outline-primary";
        }
    }
}
