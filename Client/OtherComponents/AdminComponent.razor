<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameComponent

<div class="card p-1 mb-2">
    <div class="card-header">Undo</div>

    <div class="card-body">
        <label class="mb-0" for="undoEventNr">Select up to (including) which action should be undone</label>
        <select class="custom-select" @bind="undoEventId" id="undoEventNr">
            @foreach (var i in UndoableEvents)
            {
                <option value=@i.Key>@i.Value</option>
            }
        </select>
        <button class="btn btn-primary mt-1" @onclick="ConfirmUndo">Confirm</button>
    </div>
</div>

@code {

    private int undoEventId;

    protected override void OnParametersSet()
    {
        undoEventId = h.Game.History.Count - 1;
    }

    private async Task ConfirmUndo()
    {
        await h.Host.Undo(undoEventId);
    }

    private IEnumerable<int> ValidEventIds
    {
        get
        {
            if (h.Game.History.Count > 1)
            {
                return Enumerable.Range(1, h.Game.History.Count - 1).OrderByDescending(v => v);
            }
            else
            {
                return new int[] { };
            }
        }
    }

    private Dictionary<int, string> UndoableEvents
    {
        get
        {
            var result = new Dictionary<int, string>();
            for (int i = h.Game.History.Count - 1; i > 0; i--)
            {
                var e = h.Game.History[i];
                if (!(e is AllyPermission) && !(e is BattleRevision))
                {
                    result.Add(i, "" + i + ". " + e.GetMessage());
                }
            }
            return result;
        }
    }
}
