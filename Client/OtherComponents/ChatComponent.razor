<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;
@inject IJSRuntime JSRuntime;

<JsPanel Title="Chat" Width="400" Height="150" ShowClose="false" ShowMaximize="false" ShowMinimize="true" ShowSmallify="true" Opacity="0.9f" Position="JsPanel.PanelPosition.RightBottom" ContentOverflow="hidden">

    <div class="row">

        <div class="col-10">
            <input class="form-control form-control-sm" type="text" maxlength="512" placeholder="Your message..." id="messageSentBody" />
        </div>

        <div class="col-2 text-end">
            <button type="button" class="btn bg-transparent btn-sm float-end" title="popout chat window" @onclick="@Handler.PopoutChatWindow">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="currentColor" width="12" heigh="12" viewBox="0 0 1000 1000" xml:space="preserve">
                <metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>
                <g><path d="M485,379.5l130.6,130.6l245.8-245.8l126.9,126.9l0.2-379L607.1,10l123.8,123.7L485,379.5L485,379.5z M986.4,546.3l-94.1-95.4l1.7,441.3l-784.7,0.4l0.8-782.7l438.9-2l-98-98H108C53.9,10,10,54,10,108v784c0,54.1,43.9,98,98,98h784c54.1,0,98-43.9,98-98L986.4,546.3z" /></g>
                </svg>
            </button>
        </div>

    </div>

    <div class="form-inline">

        <select style="color:white;background-color:@SelectedFactionColor" class="form-control-sm mt-1" @bind="@playername" id="messageSentTarget">
            <option style="color:red;background-color:white" value="">EVERYONE</option>
            @foreach (var p in h.Game.Players.Where(p => p.Name != h.MyName))
            {
                <option style="color:@Skin.Current.GetFactionColor(p.Faction);background-color:white" value="@p.Name">@p.Name</option>
            }
        </select>

        <button class="btn btn-primary form-control-sm btn-sm mt-1 ms-1" onclick="SendChatMessage()">Send</button>

    </div>

    @foreach (var m in h.Messages)
    {
        <div class='text-break p-1 mt-1 small' style="background-color:@Skin.Current.GetFactionColor(m.GetSourceFaction(h.Game))">@m.GetBodyIncludingPlayerInfo(h.MyName, h.Game)</div>
    }

</JsPanel>

@code {

    private string playername;
    private static Handler currentHandler;

    protected override void OnInitialized()
    {
        currentHandler = h;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("AddChatEnterListener");
    }

    private string SelectedFactionColor
    {
        get
        {
            var p = h.Game.GetPlayer(playername);
            if (p != null)
            {
                return Skin.Current.GetFactionColor(p.Faction);
            }
            else
            {
                return "red";
            }
        }
    }

    [JSInvokable("SendMessage")]
    public static async Task SendMessage(string msg, string target)
    {
        var sourcePlayer = currentHandler.Player;
        var targetPlayer = currentHandler.Game.GetPlayer(target);
        await currentHandler.HostProxy.Request(
            new ChatMessage()
            {
                SourcePlayerName = sourcePlayer != null ? currentHandler.Player.Name : "",
                TargetPlayerName = targetPlayer != null ? targetPlayer.Name : "",
                Body = msg
            });
    }

    [JSInvokable("InitializeChatPopup")]
    public static void InitializeChatPopup()
    {
        var init = new PopupChatInitialization()
        {
            playerNames = currentHandler.Game.Players.Where(p => p.Name != currentHandler.Player.Name).Select(p => p.Name).ToArray(),
            playerStyles = currentHandler.Game.Players.Where(p => p.Name != currentHandler.Player.Name).Select(p => Skin.Current.GetFactionColor(p.Faction)).ToArray(),
            messages = currentHandler.Messages.Select(m => currentHandler.ConstructPopupChatMessage(m)).ToArray()
        };

        _ = Task.Delay(1000).ContinueWith(e => Browser.SendToChatPopup(init));
    }
}

