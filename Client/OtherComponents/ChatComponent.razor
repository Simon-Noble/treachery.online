<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;
@inject IJSRuntime JSRuntime;

<div class="card border-none" style="background-color:@BackgroundColor;border:none;">

    <div class="card-body">

        <div class="d-flex flex-row-reverse">

            <input @bind-value=message class="form-control" type="text" maxlength="512" placeholder=@Placeholder id="messageSentBody" @onkeyup=@(e => KeyUp(e))/>

        </div>

        <div class="d-flex flex-row-reverse mt-1">

            <button class="btn btn-primary" @onclick="(e => Send())">Send</button>

            @if (ShowGameChat)
            {
                <select class="form-select" style="color:@SelectedFactionForegroundColor;background-color:@SelectedFactionColor" @bind="@playername" id="messageSentTarget">

                    @if (!Client.MuteGlobalChat)
                    {
                        <option style="color:red;font-weight:bold;background-color:white" value="@LABEL_GLOBAL_CHAT">@LABEL_GLOBAL_CHAT</option>
                    }

                    <option style="color:red;font-weight:bold;background-color:white" value="@LABEL_ALL_PLAYERS_IN_GAME">@LABEL_ALL_PLAYERS_IN_GAME</option>

                    @foreach (var p in Client.Game.Players.Where(p => p.Name != Client.MyName))
                    {
                        <option style="color:@Skin.Current.GetFactionColor(p.Faction);background-color:white" value="@p.Name">@p.Name</option>
                    }

                </select>
            }
            else
            {
                playername = LABEL_GLOBAL_CHAT;
            }

        </div>

        @foreach (var m in Client.Messages.Where(message => !Client.MuteGlobalChat || message is not GlobalChatMessage))
        {
            var bgcolor = (m) switch
            {
                GameChatMessage gcm => Skin.Current.GetFactionColor(gcm.GetSourceFaction(Client.Game)),
                GlobalChatMessage gcm => "grey",
                _ => "grey"
            };

            <div class='text-break p-1 mt-1 small' style="background-color:@bgcolor">
                <ExpressionComponent Game=Game Expression=@m.GetBodyIncludingPlayerInfo(Client.MyName, Client.Game, Client.HostProxy == null).Expression Size=20/>
            </div>
        }

        @if (ShowGameChat)
        {
            <div class="mt-1" style="color:black">
                <CheckboxComponent @bind-Value="Client.MuteGlobalChat">Hide global chat messages</CheckboxComponent>
            </div>
        }

        </div>

</div>

@code {

    [Parameter]
    public string BackgroundColor { get; set; } = "transparent";

    private const string LABEL_GLOBAL_CHAT = "everyone (on treachery.online)";
    private const string LABEL_ALL_PLAYERS_IN_GAME = "all players (this game)";

    private string message;
    private string playername;
    private static Client currentHandler;

    protected override void OnInitialized()
    {
        currentHandler = Client;

        if (ShowGameChat)
        {
            if (Client.Game.Players.Where(p => p.Name != Client.MyName).Any())
            {
                playername = Client.Game.Players.Where(p => p.Name != Client.MyName).Select(p => p.Name).First();
            }
            else
            {
                playername = LABEL_ALL_PLAYERS_IN_GAME;
            }
        }
        else
        {
            playername = LABEL_GLOBAL_CHAT;
        }
    }

    private async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        await SendMessage(message, playername);
        message = "";
    }

    [JSInvokable("SendMessage")]
    public static async Task SendMessage(string msg, string target)
    {
        var sourcePlayer = currentHandler.Player;

        if (target == LABEL_GLOBAL_CHAT)
        {
            await currentHandler.Request(
                new GlobalChatMessage()
                    {
                        SourcePlayerName = sourcePlayer != null ? currentHandler.Player.Name : "",
                        Body = msg
                    });

        }
        else {

            var targetPlayer = target == LABEL_GLOBAL_CHAT || target == LABEL_ALL_PLAYERS_IN_GAME ? null : currentHandler.Game.GetPlayer(target);

            await currentHandler.HostProxy.Request(
                new GameChatMessage()
                {
                    SourcePlayerName = sourcePlayer != null ? currentHandler.Player.Name : "",
                    TargetPlayerName = targetPlayer != null ? targetPlayer.Name : "",
                    Body = msg
                });
        }
    }

    private string Placeholder => "Chat to " + playername + "...";

    private string SelectedFactionColor
    {
        get
        {
            if (Client.Faction == Faction.None)
            {
                return "white";
            }
            else
            {
                var p = Client.Game.GetPlayer(playername);
                if (p != null)
                {
                    return Skin.Current.GetFactionColor(p.Faction);
                }
                else
                {
                    return "red";
                }
            }
        }
    }

    private string SelectedFactionForegroundColor
    {
        get
        {
            if (Client.Faction == Faction.None)
            {
                return "black";
            }
            else
            {
                return "white";
            }
        }
    }

    private bool ShowGameChat => Client.HostProxy != null && !Client.IsObserver;
}

