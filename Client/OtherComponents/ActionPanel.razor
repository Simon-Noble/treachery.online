<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GameEventComponents;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;

<div>

    @if (!h.IsHost && h.CurrentPhase == Phase.AwaitingPlayers)
    {
        <AwaitingGameComponent h="@h" />
    }

    @if (h.Actions.Contains(typeof(EstablishPlayers)))
    {
        <EstablishPlayersComponent h="@h" />
    }

    @if (h.Game.CurrentPhase == Phase.Bidding)
    {
        <NormalBiddingPanel h="h" CanBid="h.Actions.Contains(typeof(Bid))" />
    }

    @if (h.Game.CurrentPhase == Phase.BlackMarketBidding)
    {
        <BlackMarketBiddingPanel h="h" CanBid="h.Actions.Contains(typeof(BlackMarketBid))" />
    }

    @foreach (var a in h.Actions)
    {
        switch (a.Name)
        {
            case "FactionSelected":
                {
                    <FactionSelectedComponent h="@h" />
                }
                break;
            case "FactionTradeOffered":
                {
                    <FactionTradeOfferedComponent h="@h" />
                }
                break;
            case "SkillAssigned":
                {
                    <SkillAssignedComponent h="@h" />
                }
                break;
            case "StormDialled":
                {
                    <StormDialledComponent h="@h" />
                }
                break;
            case "CardsDetermined":
                {
                    <CardsDeterminedComponent h="@h" />
                }
                break;
            case "PerformSetup":
                {
                    <PerformSetupComponent h="@h" />
                }
                break;
            case "PerformYellowSetup":
                {
                    <PerformYellowSetupComponent h="@h" />
                }
                break;
            case "BluePrediction":
                {
                    <BluePredictionComponent h="@h" />
                }
                break;
            case "PerformBluePlacement":
                {
                    <PerformBluePlacementComponent h="@h" />
                }
                break;
            case "PerformCyanSetup":
                {
                    <PerformCyanSetupComponent h="@h" />
                }
                break;
            case "MulliganPerformed":
                {
                    <MulliganPerformedComponent h="@h" />
                }
                break;
            case "TraitorsSelected":
                {
                    <TraitorsSelectedComponent h="@h" />
                }
                break;
            case "StormSpellPlayed":
                {
                    <StormSpellPlayedComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.StormSpell)" />
                }
                break;
            case "MetheorPlayed":
                {
                    <SimpleActionComponent GameEventType="MetheorPlayed" h="@h" BackgroundImage="@GetImage(TreacheryCardType.Metheor)" Title="@DescribeCard(TreacheryCardType.Metheor)" Alert="false" ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Metheor)" />
                }
                break;
            case "TakeLosses":
                {
                    <TakeLossesComponent h="@h" />
                }
                break;
            case "YellowSentMonster":
                {
                    <YellowSentMonsterComponent h="@h" />
                }
                break;
            case "YellowRidesMonster":
                {
                    <YellowRideComponent h="@h" />
                }
                break;
            case "AllianceOffered":
                {
                    <AllianceOfferedComponent h="@h" />
                }
                break;
            case "AllianceBroken":
                {
                    <SimpleActionComponent GameEventType="AllianceBroken" h="@h" Title="Break your current alliance?" Alert="false" ConfirmLabel="Break" />
                }
                break;
            case "NexusCardDrawn":
                {
                    <NexusCardDrawnComponent h="@h" />
                }
                break;
            case "CharityClaimed":
                {
                    <SimpleActionComponent GameEventType="CharityClaimed" h="@h" Title="Claim Charity?" Alert="false" ConfirmLabel="Claim" />
                }
                break;
            case "Revival":
                {
                    <RevivalComponent h="@h" />
                }
                break;
            case "Shipment":
                {
                    <ShipmentComponent h="@h" />
                }
                break;
            case "OrangeDelay":
                {
                    <SimpleActionComponent GameEventType="OrangeDelay" h="@h" Title="Delay your turn?" Alert="true" ConfirmLabel="Delay" AllowAutoConfirm=true/>
                }
                break;
            case "BlueAccompanies":
                {
                    <BlueAccompaniesComponent h="@h" />
                }
                break;
            case "BlueFlip":
                {
                    <BlueFlipComponent h="@h" />
                }
                break;
            case "TerrorRevealed":
                {
                    <TerrorRevealedComponent h="@h" />
                }
                break;
            case "AmbassadorActivated":
                {
                    <AmbassadorActivatedComponent h="@h" />
                }
                break;
             case "AllianceByTerror":
                {
                    <YesNoActionComponent GameEventType="AllianceByTerror" h="@h" Title=@Skin.Current.Format("Enter an alliance with {0}?", Faction.Cyan) Alert="true" />
                }
                break;
            case "AllianceByAmbassador":
                {
                    <YesNoActionComponent GameEventType="AllianceByAmbassador" h="@h" Title=@Skin.Current.Format("Enter an alliance with {0}?", Faction.Pink) Alert="true" />
                }
                break;
            case "BlueBattleAnnouncement":
                {
                    <BlueBattleAnnouncementComponent h="@h" />
                }
                break;
            case "Move":
                {
                    <MoveComponent h="@h" />
                }
                break;
            case "Caravan":
                {
                    <CaravanComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Caravan)" />
                }
                break;
            case "BattleInitiated":
                {
                    <BattleInitiatedComponent h="@h" />
                }
                break;
            case "Voice":
                {
                    <VoiceComponent h="@h" />
                }
                break;
            case "Prescience":
                {
                    <PrescienceComponent h="@h" />
                }
                break;
            case "Battle":
                {
                    <BattleComponent h="@h" />
                }
                break;
            case "BattleRevision":
                {
                    <SimpleActionComponent GameEventType="BattleRevision" h="@h" Title="Change your battle plan?" Alert="false" ConfirmLabel="Change Plan" />
                }
                break;
            case "TreacheryCalled":
                {
                    <TreacheryCalledComponent h="@h" />
                }
                break;
            case "BattleConcluded":
                {
                    <BattleConcludedComponent h="@h" />
                }
                break;
            case "LoserConcluded":
                {
                    <LoserConcludedComponent h="@h" />
                }
                break;
            case "DivideResources":
                {
                    <DivideResourcesComponent h="@h" />
                }
                break;
            case "DivideResourcesAccepted":
                {
                    <YesNoActionComponent GameEventType="DivideResourcesAccepted" h="@h" Title=@Skin.Current.Format("Agree with the proposed division of {0}?", Concept.Resource) Alert="true" />
                }
                break;
            case "RaiseDeadPlayed":
                {
                    <RaiseDeadComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.RaiseDead)" />
                }
                break;
            case "Donated":
                {
                    <DonatedComponent h="@h" />
                }
                break;
            case "WhiteGaveCard":
                {
                    <WhiteGaveCardComponent h="@h" />
                }
                break;
            case "AllyPermission":
                {
                    <AllyPermissionComponent h="@h" />
                }
                break;
            case "ClairVoyancePlayed":
                {
                    <ClairVoyancePlayedComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Clairvoyance)" />
                }
                break;
            case "ClairVoyanceAnswered":
                {
                    <ClairVoyanceAnsweredComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Clairvoyance)" />
                }
                break;
            case "KarmaHandSwapInitiated":
                {
                    <KarmaHandSwapInitiatedComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaShipmentPrevention":
                {
                    <KarmaShipmentPreventionComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaRevivalPrevention":
                {
                    <KarmaRevivalPreventionComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaHandSwap":
                {
                    <KarmaHandSwapComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaFreeRevival":
                {
                    <KarmaFreeRevivalComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaHmsMovement":
                {
                    <KarmaHmsMovementComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaMonster":
                {
                    <KarmaMonsterComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaPrescience":
                {
                    <SimpleActionComponent GameEventType="KarmaPrescience" h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" Title="@Skin.Current.Format("Use {0} to see the entire enemy battle plan", TreacheryCardType.Karma)" Alert="false" ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Karma)" />
                }
                break;
            case "KarmaWhiteBuy":
                {
                    <KarmaWhiteBuyComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "Karma":
                {
                    <KarmaComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "FaceDanced":
                {
                    <FaceDancedComponent h="@h" />
                }
                break;
            case "FaceDancerReplaced":
                {
                    <FaceDancerReplacedComponent h="@h" />
                }
                break;
            case "SetIncreasedRevivalLimits":
                {
                    <SetIncreasedRevivalLimitsComponent h="@h" />
                }
                break;
            case "RedBidSupport":
                {
                    <RedBidSupportComponent h="@h" />
                }
                break;
            case "RequestPurpleRevival":
                {
                    <RequestPurpleRevivalComponent h="@h" />
                }
                break;
            case "AcceptOrCancelPurpleRevival":
                {
                    <AcceptOrCancelPurpleRevivalComponent h="@h" />
                }
                break;
            case "AmalPlayed":
                {
                    <SimpleActionComponent GameEventType="AmalPlayed" h="@h" BackgroundImage="@GetImage(TreacheryCardType.Amal)" Title="@DescribeCard(TreacheryCardType.Amal)" Alert="false" ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Amal)" />
                }
                break;
            case "WhiteAnnouncesBlackMarket":
                {
                    <WhiteAnnouncesBlackMarketComponent h="@h" />
                }
                break;
            case "GreyRemovedCardFromAuction":
                {
                    <GreyRemovedCardFromAuctionComponent h="@h" />
                }
                break;
            case "GreySelectedStartingCard":
                {
                    <GreySelectedStartingCardComponent h="@h" />
                }
                break;
            case "GreySwappedCardOnBid":
                {
                    <GreySwappedCardOnBidComponent h="@h" />
                }
                break;
            case "PerformHmsMovement":
                {
                    <PerformHmsMovementComponent h="@h" />
                }
                break;
            case "PerformHmsPlacement":
                {
                    <PerformHmsPlacementComponent h="@h" />
                }
                break;
            case "HarvesterPlayed":
                {
                    <SimpleActionComponent GameEventType="HarvesterPlayed" h="@h" BackgroundImage="@GetImage(TreacheryCardType.Harvester)" Title="@DescribeCard(TreacheryCardType.Harvester)" Alert="false" ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Harvester)" />
                }
                break;
            case "PoisonToothCancelled":
                {
                    <SimpleActionComponent GameEventType="PoisonToothCancelled" h="@h" BackgroundImage="@GetImage(TreacheryCardType.PoisonTooth)" Title="Cancel Poison Tooth?" Alert="false" ConfirmLabel="Cancel" />
                }
                break;
            case "ReplacedCardWon":
                {
                    <ReplacedCardWonComponent h="@h" />
                }
                break;
            case "ThumperPlayed":
                {
                    <SimpleActionComponent GameEventType="ThumperPlayed" h="@h" BackgroundImage="@GetImage(TreacheryCardType.Thumper)" Title="@DescribeCard(TreacheryCardType.Thumper)" Alert="false" ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Thumper)" />
                }
                break;
            case "HideSecrets":
                {
                    <SimpleActionComponent GameEventType="HideSecrets" h="@h" Title="Hide your secret info (like cards and traitors) from other players at the end of the game?" ConfirmLabel="Yes" Alert="true" Dismissable="true" DismissLabel="No" />
                }
                break;
            case "PlayerReplaced":
                {
                    <PlayerReplacedComponent h="@h" />
                }
                break;
            case "DealOffered":
                {
                    <DealOfferedComponent h="@h" />
                }
                break;
            case "Discarded":
                {
                    <DiscardedComponent h="@h" />
                }
                break;
            case "BrownDiscarded":
                {
                    <BrownDiscardedComponent h="@h" />
                }
                break;
            case "TerrorPlanted":
                {
                    <TerrorPlantedComponent h="@h" />
                }
                break;
            case "AmbassadorPlaced":
                {
                    <AmbassadorPlacedComponent h="@h" />
                }
                break;
            case "ExtortionPrevented":
                {
                    <SimpleActionComponent GameEventType="ExtortionPrevented" h="@h" Title=@Skin.Current.Format("Pay 3 to prevent ", Faction.Cyan, " from regaining their ", TerrorType.Extortion, " token?") ConfirmLabel="Yes" Alert="false" />
                }
                break;
            case "BrownEconomics":
                {
                    <BrownEconomicsComponent h="@h" />
                }
                break;
            case "CardTraded":
                {
                    <CardTradedComponent h="@h" />
                }
                break;
            case "KarmaBrownDiscard":
                {
                    <KarmaBrownDiscardComponent h="@h" BackgroundImage="@GetImage(TreacheryCardType.Karma)" />
                }
                break;
            case "AuditCancelled":
                {
                    <AuditCancelledComponent h="@h" />
                }
                break;
            case "Audited":
                {
                    <AuditedComponent h="@h" />
                }
                break;
            case "BrownExtraMove":
                {
                    <SimpleActionComponent GameEventType="BrownExtraMove" h="@h" BackgroundImage="@Skin.Current.GetImageURL(BrownExtraMove.CardToUse(h.Player))" Title="@Skin.Current.Format("Use {0} to be able to move your forces one extra territory?", BrownExtraMove.CardToUse(h.Player))" Alert="false" />
                }
                break;
            case "BrownMovePrevention":
                {
                    <BrownMovePreventionComponent h="@h" />
                }
                break;
            case "BrownKarmaPrevention":
                {
                    <BrownKarmaPreventionComponent h="@h" />
                }
                break;
            case "BrownFreeRevivalPrevention":
                {
                    <BrownFreeRevivalPreventionComponent h="@h" />
                }
                break;
            case "BrownRemoveForce":
                {
                    <BrownRemoveForceComponent h="@h" />
                }
                break;
            case "WhiteAnnouncesAuction":
                {
                    <WhiteAnnouncesAuctionComponent h="@h" />
                }
                break;
            case "WhiteSpecifiesAuction":
                {
                    <WhiteSpecifiesAuctionComponent h="@h" />
                }
                break;
            case "WhiteKeepsUnsoldCard":
                {
                    <WhiteKeepsUnsoldCardComponent h="@h" />
                }
                break;
            case "WhiteRevealedNoField":
                {
                    <SimpleActionComponent GameEventType="WhiteRevealedNoField" h="@h"
                                            IsFactionSpecific="Faction.White"
                                            Title="@Skin.Current.Format("Reveal your currently active No-Field of {0}, placing {1} forces?", h.Game.CurrentNoFieldValue, Math.Min(h.Game.CurrentNoFieldValue, h.Player.ForcesInReserve))"
                                            ConfirmLabel="Reveal" />
                }
                break;
            case "ResidualPlayed":
                {
                    <SimpleActionComponent GameEventType="ResidualPlayed" h="@h"
                                            BackgroundImage="@GetImage(TreacheryCardType.Residual)"
                                            Title="@Skin.Current.Format("Use {0} to kill a random available opponent leader?", TreacheryCardType.Residual)"
                                            ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.Residual)" />
                }
                break;
            case "FlightUsed":
                {
                    <FlightUsedComponent h="@h" />
                }
                break;
            case "RockWasMelted":
                {
                    <RockWasMeltedComponent h="@h" />
                }
                break;
            case "DistransUsed":
                {
                    <DistransUsedComponent h="@h" />
                }
                break;
            case "DiscardedTaken":
                {
                    <DiscardedTakenComponent h="@h" />
                }
                break;
            case "DiscardedSearchedAnnounced":
                {
                    <SimpleActionComponent GameEventType="DiscardedSearchedAnnounced" h="@h"
                                            BackgroundImage="@GetImage(TreacheryCardType.SearchDiscarded)"
                                            Title="@Skin.Current.Format("Use {0} to pay 2 and search and take a card from the treachery discard pile?", TreacheryCardType.SearchDiscarded)"
                                            ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.SearchDiscarded)" />
                }
                break;
            case "DiscardedSearched":
                {
                    <DiscardedSearchedComponent h="@h" />
                }
                break;
            case "JuicePlayed":
                {
                    <JuicePlayedComponent h="@h" />
                }
                break;
            case "PortableAntidoteUsed":
                {
                    <SimpleActionComponent GameEventType="PortableAntidoteUsed" h="@h"
                                            BackgroundImage="@GetImage(TreacheryCardType.PortableAntidote)"
                                            Title="@Skin.Current.Format("Use your {0}?", TreacheryCardType.PortableAntidote)"
                                            ConfirmLabel="@Skin.Current.Format("Use {0}", TreacheryCardType.PortableAntidote)" />
                }
                break;
            case "Bureaucracy":
                {
                    <YesNoActionComponent GameEventType="Bureaucracy" h="@h" BackgroundImage="@Skin.Current.GetImageURL(LeaderSkill.Bureaucrat)" Title="@Skin.Current.Format("Use your {0} skill?", LeaderSkill.Bureaucrat)" Alert="true" />
                }
                break;
            case "Captured":
                {
                    <YesNoActionComponent GameEventType="Captured" h="@h" Title="Do you wish to capture a random leader from your opponent?" Alert="true" ForFaction="Faction.Black" />
                }
                break;
            case "Diplomacy":
                {
                    <DiplomacyComponent h="@h" />
                }
                break;
            case "SwitchedSkilledLeader":
                {
                    var skilledLeader = SwitchedSkilledLeader.SwitchableLeader(Game, Player);
                    var title = Skin.Current.Format("Place {0} {1} your player shield?", skilledLeader, h.Game.IsInFrontOfShield(skilledLeader) ? "behind" : "in front of");
                    var confirmLabel = Skin.Current.Format("Put {0} shield", h.Game.IsInFrontOfShield(skilledLeader) ? "behind" : "in front of");

                    <SimpleActionComponent GameEventType="SwitchedSkilledLeader" h="@h"
                           BackgroundImage="@Skin.Current.GetImageURL(h.Game.Skill(skilledLeader))" Title="@title"
                           ConfirmLabel="@confirmLabel" />
                }
                break;
            case "Thought":
                {
                    <ThoughtComponent h="@h" />
                }
                break;
            case "ThoughtAnswered":
                {
                    <ThoughtAnsweredComponent h="@h" />
                }
                break;
            case "HMSAdvantageChosen":
                {
                    <HMSAdvantageChosenComponent h="@h" />
                }
                break;
            case "Retreat":
                {
                    <RetreatComponent h="@h" />
                }
                break;
            case "Planetology":
                {
                    <PlanetologyComponent h="@h" />
                }
                break;
        }
    }

    @if (DealAccepted.CurrentDeals(h.Game).Any() || h.IsPlayer && (DealAccepted.AcceptableDeals(h.Game, h.Player).Any() || DealAccepted.CancellableDeals(h.Game, h.Player).Any()))
    {
        <DealComponent h="@h" />
    }

    @if (h.Game.AssistedNotekeepingEnabled(Player))
    {
        <NoteComponent h="@h" />
    }

    @if (h.IsPlayer && h.CurrentPhase >= Phase.SelectingTraitors && h.IAm(Faction.Green))
    {
        <TrackerComponent h="@h" />
    }

    @if (h.Game.CurrentPhase == Phase.GameEnded && h.IsHost && !h.StatisticsSent && h.Game.Players.Count() >= 4 && h.Game.Players.Count(p => !(p.IsBot)) > h.Game.Players.Count(p => p.IsBot))
    {
        <UploadStatisticsComponent h="@h" />
    }

</div>

