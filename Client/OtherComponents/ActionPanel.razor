@using Treachery.Shared
@using Treachery.Client.GameEventComponents;

@if (!h.IsHost && h.CurrentPhase == Phase.AwaitingPlayers)
{
    <AwaitingGameComponent h="@h" />
}

@if (h.Actions.Contains(typeof(EstablishPlayers)))
{
    <EstablishPlayersComponent h="@h" />
}

@if (h.Game.CurrentPhase == Phase.Bidding)
{
    <BiddingPanel h="h" CanBid="h.Actions.Contains(typeof(Bid))" />
}

@if (h.Game.CurrentPhase == Phase.BlackMarketBidding)
{
    <BlackMarketBiddingPanel h="h" CanBid="h.Actions.Contains(typeof(BlackMarketBid))" />
}

<div class="card-columns">

    @foreach (var a in h.Actions)
    {
        if (a == typeof(FactionSelected))
        {
            <FactionSelectedComponent h="@h" />
        }
        else if (a == typeof(FactionTradeOffered))
        {
            <FactionTradeOfferedComponent h="@h" />
        }
        else if (a == typeof(StormDialled))
        {
            <StormDialledComponent h="@h" />
        }
        else if (a == typeof(PerformSetup))
        {
            <PerformSetupComponent h="@h" />
        }
        else if (a == typeof(PerformYellowSetup))
        {
            <PerformYellowSetupComponent h="@h" />
        }
        else if (a == typeof(BluePrediction))
        {
            <BluePredictionComponent h="@h" />
        }
        else if (a == typeof(PerformBluePlacement))
        {
            <PerformBluePlacementComponent h="@h" />
        }
        else if (a == typeof(MulliganPerformed))
        {
            <MulliganPerformedComponent h="@h" />
        }
        else if (a == typeof(TraitorsSelected))
        {
            <TraitorsSelectedComponent h="@h" />
        }
        else if (a == typeof(StormSpellPlayed))
        {
            <StormSpellPlayedComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.StormSpell)" />
        }
        else if (a == typeof(MetheorPlayed))
        {
            <SimpleActionComponent GameEventType="MetheorPlayed" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Metheor)" Title="@Support.GetCardTitle(TreacheryCardType.Metheor)" Alert="false" />
        }
        else if (a == typeof(TakeLosses))
        {
            <TakeLossesComponent h="@h" />
        }
        else if (a == typeof(YellowSentMonster))
        {
            <YellowSentMonsterComponent h="@h" />
        }
        else if (a == typeof(YellowRidesMonster))
        {
            <YellowRideComponent h="@h" />
        }
        else if (a == typeof(AllianceOffered))
        {
            <AllianceOfferedComponent h="@h" />
        }
        else if (a == typeof(AllianceBroken))
        {
            <SimpleActionComponent GameEventType="AllianceBroken" h="@h" Title="Break your current alliance?" Alert="false" />
        }
        else if (a == typeof(CharityClaimed))
        {
            <SimpleActionComponent GameEventType="CharityClaimed" h="@h" Title="Claim Charity?" Alert="false" />
        }
        else if (a == typeof(Revival))
        {
            <RevivalComponent h="@h" />
        }
        else if (a == typeof(Shipment))
        {
            <ShipmentComponent h="@h" />
        }
        else if (a == typeof(OrangeDelay))
        {
            <SimpleActionComponent GameEventType="OrangeDelay" h="@h" Title="Delay your turn?" Alert="true" />
        }
        else if (a == typeof(BlueAccompanies))
        {
            <BlueAccompaniesComponent h="@h" />
        }
        else if (a == typeof(BlueFlip))
        {
            <BlueFlipComponent h="@h" />
        }
        else if (a == typeof(BlueBattleAnnouncement))
        {
            <BlueBattleAnnouncementComponent h="@h" />
        }
        else if (a == typeof(Move))
        {
            <MoveComponent h="@h" />
        }
        else if (a == typeof(Caravan))
        {
            <CaravanComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Caravan)" />
        }
        else if (a == typeof(BattleInitiated))
        {
            <BattleInitiatedComponent h="@h" />
        }
        else if (a == typeof(Voice))
        {
            <VoiceComponent h="@h" />
        }
        else if (a == typeof(Prescience))
        {
            <PrescienceComponent h="@h" />
        }
        else if (a == typeof(Battle))
        {
            <BattleComponent h="@h" />
        }
        else if (a == typeof(BattleRevision))
        {
            <SimpleActionComponent GameEventType="BattleRevision" h="@h" Title="Change your battle plan?" Alert="false" />
        }
        else if (a == typeof(TreacheryCalled))
        {
            <TreacheryCalledComponent h="@h" />
        }
        else if (a == typeof(BattleConcluded))
        {
            <BattleConcludedComponent h="@h" />
        }
        else if (a == typeof(RaiseDeadPlayed))
        {
            <RaiseDeadComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.RaiseDead)" />
        }
        else if (a == typeof(Donated))
        {
            <DonatedComponent h="@h" />
        }
        else if (a == typeof(WhiteGaveCard))
        {
            <WhiteGaveCardComponent h="@h" />
        }
        else if (a == typeof(AllyPermission))
        {
            <AllyPermissionComponent h="@h" />
        }
        else if (a == typeof(ClairVoyancePlayed))
        {
            <ClairVoyancePlayedComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Clairvoyance)" />
        }
        else if (a == typeof(ClairVoyanceAnswered))
        {
            <ClairVoyanceAnsweredComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Clairvoyance)" />
        }
        else if (a == typeof(KarmaHandSwapInitiated))
        {
            <KarmaHandSwapInitiatedComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(KarmaHandSwap))
        {
            <KarmaHandSwapComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(KarmaFreeRevival))
        {
            <KarmaFreeRevivalComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(KarmaHmsMovement))
        {
            <KarmaHmsMovementComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(KarmaMonster))
        {
            <KarmaMonsterComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(KarmaPrescience))
        {
            <SimpleActionComponent GameEventType="KarmaPrescience" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" Title="@Skin.Current.Format("Use {0} to see the entire enemy battle plan", TreacheryCardType.Karma)" Alert="false" Collapsible="false" />
        }
        else if (a == typeof(Karma))
        {
            <KarmaComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(FaceDanced))
        {
            <FaceDancedComponent h="@h" />
        }
        else if (a == typeof(FaceDancerReplaced))
        {
            <FaceDancerReplacedComponent h="@h" />
        }
        else if (a == typeof(SetIncreasedRevivalLimits))
        {
            <SetIncreasedRevivalLimitsComponent h="@h" />
        }
        else if (a == typeof(RedBidSupport))
        {
            <RedBidSupportComponent h="@h" />
        }
        else if (a == typeof(RequestPurpleRevival))
        {
            <RequestPurpleRevivalComponent h="@h" />
        }
        else if (a == typeof(AcceptOrCancelPurpleRevival))
        {
            <AcceptOrCancelPurpleRevivalComponent h="@h" />
        }
        else if (a == typeof(AmalPlayed))
        {
            <SimpleActionComponent GameEventType="AmalPlayed" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Amal)" Title="@Support.GetCardTitle(TreacheryCardType.Amal)" Alert="false" Collapsible="true" />
        }
        else if (a == typeof(WhiteAnnouncesBlackMarket))
        {
            <WhiteAnnouncesBlackMarketComponent h="@h" />
        }
        else if (a == typeof(GreyRemovedCardFromAuction))
        {
            <GreyRemovedCardFromAuctionComponent h="@h" />
        }
        else if (a == typeof(GreySelectedStartingCard))
        {
            <GreySelectedStartingCardComponent h="@h" />
        }
        else if (a == typeof(GreySwappedCardOnBid))
        {
            <GreySwappedCardOnBidComponent h="@h" />
        }
        else if (a == typeof(PerformHmsMovement))
        {
            <PerformHmsMovementComponent h="@h" />
        }
        else if (a == typeof(PerformHmsPlacement))
        {
            <PerformHmsPlacementComponent h="@h" />
        }
        else if (a == typeof(HarvesterPlayed))
        {
            <SimpleActionComponent GameEventType="HarvesterPlayed" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Harvester)" Title="@Support.GetCardTitle(TreacheryCardType.Harvester)" Alert="false" />
        }
        else if (a == typeof(PoisonToothCancelled))
        {
            <SimpleActionComponent GameEventType="PoisonToothCancelled" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.PoisonTooth)" Title="Cancel Poison Tooth?" Alert="false" />
        }
        else if (a == typeof(ReplacedCardWon))
        {
            <ReplacedCardWonComponent h="@h" />
        }
        else if (a == typeof(ThumperPlayed))
        {
            <SimpleActionComponent GameEventType="ThumperPlayed" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Thumper)" Title="@Support.GetCardTitle(TreacheryCardType.Thumper)" Alert="false" />
        }
        else if (a == typeof(HideSecrets))
        {
            <SimpleActionComponent GameEventType="HideSecrets" h="@h" Title="Do you object against your secret information (like cards and traitors) being visible at the end of the game?" ConfirmLabel="Yes" Alert="true" Dismissable="true" DismissLabel="No" />
        }
        else if (a == typeof(DealOffered))
        {
            <DealOfferedComponent h="@h" />
        }
        else if (a == typeof(PlayerReplaced))
        {
            <PlayerReplacedComponent h="@h" />
        }
        else if (a == typeof(BrownDiscarded))
        {
            <BrownDiscardedComponent h="@h" />
        }
        else if (a == typeof(BrownEconomics))
        {
            <BrownEconomicsComponent h="@h" />
        }
        else if (a == typeof(CardTraded))
        {
            <CardTradedComponent h="@h" />
        }
        else if (a == typeof(KarmaBrownDiscard))
        {
            <KarmaBrownDiscardComponent h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Karma)" />
        }
        else if (a == typeof(AuditCancelled))
        {
            <AuditCancelledComponent h="@h" />
        }
        else if (a == typeof(Audited))
        {
            <AuditedComponent h="@h" />
        }
        else if (a == typeof(BrownExtraMove))
        {
            <SimpleActionComponent GameEventType="BrownExtraMove" h="@h" BackgroundImage="@Skin.Current.GetImageURL(BrownExtraMove.CardToUse(h.Player))" Title="@Skin.Current.Format("Use {0} to be able to move your forces one extra territory?", BrownExtraMove.CardToUse(h.Player))" Alert="false" Collapsible="true" />
        }
        else if (a == typeof(BrownMovePrevention))
        {
            <BrownMovePreventionComponent h="@h" />
        }
        else if (a == typeof(BrownKarmaPrevention))
        {
            <BrownKarmaPreventionComponent h="@h" />
        }
        else if (a == typeof(BrownFreeRevivalPrevention))
        {
            <BrownFreeRevivalPreventionComponent h="@h" />
        }
        else if (a == typeof(BrownRemoveForce))
        {
            <BrownRemoveForceComponent h="@h" />
        }
        else if (a == typeof(WhiteAnnouncesAuction))
        {
            <WhiteAnnouncesAuctionComponent h="@h" />
        }
        else if (a == typeof(WhiteSpecifiesAuction))
        {
            <WhiteSpecifiesAuctionComponent h="@h" />
        }
        else if (a == typeof(WhiteKeepsUnsoldCard))
        {
            <WhiteKeepsUnsoldCardComponent h="@h" />
        }
        else if (a == typeof(WhiteRevealedNoField))
        {
            <SimpleActionComponent GameEventType="WhiteRevealedNoField" h="@h" Title="@Skin.Current.Format("Reveal your currently active No-Field of {0}, placing {1} forces?", h.Game.CurrentNoFieldValue, Math.Min(h.Game.CurrentNoFieldValue, h.Player.ForcesInReserve))" />
        }
        else if (a == typeof(ResidualPlayed))
        {
            <SimpleActionComponent GameEventType="ResidualPlayed" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.Residual)" Title="@Skin.Current.Format("Use {0} to kill a random available opponent leader?", TreacheryCardType.Residual)" />
        }
        else if (a == typeof(FlightUsed))
        {
            <FlightUsedComponent h="@h" />
        }
        else if (a == typeof(RockWasMelted))
        {
            <RockWasMeltedComponent h="@h" />
        }
        else if (a == typeof(DistransUsed))
        {
            <DistransUsedComponent h="@h" />
        }
        else if (a == typeof(DiscardedTaken))
        {
            <DiscardedTakenComponent h="@h" />
        }
        else if (a == typeof(DiscardedSearchedAnnounced))
        {
            <SimpleActionComponent GameEventType="DiscardedSearchedAnnounced" h="@h" BackgroundImage="@Support.GetCardImage(TreacheryCardType.SearchDiscarded)" Title="@Skin.Current.Format("Use {0} to pay 2 and search and take a card from the treachery discard pile?", TreacheryCardType.SearchDiscarded)" />
        }
        else if (a == typeof(DiscardedSearched))
        {
            <DiscardedSearchedComponent h="@h" />
        }
        else if (a == typeof(JuicePlayed))
        {
            <JuicePlayedComponent h="@h" />
        }
    }

    @if (DealAccepted.CurrentDeals(h.Game).Any() || h.IsPlayer && (DealAccepted.AcceptableDeals(h.Game, h.Player).Any() || DealAccepted.CancellableDeals(h.Game, h.Player).Any()))
    {
        <DealComponent h="@h" />
    }

    @if (h.Game.Applicable(Rule.AssistedNotekeeping))
    {
        <NoteComponent h="@h" />
    }

    @if (h.IsPlayer && h.CurrentPhase >= Phase.SelectingTraitors && h.IAm(Faction.Green))
    {
        <TrackerComponent h="@h" />
    }

    @if (h.Game.CurrentPhase == Phase.GameEnded && h.IsHost && !h.StatisticsSent && h.Game.Players.Count() >= 4 && h.Game.Players.Count(p => !(p.IsBot)) > h.Game.Players.Count(p => p.IsBot))
    {
        <UploadStatisticsComponent h="@h" />
    }

</div>

@code {

    [Parameter]
    public Handler h { get; set; }
}
