<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using System.Linq;
@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;
@inject IJSRuntime JSRuntime;

@if (h.Game != null && h.Status != null)
{
    if (timeLeft > 0)
    {
        <div style="position:absolute;left:@Support.Px(WindowX);top:@Support.Px(WindowY);width:@Support.Px(FlashWidth);overflow:hidden;animation:@AnimationType 2s;z-index:1000;" @onclick="Hide">

            @foreach (var img in h.Status.FlashInfo)
            {
                <div style="float:left;position:relative;top:0px;display:inline-block;vertical-align:top;width:@Support.Px(ItemWidth)">

                    <img src="@img.Url" width=@CardWidth style="filter:drop-shadow(2px 2px 2px black);"/>

                    @if (img.Message != null)
                    {
                        <div style="@MsgStyle"><ExpressionComponent Game=Game Expression=@img.Message.Expression Size=24 TextBorder=@Support.TextBorder(2, "black")/></div>
                    }

                </div>
            }

        </div>
    }
}

@code {

    public const float SPACING_X = 1.1f;
    private int WindowX = 0;
    private int WindowY = 0;
    private int FlashWidth = 500;
    private int CardWidth = 100;

    int afterEventId = -1;

    protected override void OnInitialized()
    {
        StartRedrawCycle(1000);
    }

    int timeLeft = 0;
    protected override void Redraw()
    {
        if (timeLeft > 0)
        {
            timeLeft -= 1000;
        }

        StateHasChanged();
    }

    private void Hide()
    {
        timeLeft = 0;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (h.Game.EventCount != afterEventId)
        {
            afterEventId = h.Game.EventCount;

            if (h.Status != null && h.Status.FlashInfo.Any())
            {
                timeLeft += Time * 1000 + 2000;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var dimensions = await Browser.GetWindowDimensions();
        var nrOfItems = h.Status != null ? h.Status.FlashInfo.Count() : 0;

        if (dimensions.Height > dimensions.Width)
        {
            //phone-like screen

            CardWidth = (int)(0.3f * dimensions.Width);

            if (nrOfItems <= 3)
            {
                WindowY = (int)(0.5f * (dimensions.Height - 1.41f * CardWidth));
            }
            else
            {
                WindowY = (int)(0.5f * (dimensions.Height - 2 * 1.41f * CardWidth));
            }
        }
        else
        {
            CardWidth = (int)(0.15f * dimensions.Width);

            if (nrOfItems <= 4)
            {
                WindowY = (int)(0.5f * (dimensions.Height - 1.41f * CardWidth));
            }
            else
            {
                WindowY = (int)(0.5f * (dimensions.Height - 2 * 1.41f * CardWidth));
            }
        }

        FlashWidth = nrOfItems * (ItemWidth + 20);
        WindowX = (int)(0.5f * (dimensions.Width - FlashWidth));
    }

    private string MsgStyle =>
        string.Format("width:{0};font:normal normal normal 24px Advokat, Calibri, Tahoma, sans-serif;color:white;text-align:center;", Support.Px(CardWidth));

    private int ItemWidth => (int)(SPACING_X * CardWidth);

    private string TimeString => string.Format("{0}s", Time);

    private int Time => 2 + h.Status.FlashInfo.Count() * 3;

    private string AnimationType => timeLeft <= 1000 ? "fadeOut" : "fadeIn";
}

