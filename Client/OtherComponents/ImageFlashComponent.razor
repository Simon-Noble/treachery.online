<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using System.Linq;
@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;
@inject IJSRuntime JSRuntime;

@if (h.Game != null)
{
    if (_visible)
    {
        <div style="position:absolute;left:@Support.Px(WindowX);top:@Support.Px(WindowY);width:@Support.Px(WindowWidth);height:@Support.Px(WindowHeight);overflow:hidden;animation:fadeIn 2s;z-index:1000;" @onclick="Hide">

            @foreach (var img in h.Status.FlashInfo)
            {
                <div style="position:relative;top:0px;display:inline-block;vertical-align:top;width:@Support.Px(ItemWidth)">

                    <img src="@img.Url" width=@WIDTH style="filter:drop-shadow(4px 4px 3px black);"/>

                    @if (img.Message != null)
                    {
                        <div style="@MsgStyle">@img.Message</div>
                    }

                </div>
            }

        </div>
    }
}

@code {

    public const int WIDTH = 268;
    public const int HEIGHT = 378;
    public const float SPACING_X = 1.1f;
    private int WindowX = 0;
    private int WindowY = 0;
    private int WindowWidth = 500;
    private int WindowHeight = 500;

    private bool _visible = false;

    int afterEventId = -1;

    protected override void OnInitialized()
    {
        StartRedrawCycle(1000);
    }

    int timeLeft = 0;
    protected override void Redraw()
    {
        //Console.WriteLine("redraw - timeLeft: " + timeLeft);
        if (timeLeft <= 0)
        {
            if (_visible) {

                Hide();
            }
        }
        else
        {
            timeLeft -= 1000;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (h.Game.EventCount != afterEventId)
        {
            afterEventId = h.Game.EventCount;

            if (h.Status.FlashInfo.Any())
            {
                timeLeft += Time * 1000 + 1000;
                //Console.WriteLine("showing - timeLeft: " + timeLeft);
                _visible = true;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var dimensions = await Browser.GetWindowDimensions();
        WindowWidth = (int)(dimensions.Width - h.Status.FlashInfo.Count() * ItemWidth);
        WindowX = (int)(0.5f * (WindowWidth));

        WindowHeight = (int)(1.2f * HEIGHT);
        WindowY = (int)(0.5f * (dimensions.Height - WindowHeight));
    }

    private string MsgStyle =>
        string.Format("width:{0};font:normal normal normal 20px Advokat, Calibri, Tahoma, sans-serif;background-color:transparent;color:white;text-align:center;{1};", 
            Support.Px(WIDTH), Support.TextBorder(2, "black"));

    private void Hide()
    {
        _visible = false;
        StateHasChanged();
    }

    private int ItemWidth => (int)(SPACING_X * WIDTH);

    private string TimeString => string.Format("{0}s", Time);

    private int Time => 2 + h.Status.FlashInfo.Count() * 3;
}

