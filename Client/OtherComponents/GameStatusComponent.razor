<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<EndPhase>

<div class="card p-0 mb-2" style="background-color:#e8dba6ee;">

    <div class="card-body bg-transparent border-bottom-0">

        @if (h.Status.TimedEvent != null)
        {
            <div style="position:absolute;left:5px;top:0px;color:@TimerColor(h.Status.WaitingForMe(Player, h.IsHost));font-weight:bolder;">@TimerText(h.Status.TimedEvent)</div>
        }

        @if (IsBiddingPhase || OneOrMorePlayersNeedToAct || PlayersAreInSequence) {

            <div class="row row-cols-6 d-flex justify-content-center mt-2 mb-3">

                @if (IsBiddingPhase && ToBid.Count() > 0)
                {
                    bool showTurnInSequence = h.Game.CurrentPhase == Phase.BlackMarketBidding || h.Game.CurrentPhase == Phase.Bidding || h.Game.CurrentPhase == Phase.BiddingReport;
                    var hasTurn = h.Status.WaitingForPlayers.Count() == 1 && !showTurnInSequence ? h.Status.WaitingForPlayers.First() : null;

                    foreach (var se in ToBid)
                    {
                        <div class="col" style="filter:drop-shadow(1px 1px 1px black)">
                            <NumberComponent Value="Game.CardsOwnedBy(se.Player).Count()" Size="@(se.Player == hasTurn || showTurnInSequence && se.HasTurn ? 36 : 28)"
                                            SymbolSRC="@Skin.Current.GetImageURL(se.Player.Faction)"
                                            BehindNumberSRC="@Skin.Current.CardBack_TreacheryCard_URL"
                                            Title="@PlayerWithCardsTitle(se.Player)"
                                            NumberColor="@(se.Player.HasRoomForCards ? "black" : "red")" NumberBorderColor="white" NumberBorderWidth=1 NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
                        </div>
                    }
                }
                else if (OneOrMorePlayersNeedToAct)
                {
                    if (h.Status.WaitingForPlayers.Count() == 1) {

                        var player = h.Status.WaitingForPlayers.First();

                        <div style="position: relative; width: 64px; height: 64px;">
                            <img title="@player.Name" src="@Skin.Current.GetImageURL(player.Faction)" width="64" style="position: absolute; left: 0px; filter: drop-shadow(2px 2px 2px black)" />
                            <img src="./art/worm.gif" width="94" style="position: absolute; top: -14px; left: -20px; filter: drop-shadow(1px 1px 1px black)" />
                        </div>
                    }
                    else {

                        foreach (var p in h.Status.WaitingForPlayers)
                        {
                            <div style="position: relative; width: 48px;">
                                <img class="p-2" title="@p.Name" src="@Skin.Current.GetImageURL(p.Faction)" width="48" style="filter:drop-shadow(2px 2px 2px black)" />
                            </div>
                        }
                    }
                }
                else if (PlayersAreInSequence)
                {
                    foreach (var f in h.Status.WaitingInSequence)
                    {
                        <div class="align-self-center p-0 m-0" style="position: relative; width: 64px;">
                            @if (f.HasTurn)
                            {
                                <img title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="64" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                                <img src="./art/worm.gif" width="90" style="position: absolute; top: -12px; left: -18px; filter: drop-shadow(1px 1px 1px black)" />
                            }
                            else
                            {
                                <img class="align-self-center p-2" title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="48" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                            }
                        </div>
                    }
                }

            </div>
        }

        <div class="text-dark fw-bold text-center" style="@StatusStyle">
            <ExpressionComponent Game=Game Expression=@h.Status.GetMessage(h.Player, h.IsHost).Expression Size=20/>
        </div>

        @if (!autoConfirm && CanEndPhase)
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Continue" ConfirmError=@Validation/>
        }

        @if (autoConfirm || CanEndPhase)
        {
            <div class="mt-1 mb-n3 float-end" style="color:black;">
                <CheckboxComponent @bind-Value=autoConfirm>Continue automatically</CheckboxComponent>
            </div>
        }

        @if (h.IsHost && Game.CurrentMainPhase == MainPhase.Bidding && Game.Players.Count(p => !p.IsBot) > 1)
        {
            <div class="mt-1" style="color:black;">
                <CheckboxComponent @bind-Value="@timeLimitSet" OnChanged=EnableOrDisableTimer>Time limit (seconds)</CheckboxComponent>
                @if (timeLimitSet)
                {
                    <SelectNumberComponent Disabled=@(!timeLimitSet) @bind-Value=@timeLimit OnChanged=@UpdateTimer Min="10" Max="600" StepUp="TimerStepUp" StepDown="TimerStepDown" Size="30"/>
                }
            </div>
        }

    </div>

</div>

@code {

    [Parameter]
    public bool CanEndPhase { get; set; }

    private bool autoConfirm = false;
    private int ticksPassed = 0;
    private bool timeLimitSet = false;
    private int timeLimit = 20;

    protected override async Task OnInitializedAsync()
    {
        await StartRedrawCycleAsync(1000);
    }

    private Phase _previousPhase;
    protected override async Task RedrawAsync()
    {
        if (CancelAutoConfirm)
        {
            ticksPassed = 0;
            autoConfirm = false;
            StateHasChanged();
        }
        else
        {
            ticksPassed++;

            if (autoConfirm && CanEndPhase && ticksPassed >= 3 + h.Status.FlashInfo.Count)
            {
                ticksPassed = 0;
                await Confirm();
            }

            await base.RedrawAsync();
        }

        _previousPhase = Game.CurrentPhase;
    }

    private void EnableOrDisableTimer(bool value)
    {
        if (!value)
        {
            UpdateTimer(-1);
        }
        else
        {
            UpdateTimer(timeLimit);
        }
    }

    private void UpdateTimer(int value)
    {
        _ = h.Host.SetTimer(value);
    }

    private bool CancelAutoConfirm =>
        Game.CurrentPhase == Phase.AllianceA && _previousPhase != Phase.AllianceA ||
        Game.CurrentPhase == Phase.AllianceB && _previousPhase != Phase.AllianceB ||
        Game.CurrentPhase == Phase.ClaimingCharity && _previousPhase != Phase.ClaimingCharity ||
        Game.CurrentTurn > 1 && Game.CurrentPhase == Phase.Resurrection && _previousPhase != Phase.Resurrection;

    protected override EndPhase ConfirmedResult => new EndPhase(Game) { Initiator = Faction };

    private IEnumerable<SequenceElement> ToBid
    {
        get
        {
            if (h.Game.CurrentPhase == Phase.BlackMarketAnnouncement || h.Game.CurrentPhase == Phase.BlackMarketBidding)
            {
                return BlackMarketBid.PlayersToBid(h.Game);
            }
            else
            {
                return Bid.PlayersToBid(h.Game);
            }
        }
    }

    private bool IsBiddingPhase => h.Game.CurrentMainPhase == MainPhase.Bidding;

    private bool OneOrMorePlayersNeedToAct => h.Status.WaitingForPlayers.Any();

    private bool PlayersAreInSequence => h.Status.WaitingInSequence.Any();

    private string StatusStyle => h.Status.WaitingForMe(Player, h.IsHost) ? Support.TextBorder(1, 8, "#FF000016") : "";

    private string PlayerWithCardsTitle(Player player) => player.Name;

    protected string TimerText(GameEvent timedEvent)
    {
        if (timedEvent == null) return "";

        var elapsed = DateTime.Now.Subtract(timedEvent.Time);

        string result = "";

        if (elapsed.TotalSeconds >= 1)
        {
            if (elapsed.TotalHours >= 1)
            {
                result = elapsed.ToString(@"hh\:mm\:ss");
            }
            else
            {
                result = elapsed.ToString(@"m\:ss");
            }

            if (Game.CurrentPhase == Phase.Bidding && h.Timer > 0)
            {
                result += string.Format(" (limit: {0}s)", h.Timer);
            }
        }

        return result;
    }

    protected string TimerColor(bool hasTurn) => hasTurn ? "red" : "black";

    private int TimerStepUp
    {
        get
        {
            if (timeLimit < 20) return 5;
            else if (timeLimit < 60) return 10;
            else return 30;
        }
    }

    private int TimerStepDown
    {
        get
        {
            if (timeLimit > 60) return 30;
            else if (timeLimit > 20) return 10;
            else return 5;
        }
    }
}
