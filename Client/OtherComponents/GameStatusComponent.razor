<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<EndPhase>

<div class="card p-0 mb-2" style="background-color:#e8dba6ee;">

    <div class="card-body text-center bg-transparent border-bottom-0">

        @if (h.Status.TimedEvent != null)
        {
            <div style="position:absolute;left:5px;top:0px;color:@TimerColor(h.Status.WaitingForMe(Player, h.IsHost));font-weight:bolder;">@TimerText(h.Status.TimedEvent)</div>
        }

        <div class="row justify-content-center align-items-center">

            @{
                var currentPlayersToAct = h.Status.WaitingForPlayers;

                if (h.Game.CurrentMainPhase == MainPhase.Bidding)
                {
                    bool showTurnInSequence = h.Game.CurrentPhase == Phase.BlackMarketBidding || h.Game.CurrentPhase == Phase.Bidding || h.Game.CurrentPhase == Phase.BiddingReport;
                    var hasTurn = currentPlayersToAct.Count() == 1 && !showTurnInSequence ? currentPlayersToAct.First() : null;

                    foreach (var se in ToBid)
                    {
                        <div class="d-inline-block p-2" style="filter:drop-shadow(1px 1px 1px black)">
                            <NumberComponent Value="se.Player.TreacheryCards.Count" Size="@(se.Player == hasTurn || showTurnInSequence && se.HasTurn ? 48 : 32)"
                                             SymbolSRC="@Skin.Current.GetImageURL(se.Player.Faction)"
                                             BehindNumberSRC="@Skin.Current.CardBack_TreacheryCard_URL"
                                             Title="@PlayerWithCardsTitle(se.Player)"
                                             NumberColor="@(se.Player.HasRoomForCards ? "black" : "red")" NumberBorderColor="white" NumberBorderWidth=1 NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
                        </div>
                }
                }
                else if (currentPlayersToAct.Any())
                {
                    if (currentPlayersToAct.Count() == 1) {
                        
                        var player = currentPlayersToAct.First();

                        <div style="position: relative">
                            <img class="align-self-center p-2" title="@player.Name" src="@Skin.Current.GetImageURL(player.Faction)" width="72" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                            <img class="align-self-center p-0" src="./art/worm.gif" width="90" style="position: absolute; top: -9px; left: -13px; filter: drop-shadow(1px 1px 1px black)" />
                        </div>
                    }
                    else {

                        foreach (var p in currentPlayersToAct)
                        {
                            <img class="align-self-center p-2" title="@p.Name" src="@Skin.Current.GetImageURL(p.Faction)" width="48" style="filter:drop-shadow(2px 2px 2px black)" />
                        }
                    }
                }
                else if (h.Status.WaitingInSequence.Any())
                {
                    foreach (var f in h.Status.WaitingInSequence)
                    {
                        <div style="position: relative">
                            @if (f.HasTurn)
                            {
                                <img class="align-self-center p-2" title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="72" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                                <img class="align-self-center p-0" src="./art/worm.gif" width="90" style="position: absolute; top: -9px; left: -13px; filter: drop-shadow(1px 1px 1px black)" />
                            }
                            else
                            {
                                <img class="align-self-center p-2" title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="48" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                            }
                        </div>
                    }
                }
            }

        </div>

        <div class="@(StatusDescriptionClass)">@h.Status.GetDescription(Player, h.IsHost)</div>

        @if (CanEndPhase)
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Continue" ConfirmError="@Validation"/>
        }

    </div>

</div>

@code {

    [Parameter]
    public bool CanEndPhase { get; set; }

    protected override void OnInitialized()
    {
        StartRedrawCycle(1000);
    }

    protected override EndPhase ConfirmedResult => new EndPhase(Game) { Initiator = Faction };

    private IEnumerable<SequenceElement> ToBid
    {
        get
        {
            if (h.Game.CurrentPhase == Phase.BlackMarketAnnouncement || h.Game.CurrentPhase == Phase.BlackMarketBidding)
            {
                return BlackMarketBid.PlayersToBid(h.Game);
            }
            else
            {
                return Bid.PlayersToBid(h.Game);
            }
        }
    }

    private string StatusDescriptionClass
    {
        get
        {
            if (h.Status.WaitingForMe(Player, h.IsHost))
            {
                return "text-danger font-weight-bold";
            }
            else
            {
                return "text-dark";
            }
        }
    }

    private string PlayerWithCardsTitle(Player player) => string.Format("{0} has {1} cards", player.Name, player.TreacheryCards.Count);

    protected string TimerText(GameEvent timedEvent)
    {
        if (timedEvent == null) return "";

        var elapsed = DateTime.Now.Subtract(timedEvent.Time);
        if (elapsed.TotalSeconds >= 1)
        {
            if (elapsed.TotalHours >= 1)
            {
                return elapsed.ToString(@"hh\:mm\:ss");
            }
            else
            {
                return elapsed.ToString(@"m\:ss");
            }
        }
        else
        {
            return "";
        }
    }

    protected string TimerColor(bool hasTurn) => hasTurn ? "red" : "black";
}
