<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameComponent

<div class="card p-0 mb-2" style="background-color:#e8dba6ee;">

    <div class="card-body text-center bg-transparent border-bottom-0">

        <div class="row justify-content-center">

            @{
                var waitingFor = WaitingFor;
                var currentFactionsToAct = CurrentFactionsToAct;

                if (waitingFor == Faction.None && currentFactionsToAct != null && currentFactionsToAct.Count() == 1)
                {
                    waitingFor = currentFactionsToAct.First();
                }

                if (waitingFor != Faction.None)
                {
                    <img class="align-self-center p-2" src="@Skin.Current.GetImageURL(waitingFor)" width="72" style="@Worm"/>
                }
                else
                {
                    var currentSequence = CurrentSequence;
                    

                    if (currentSequence != null)
                    {
                        @foreach (var f in currentSequence)
                        {
                            if (Game.CurrentPhase == Phase.Bidding)
                            {
                                <div class="d-inline-block p-2">
                                    <NumberComponent Value="Game.GetPlayer(f.Faction).TreacheryCards.Count" Size="@(f.HasTurn ? 72 : 48)" SymbolSRC="@Skin.Current.GetImageURL(f.Faction)" NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
                                </div>
                            }
                            else
                            {
                                <img class="align-self-center p-2" src="@Skin.Current.GetImageURL(f.Faction)" width="@(f.HasTurn ? 72 : 48)" style="@(f.HasTurn ? Worm : "")"/>
                            }
                        }
                    }
                    else if (currentFactionsToAct != null)
                    {
                        @foreach (var f in currentFactionsToAct)
                        {
                            <img class="align-self-center p-2" src="@Skin.Current.GetImageURL(f)" width="48" />
                        }
                    }
                }
            }

        </div>

        <div class="@(StatusDescriptionClass)">@h.Status.Description</div>

    </div>

</div>

@code {

    private IEnumerable<SequenceElement> CurrentSequence
    {
        get
        {
            if (Game.CurrentPhase == Phase.Bidding) return Game.BidSequence.GetFactionsInSequence(Game);
            if (Game.CurrentMainPhase == MainPhase.ShipmentAndMove && Game.CurrentPhase != Phase.ShipmentAndMoveConcluded) return Game.ShipmentAndMoveSequence.GetFactionsInSequence(Game);
            if (Game.CurrentMainPhase == MainPhase.Battle && Game.Aggressor != null) return Game.BattleSequence.GetFactionsInSequence(Game);

            return null;
        }
    }

    private IEnumerable<Faction> CurrentFactionsToAct
    {
        get
        {
            if (Game.CurrentPhase == Phase.SelectingTraitors ||
                Game.CurrentPhase == Phase.ClaimingCharity ||
                Game.CurrentPhase == Phase.Resurrection) return Game.Players.Where(p => !Game.HasActedOrPassed.Contains(p.Faction)).Select(p => p.Faction);

            return null;
        }
    }

    private Faction WaitingFor
    {
        get
        {
            var att = GetAttribute(Game.CurrentPhase);

            if (att != null && att.Urgent)
            {
                return att.FactionSpecific;
            }
            else
            {
                return Faction.None;
            }
        }
    }

    private string Worm => "background-image:url('art/worm.gif'); background-position: -20px -16px; background-size: 102px 102px; background-repeat:no-repeat; background-clip:border-box";

    private string StatusDescriptionClass
    {
        get
        {
            if (h.Game != null && h.Status.WaitingForOthers)
            {
                return "text-dark";
            }
            else
            {
                return "text-danger font-weight-bold";
            }
        }
    }

    public PhasePropertyAttribute GetAttribute(Phase p)
    {
        var type = typeof(Phase);
        var member = type.GetMember(type.GetEnumName(p))[0];
        var att = member.GetCustomAttributes(typeof(PhasePropertyAttribute), false).FirstOrDefault();
        return (PhasePropertyAttribute)att;
    }
}
