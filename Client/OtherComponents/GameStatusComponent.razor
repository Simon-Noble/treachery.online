<!--
 * Copyright 2020-2022 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<EndPhase>

<div class="card p-0 mb-2" style="background-color:#e8dba6ee;">

    <div class="card-body text-center bg-transparent border-bottom-0">

        @if (h.Status.TimedEvent != null)
        {
            <div style="position:absolute;left:5px;top:0px;color:@TimerColor(h.Status.WaitingForMe(Player, h.IsHost));font-weight:bolder;">@TimerText(h.Status.TimedEvent)</div>
        }

        <div class="row d-flex justify-content-center">

            @{
                var currentPlayersToAct = h.Status.WaitingForPlayers;

                if (h.Game.CurrentMainPhase == MainPhase.Bidding)
                {
                    bool showTurnInSequence = h.Game.CurrentPhase == Phase.BlackMarketBidding || h.Game.CurrentPhase == Phase.Bidding || h.Game.CurrentPhase == Phase.BiddingReport;
                    var hasTurn = currentPlayersToAct.Count() == 1 && !showTurnInSequence ? currentPlayersToAct.First() : null;

                    foreach (var se in ToBid)
                    {
                        <div class="col" style="filter:drop-shadow(1px 1px 1px black)">
                            <NumberComponent Value="Game.CardsOwnedBy(se.Player).Count()" Size="@(se.Player == hasTurn || showTurnInSequence && se.HasTurn ? 48 : 32)"
                                             SymbolSRC="@Skin.Current.GetImageURL(se.Player.Faction)"
                                             BehindNumberSRC="@Skin.Current.CardBack_TreacheryCard_URL"
                                             Title="@PlayerWithCardsTitle(se.Player)"
                                             NumberColor="@(se.Player.HasRoomForCards ? "black" : "red")" NumberBorderColor="white" NumberBorderWidth=1 NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
                        </div>
                    }
                }
                else if (currentPlayersToAct.Any())
                {
                    if (currentPlayersToAct.Count() == 1) {
                        
                        var player = currentPlayersToAct.First();

                        <div style="position: relative; width: 64px;">
                            <img title="@player.Name" src="@Skin.Current.GetImageURL(player.Faction)" width="64" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                            <img src="./art/worm.gif" width="94" style="position: absolute; top: -14px; left: -8px; filter: drop-shadow(1px 1px 1px black)" />
                        </div>
                    }
                    else {

                        foreach (var p in currentPlayersToAct)
                        {
                            <div style="position: relative; width: 48px;">
                                <img class="p-2" title="@p.Name" src="@Skin.Current.GetImageURL(p.Faction)" width="48" style="filter:drop-shadow(2px 2px 2px black)" />
                            </div>
                        }
                    }
                }
                else if (h.Status.WaitingInSequence.Any())
                {
                    foreach (var f in h.Status.WaitingInSequence)
                    {
                        <div class="align-self-center p-0 m-0" style="position: relative; width: 64px;">
                            @if (f.HasTurn)
                            {
                                <img title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="64" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                                <img src="./art/worm.gif" width="90" style="position: absolute; top: -12px; left: -18px; filter: drop-shadow(1px 1px 1px black)" />
                            }
                            else
                            {
                                <img class="align-self-center p-2" title="@f.Player.Name" src="@Skin.Current.GetImageURL(f.Player.Faction)" width="48" style="position: relative; filter: drop-shadow(2px 2px 2px black)" />
                            }
                        </div>
                    }
                }
            }

        </div>

        <div class="@StatusDescriptionClass">@h.Status.GetDescription(Player, h.IsHost)</div>

        @if (!autoConfirm && CanEndPhase)
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Continue" ConfirmError="@Validation"/>
        }

        @if (autoConfirm || CanEndPhase)
        {
            <div class="mt-1 mb-n3 float-end" style="color:black">
                <CheckboxComponent @bind-Value=autoConfirm>Continue automatically</CheckboxComponent>
            </div>
        }

    </div>

</div>

@code {

    [Parameter]
    public bool CanEndPhase { get; set; }

    private bool autoConfirm = false;
    private int ticksPassed = 0;

    protected override void OnInitialized()
    {
        StartRedrawCycle(1000);
    }

    private Phase _previousPhase;
    protected override void Redraw()
    {
        if (CancelAutoConfirm)
        {
            ticksPassed = 0;
            autoConfirm = false;
            StateHasChanged();
        }
        else
        {
            ticksPassed++;

            if (autoConfirm && CanEndPhase && ticksPassed >= 3 + h.Status.FlashInfo.Count)
            {
                ticksPassed = 0;
                _ = Confirm();
            }

            base.Redraw();
        }

        _previousPhase = Game.CurrentPhase;
    }

    private bool CancelAutoConfirm =>
        Game.CurrentPhase == Phase.AllianceA && _previousPhase != Phase.AllianceA ||
        Game.CurrentPhase == Phase.AllianceB && _previousPhase != Phase.AllianceB ||
        Game.CurrentPhase == Phase.ClaimingCharity && _previousPhase != Phase.ClaimingCharity ||
        Game.CurrentTurn > 1 && Game.CurrentPhase == Phase.Resurrection && _previousPhase != Phase.Resurrection;


    protected override EndPhase ConfirmedResult => new EndPhase(Game) { Initiator = Faction };

    private IEnumerable<SequenceElement> ToBid
    {
        get
        {
            if (h.Game.CurrentPhase == Phase.BlackMarketAnnouncement || h.Game.CurrentPhase == Phase.BlackMarketBidding)
            {
                return BlackMarketBid.PlayersToBid(h.Game);
            }
            else
            {
                return Bid.PlayersToBid(h.Game);
            }
        }
    }

    private string StatusDescriptionClass
    {
        get
        {
            if (h.Status.WaitingForMe(Player, h.IsHost))
            {
                return "text-danger fw-bold";
            }
            else
            {
                return "text-dark";
            }
        }
    }

    private string PlayerWithCardsTitle(Player player) => player.Name;

    protected string TimerText(GameEvent timedEvent)
    {
        if (timedEvent == null) return "";

        var elapsed = DateTime.Now.Subtract(timedEvent.Time);
        if (elapsed.TotalSeconds >= 1)
        {
            if (elapsed.TotalHours >= 1)
            {
                return elapsed.ToString(@"hh\:mm\:ss");
            }
            else
            {
                return elapsed.ToString(@"m\:ss");
            }
        }
        else
        {
            return "";
        }
    }

    protected string TimerColor(bool hasTurn) => hasTurn ? "red" : "black";
}
