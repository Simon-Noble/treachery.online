<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameComponent;

<ModalComponent Id="@Id" Title="Card and Token Reference" Size="modal-xl">

    <h5>Treachery Cards</h5>
    <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

        @foreach (var v in TreacheryCardManager.GetCardsInPlay(Client.Game))
        {
            <div class="card">
                <Hoverable Class="card-img-top" Popover=@Popup.Get(v)>
                    <img src="@Skin.Current.GetImageURL(v)" class="card-img" alt=@Name(v)>
                </Hoverable>
            </div>
        }

    </div>

    @if (Client.Game.IsPlaying(Faction.White))
    {
        <h5 class="mt-2">@Skin.Current.Describe(Faction.White) Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in TreacheryCardManager.GetWhiteCards())
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Popup.Get(v)>
                        <img src="@Skin.Current.GetImageURL(v)" class="card-img" alt=@Name(v)>
                    </Hoverable>
                </div>
            }

        </div>
    }

    <h5 class="mt-2">@Skin.Current.Describe(Concept.Resource) Cards</h5>
    <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

        @foreach (var v in Map.GetResourceCardsInPlay(Client.Game))
        {
            <div class="card">
                <Hoverable Class="card-img-top" Popover=@Popup.Get(v)>
                    <img src="@Skin.Current.GetImageURL(v)" class="card-img" alt=@Name(v)>
                </Hoverable>
            </div>
        }

    </div>

    @if (Client.Game.Applicable(Rule.LeaderSkills))
    {
        <h5 class="mt-2">Leader Skill Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in Enumerations.GetValuesExceptDefault(typeof(LeaderSkill), LeaderSkill.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Popup.Get(v)>
                        <img src="@Skin.Current.GetImageURL(v)" class="card-img" alt=@Name(v)>
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.StrongholdBonus))
    {
        <h5 class="mt-2">Stronghold Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in Enumerations.GetValuesExceptDefault(typeof(StrongholdAdvantage), StrongholdAdvantage.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Popup.Get(v)>
                        <img src="@Skin.Current.GetImageURL(v)" class="card-img" alt=@Name(v)>
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.NexusCards))
    {
        <h5 class="mt-2">Nexus Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var f in Enumerations.GetValuesExceptDefault(typeof(Faction), Faction.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Popup.GetNexusCard(f)>
                        <img src="@Skin.Current.GetNexusCardImageURL(f)" class="card-img" alt=@Name(f)>
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.Homeworlds))
    {
        <h5 class="mt-2">Homeworld Cards</h5>
        <div class="row row-cols-2 row-cols-md-3 ms-1 me-1">

            @foreach (var w in Client.Game.Map.Homeworlds)
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Popup.Get(w)>
                        <img src="@Skin.Current.GetHomeworldCardImageURL(w.World)" class="card-img" alt=@Name(w)>
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.IsPlaying(Faction.Pink))
    {
        <h5 class="mt-2">Ambassador Tokens</h5>
        <div class="row row-cols-6 row-cols-md-12 ms-1 me-1">

            @foreach (var t in Enumerations.GetValuesExceptDefault(typeof(Ambassador), Ambassador.None))
            {
                if (t != Ambassador.Cyan)
                {
                    <div class="card">
                        <img src="@Skin.Current.GetImageURL(t)" class="card-img" title=@Skin.Current.GetAmbassadorDescription(t)>
                </div>
                }
            }

        </div>
    }

    @if (Client.Game.IsPlaying(Faction.Cyan))
    {
        <h5 class="mt-2">Terror Tokens</h5>
        <div>

            <ul>
                @foreach (var t in Enumerations.GetValuesExceptDefault(typeof(TerrorType), TerrorType.None))
                {
                    <li><strong>@Name(t) -</strong> @Skin.Current.GetTerrorTypeDescription(t)</li>
                }
            </ul>

        </div>
    }

    @if (Client.Game.Applicable(Rule.DiscoveryTokens))
    {
        <h5 class="mt-2">Discovery Tokens</h5>
        <div>

            <ul>
            @foreach (var t in Enumerations.GetValuesExceptDefault(typeof(DiscoveryToken), DiscoveryToken.None))
            {
                <li><strong>@Name(t) -</strong> @Skin.Current.GetDiscoveryTokenDescription(t)</li>
            }
            </ul>

        </div>
    }

</ModalComponent>

@code {

    [Parameter]
    public new string Id { get; set; } = "";
}