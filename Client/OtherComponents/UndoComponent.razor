<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared
@using Treachery.Client.GenericComponents;
@inherits GameComponent

<div class="card p-1 mb-2">

    <div class="card-header">Select up to (including) which action should be undone</div>

    <div class="card-body">
        <select class="form-select" @bind="undoEventId" id="undoEventNr">

            @foreach (var group in UndoableEvents) {

                <optgroup label="@group.Key">

                    @foreach (var evt in group.Value)
                    {
                        <option value=@evt.Key>@DetermineEventDescription(evt.Key, evt.Value)</option>
                    }

                </optgroup>
            }

        </select>
        <button class="btn btn-primary mt-1" @onclick="ConfirmUndo">Confirm</button>
    </div>
</div>

@code {

    private int undoEventId;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        undoEventId = h.Game.History.Count - 1;
    }

    private async Task ConfirmUndo()
    {
        await h.Host.Undo(undoEventId);
    }

    private string DetermineEventDescription(int eventnumber, GameEvent e) => "" + eventnumber + ". " + e.GetShortMessage()?.ToString(Skin.Current);

    private string DetermineGroup(Moment m) => "Turn " + m.Turn + " - " + Skin.Current.Describe(m.Phase);

    private Dictionary<string,Dictionary<int, GameEvent>> UndoableEvents
    {
        get
        {
            var result = new Dictionary<string,Dictionary<int, GameEvent>>();

            for (int i = h.Game.History.Count - 1; i > 0; i--)
            {
                var e = h.Game.History[i];
                if (!(e is AllyPermission) && !(e is BattleRevision))
                {
                    var group = DetermineGroup(h.Game.Moments[i-1]);
                    if (!result.ContainsKey(group))
                    {
                        result.Add(group, new());
                    }

                    var groupedEvents = result[group];

                    groupedEvents.Add(i, e);
                }
            }

            return result;
        }
    }
}
