<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BlackMarketBid>
@implements IDisposable

@if (h.Game.CurrentPhase == Phase.BlackMarketBidding)
{
    <div class="card p-1 mb-2 border-white" style="background-image:url('@Skin.Current.PanelBackground_Bidding_URL');background-size:cover;background-repeat:no-repeat">

        <div class="card-body">

            <table class="table table-borderless">
                <tr>

                    <td class="align-top" style="position:relative; width: 150px;">

                        <img src="@CurrentCardImageSRC" width="150" data-animation="true" data-content="@CurrentCardHover" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover" />

                        <div style="position: absolute; top: 135px; width: 150px; text-align: center; filter:drop-shadow(2px 2px 2px black)">

                            <div style="font-size: 24px; font-weight: bold; -webkit-text-stroke-width: 1px; -webkit-text-stroke-color: black;">
                                Black Market
                            </div>

                            @if (Game.CurrentAuctionType != AuctionType.BlackMarketSilent && Game.CurrentBid != null)
                            {
                                <img src="@Skin.Current.GetImageURL(Game.CurrentBid.Initiator)" width="36" style="vertical-align: top;" />
                                <NumberComponent Value="Game.CurrentBid.TotalAmount" Size="36" SymbolSRC="@Skin.Current.Harvester_URL" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="#FF5400" NumberAlignment="NumberAlignment.Center" />
                            }
                        </div>

                    </td>

                    <td class="align-top">

                        @if (CanBid)
                        {
                        <div class="mt-1">

                            @if (Player.Ally != Faction.None && BlackMarketBid.ValidMaxAllyAmount(Game, Player) > 0)
                            {
                                <SelectResourcesFromFactionComponent @bind-Value="amount" Min="0" Max="BlackMarketBid.ValidMaxAmount(Player)" Faction="Faction" />
                                <SelectResourcesFromFactionComponent @bind-Value="allyContributionAmount" Min="0" Max="BlackMarketBid.ValidMaxAllyAmount(Game, Player)" Faction="Player.Ally" /> 
                            }
                            else
                            {
                                <SelectResourcesComponent @bind-Value="amount" Min="0" Max="BlackMarketBid.ValidMaxAmount(Player)" />
                                allyContributionAmount = 0;
                            }

                            @if (Game.SpiceForBidsRedCanPay(Faction) > 0)
                            {
                                <SelectResourcesFromFactionComponent @bind-Value="redContributionAmount" Min="0" Max="Game.SpiceForBidsRedCanPay(Faction)" Faction="Faction.Red" />
                            }

                        </div>

                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError="@Validation" Pass="Pass" PassText="Pass" Alignment="justify-content-start" />
                        }

                    </td>
                </tr>
            </table>

        </div>
    </div>
}

@code {

    protected override bool IsUrgent => true;

    [Parameter]
    public bool CanBid { get; set; } = false;

    private int amount;
    private int allyContributionAmount;
    private int redContributionAmount;

    private string BidLabel => "Bid " + (amount + allyContributionAmount + redContributionAmount);

    protected override void OnParametersSet()
    {
        if (Game.CurrentAuctionType != AuctionType.BlackMarketSilent)
        {
            int allyResources = Player.Ally == Faction.None ? 0 : Game.GetPermittedUseOfAllySpice(Faction);
            int playerResources = Player.Resources;
            int bidToDo = Game.CurrentBid != null ? Game.CurrentBid.TotalAmount + 1 : 1;
            allyContributionAmount = Math.Min(bidToDo, allyResources);
            amount = Math.Min(bidToDo - allyContributionAmount, playerResources);
        }
    }

    protected override BlackMarketBid ConfirmedResult => new BlackMarketBid(Game) { Initiator = Faction, Passed = false, Amount = amount, AllyContributionAmount = allyContributionAmount, RedContributionAmount = redContributionAmount };

    protected override BlackMarketBid PassedResult => new BlackMarketBid(Game) { Initiator = Faction, Passed = true };

    private string CurrentCardImageSRC => Game.HasBiddingPrescience(Player) && Game.CardsOnAuction.Top != null ? Skin.Current.GetImageURL(Game.CardsOnAuction.Top) : Skin.Current.CardBack_TreacheryCard_URL;

    private string CurrentCardHover => Game.HasBiddingPrescience(Player) && Game.CardsOnAuction.Top != null ? Support.GetTreacheryCardHoverHTML(h.Game.CardsOnAuction.Top) : "";

    public void Dispose()
    {
        _ = Browser.RefreshPopovers();
    }
}
