<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Bid>

@if (h.Game.CurrentPhase == Phase.Bidding)
{
    <div class="card p-1 mb-2 border-white" style="background-image:url('@Skin.Current.PanelBackground_Bidding_URL');background-size:cover;background-repeat:no-repeat">

        <div class="card-body">

            <table class="table table-borderless">
                <tr>

                    <td class="align-top" style="position:relative; width: 150px;">

                        <img src="@CurrentCardImageSRC" width="150" data-animation="true" data-content="@CurrentCardHover" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover" />

                        <div style="position: absolute; top: 135px; width: 150px; text-align: center; filter:drop-shadow(2px 2px 2px black)">
                            <div style="font-size: 24px; font-weight: bold; -webkit-text-stroke-width: 1px; -webkit-text-stroke-color: black;">
                                Card @h.Game.CardNumber of @(h.Game.CardNumber + h.Game.CardsOnAuction.Items.Count - 1)
                            </div>
                            @if (Game.CurrentBid != null)
                            {
                                <img src="@Skin.Current.GetImageURL(Game.CurrentBid.Initiator)" width="36" style="vertical-align: top;" />
                                <NumberComponent Value="Game.CurrentBid.TotalAmount" Size="36" SymbolSRC="@Skin.Current.Harvester_URL" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="#FF5400" NumberAlignment="NumberAlignment.Center" />
                            }
                        </div>

                    </td>

                    <td class="align-top">

                        <div class="row justify-content-start">
                            @foreach (var se in Bid.PlayersToBid(Game))
                            {
                                <div class="d-inline-block pl-1" style="filter:drop-shadow(2px 2px 2px black)">
                                    <NumberComponent Value="se.Player.TreacheryCards.Count" Size="@(se.HasTurn ? 36 : 28)" 
                                                     SymbolSRC="@Skin.Current.GetImageURL(se.Player.Faction)" 
                                                     NumberColor="@(se.Player.MayBidOnCards ? "black" : "red")" NumberAlignment="NumberAlignment.BottomRight" NumberBackgroundFillColor="white" NumberBackgroundBorderColor="black" />
                                </div>
                            }
                        </div>

                        @if (!h.IsObserver && h.Player.Faction != Faction.None)
                        {
                            <CheckboxComponent @bind-Value="@h.Autopass">Auto-pass</CheckboxComponent>
                            @if (h.Autopass)
                            {
                                <SelectResourcesComponent @bind-Value="@h.BidAutoPassThreshold" Min="0" Max="50" Label="When above:" />
                            }
                            <CheckboxComponent @bind-Value="@h.KeepAutopassSetting">Repeat auto-pass every round</CheckboxComponent>


                            @if (CanBid)
                            {
                                <hr style="border-color:white" />
                            }
                        }

                        @if (CanBid)
                        {
                            if (Bid.CanKarma(Game, Player))
                            {
                                <div class="mt-1">
                                    <SelectCardComponent @bind-Value="karmaCard" Values="Bid.ValidKarmaCards(Game, Player)" Required="false">
                                        <Label>Use @Skin.Current.Describe(TreacheryCardType.Karma) to bid without limit or win immediately? <InfoComponent Contents="@InfoMessage" /></Label>
                                    </SelectCardComponent>
                                </div>
                            }
                            else
                            {
                                karmaCard = null;
                            }

                            <div class="mt-1">

                                @if (Player.Ally == Faction.None)
                                {
                                    <SelectResourcesComponent @bind-Value="amount" Min="0" Max="Bid.ValidMaxAmount(Player, karmaCard != null)" />
                                }
                                else
                                {
                                    <SelectResourcesFromFactionComponent @bind-Value="amount" Min="0" Max="Bid.ValidMaxAmount(Player, karmaCard != null)" Faction="Faction" />
                                    <SelectResourcesFromFactionComponent @bind-Value="allyContributionAmount" Min="0" Max="Bid.ValidMaxAllyAmount(Game, Player)" Faction="Player.Ally" />
                                }

                                @if (Game.SpiceForBidsRedCanPay(Faction) > 0)
                                {
                                    <SelectResourcesFromFactionComponent @bind-Value="redContributionAmount" Min="0" Max="Game.SpiceForBidsRedCanPay(Faction)" Faction="Faction.Red" />
                                }

                            </div>

                            @if (karmaCard != null)
                            {
                                <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError="@Validation" Pass="Pass" PassText="Pass" Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                            }
                            else
                            {
                                <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError="@Validation" Pass="Pass" PassText="Pass" Alignment="justify-content-start" />
                            }
                        }

                    </td>
                </tr>
            </table>

        </div>
    </div>
}

@code {

    protected override bool IsUrgent => true;

    private bool _canBid = false;

    [Parameter]
    public bool CanBid
    {
        get
        {
            return _canBid;
        }
        set
        {
            if (!_canBid && value)
            {
                if (Game.CurrentBid != null && h.Autopass && Game.CurrentBid.TotalAmount + 1 > h.BidAutoPassThreshold ||
                    Game.CurrentBid == null && h.Autopass && h.BidAutoPassThreshold == 0)
                {
                    _ = Task.Delay(500).ContinueWith(e => Pass());
                }
            }

            _canBid = value;
        }
    }

    private int amount;
    private int allyContributionAmount;
    private int redContributionAmount;
    private TreacheryCard karmaCard;

    private string BidLabel => "Bid " + (amount + allyContributionAmount + redContributionAmount);

    protected override void OnParametersSet()
    {
        if (Game.CurrentAuctionType != AuctionType.WhiteSilent)
        {
            int allyResources = Player.Ally == Faction.None ? 0 : Game.GetPermittedUseOfAllySpice(Faction);
            int playerResources = Player.Resources;
            int bidToDo = Game.CurrentBid != null ? Game.CurrentBid.TotalAmount + 1 : 1;
            allyContributionAmount = Math.Min(bidToDo, allyResources);
            amount = Math.Min(bidToDo - allyContributionAmount, playerResources);
        }
    }

    protected override Bid ConfirmedResult => new Bid(Game) { Initiator = Faction, Passed = false, Amount = amount, KarmaBid = false, KarmaCard = karmaCard, AllyContributionAmount = allyContributionAmount, RedContributionAmount = redContributionAmount };

    protected override Bid OtherResult => new Bid(Game) { Initiator = Faction, Passed = false, KarmaBid = true, KarmaCard = karmaCard };

    protected override Bid PassedResult => new Bid(Game) { Initiator = Faction, Passed = true, KarmaBid = false };

    private string InfoMessage => Skin.Current.Format("If you use a {0} card to bid any amount of {1} you wish, that card will be set aside until someone outbids you and will be discarded only if you win the auction. If you instead use your {0} card to win immediately, it is immediately discarded.", TreacheryCardType.Karma, Concept.Resource);

    private string CurrentCardImageSRC => (Game.HasBiddingPrescience(Player) || Game.WhiteCache.Contains(Game.CardsOnAuction.Top)) && Game.CardsOnAuction.Top != null ? Skin.Current.GetImageURL(Game.CardsOnAuction.Top) : Skin.Current.CardBack_TreacheryCard_URL;

    private string CurrentCardHover => (Game.HasBiddingPrescience(Player) || Game.WhiteCache.Contains(Game.CardsOnAuction.Top)) && Game.CardsOnAuction.Top != null ? Support.GetTreacheryCardHoverHTML(h.Game.CardsOnAuction.Top) : "";


}
