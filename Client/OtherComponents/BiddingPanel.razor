<!--
 * Copyright 2020-2023 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<BidType>
@typeparam BidType

<div class="card p-1 mb-2 border-white">

    <div class="card-body">

        <div class="row">

            <div class="col align-top" style="flex:0 0 150px">

                @if (CardIsVisible) 
                {
                    <Image Shown=@Game.CardsOnAuction.Top Width=150 />
                }
                else 
                {
                    <img src="@Skin.Current.CardBack_TreacheryCard_URL" width="150" />
                }

                <div style="position: absolute; top: 80px; left: 5px; width: 180px; text-align: center; filter:drop-shadow(2px 2px 2px black)">

                    <div style=@AuctionDescriptionStyle>
                        @AuctionDescription
                    </div>
                            
                    @if (ShowCurrentBid)
                    {
                        <img src="@Skin.Current.GetImageURL(Game.CurrentBid.Initiator)" width="36" style="vertical-align: top;" />
                        <NumberComponent Value="Game.CurrentBid.TotalAmount" Size="36" SymbolSRC="@Skin.Current.Harvester_URL" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="#FF5400" NumberAlignment="NumberAlignment.Center" />
                    }
                </div>

            </div>

            <div class="col align-top">

                @if (!h.IsObserver && h.Player.Faction != Faction.None)
                {
                    <CheckboxComponent @bind-Value="@h.Autopass" OnChanged="AutoPassChanged">Auto-pass</CheckboxComponent>
                    @if (h.Autopass)
                    {
                        <SelectResourcesComponent @bind-Value="@h.BidAutoPassThreshold" Min="0" Max="50" Label="When above:" />

                        @if (ShowRepeatAutoPass)
                        {
                            <CheckboxComponent @bind-Value="@h.KeepAutopassSetting">Repeat auto-pass every round</CheckboxComponent>
                        }
                    }

                    @if (CanBid)
                    {
                        <hr style="border-color:white" />
                    }
                }

                @if (CanBid)
                {
                    if (CanUseRedCunning)
                    {
                        <CheckboxComponent @bind-Value=@useRedCunning>Use your Nexus card to keep the @Concept.Resource you bid on this card?</CheckboxComponent>
                    }
                    else
                    {
                        useRedCunning = false;
                    }

                    if (CanUseKarma)
                    {
                        <div class="mt-1">
                            <SelectCardComponent @bind-Value="karmaCard" Values="Bid.ValidKarmaCards(Game, Player)" Required="false">
                                <Label>Use @Skin.Current.Describe(TreacheryCardType.Karma) to bid without limit or win immediately? <InfoComponent Contents="@KarmaInfoMessage" /></Label>
                            </SelectCardComponent>
                        </div>
                    }
                    else
                    {
                        karmaCard = null;
                    }

                    <div class="mt-1">

                        @if (Player.Ally != Faction.None && MaxAllyBidAmount > 0)
                        {
                            <SelectResourcesFromFactionComponent @bind-Value="amount" Min="0" Max="MaxBidAmount" Faction="Faction" />
                            <SelectResourcesFromFactionComponent @bind-Value="allyContributionAmount" Min="0" Max="MaxAllyBidAmount" Faction="Player.Ally" />
                        }
                        else
                        {
                            <SelectResourcesComponent @bind-Value="amount" Min="0" Max="MaxBidAmount" />
                            allyContributionAmount = 0;
                        }

                        @if (Game.SpiceForBidsRedCanPay(Faction) > 0)
                        {
                            <SelectResourcesFromFactionComponent @bind-Value="redContributionAmount" Min="0" Max="Game.SpiceForBidsRedCanPay(Faction)" Faction="Faction.Red" />
                        }

                    </div>

                    @if (IsSilentAuction)
                    {
                        @if (karmaCard != null)
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                        }
                        else
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Alignment="justify-content-start" />
                        }
                    }
                    else
                    {
                        @if (karmaCard != null)
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Pass="Pass" PassText="Pass" Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                        }
                        else
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Pass="Pass" PassText="Pass" Alignment="justify-content-start" />
                        }
                    }
                }

            </div>

        </div>

    </div>

</div>


@code {

    protected override bool IsUrgent => true;

    protected int amount;
    protected int allyContributionAmount;
    protected int redContributionAmount;
    protected TreacheryCard karmaCard;
    protected bool useRedCunning;

    private bool _canBid = false;

    [Parameter]
    public bool CanBid
    {
        get
        {
            return _canBid;
        }
        set
        {
            if (!_canBid && value)
            {
                if (Game.CurrentBid != null && h.Autopass && Game.CurrentBid.TotalAmount + 1 > h.BidAutoPassThreshold ||
                    Game.CurrentBid == null && h.Autopass && h.BidAutoPassThreshold == 0)
                {
                    _ = Task.Delay(800 + Random.Shared.Next(1600)).ContinueWith(e => AutoPass());
                }
            }

            _canBid = value;
        }
    }

    private string BidLabel => "Bid " + (amount + allyContributionAmount + redContributionAmount);

    private void AutoPassChanged(bool value)
    {
        if (value && h.BidAutoPassThreshold > Player.Resources)
        {
            h.BidAutoPassThreshold = Math.Min(Player.Resources, 5);
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsSilentAuction)
        {
            int allyResources = Player.Ally == Faction.None ? 0 : Game.GetPermittedUseOfAllySpice(Faction);
            int playerResources = Player.Resources;
            int bidToDo = Game.CurrentBid != null ? Game.CurrentBid.TotalAmount + 1 : 1;
            allyContributionAmount = Math.Min(bidToDo, allyResources);
            amount = Math.Min(bidToDo - allyContributionAmount, playerResources);
        }

        await StartTimerCycleAsync(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ResetAutopassThreshold();
    }

    protected override async Task CycleAsync()
    {
        if (h.Status.TimedEvent != null && h.Timer > 0 && DateTime.Now.Subtract(h.Status.TimedEvent.Time).TotalSeconds > h.Timer)
        {
            await Pass();
        }
    }

    private async Task AutoPass()
    {
        if (CanBid && h.Autopass)
        {
            await Pass();
        }
    }

    private void ResetAutopassThreshold()
    {
        if (Game.CurrentMainPhase == MainPhase.Bidding && Game.RecentMilestones.Contains(Milestone.AuctionWon) && (!h.KeepAutopassSetting || Game.CurrentPhase == Phase.BiddingReport))
        {
            h.Autopass = false;
        }
    }

    private bool IsWhiteBidding => Game.CurrentAuctionType == AuctionType.WhiteOnceAround || Game.CurrentAuctionType == AuctionType.WhiteSilent; 

    private bool CardIsVisible => (Game.HasBiddingPrescience(Player) || IsWhiteBidding) && Game.CardsOnAuction.Top != null;

    private string KarmaInfoMessage => Skin.Current.Format("If you use a {0} card to bid any amount of {1} you wish, that card will be set aside until someone outbids you and will be discarded only if you win the auction. If you instead use your {0} card to win immediately, it is immediately discarded.", TreacheryCardType.Karma, Concept.Resource);

    private bool ShowCurrentBid => !IsSilentAuction && Game.CurrentBid != null;

    private bool IsSilentAuction => Game.CurrentAuctionType == AuctionType.BlackMarketSilent || Game.CurrentAuctionType == AuctionType.WhiteSilent;

    private string AuctionDescriptionStyle => string.Format("font-size: 22px; font-weight: bold; {0}", Support.TextBorder(2, "black"));
}
