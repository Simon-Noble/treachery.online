<!--
 * Copyright 2020-2021 Ronald Ossendrijver. All rights reserved.
--->

@using Treachery.Shared;
@using Treachery.Client.GenericComponents;
@inherits GameEventComponent<Bid>

@if (h.Game.CurrentMainPhase == MainPhase.Bidding || (h.Game.Version < 38 && h.CurrentPhase == Phase.Resurrection))
{
    <div class="card p-1 mb-2 border-white" style="background-image:url('@Skin.Current.PanelBackground_Bidding_URL');background-size:cover;background-repeat:no-repeat">

        <div class="card-body">

            <table class="table table-borderless">
                <tr>
                    <td class="align-top" style="position:relative; width: 160px;">
                        <img src="@CurrentCardImageSRC" width="160" data-animation="true" data-content="@CurrentCardHover" data-html="true" data-placement="top" data-trigger="hover" data-toggle="popover" />

                        @if (Game.CurrentBid != null)
                        {
                            <div style="position: absolute; top: 140px; width: 160px; text-align: center; filter:drop-shadow(2px 2px 2px black)">
                                <img src="@Skin.Current.GetImageURL(Game.CurrentBid.Initiator)" width="36" style="vertical-align: top;" />
                                <NumberComponent Value="Game.CurrentBid.TotalAmount" Size="36" SymbolSRC="@Skin.Current.Harvester_URL" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="#FF5400" NumberAlignment="NumberAlignment.Center" />
                                <div style="font-size: 28px; font-weight: bold; -webkit-text-stroke-width: 1px; -webkit-text-stroke-color: black;">
                                    Card @h.Game.CardNumber of @(h.Game.CardNumber + h.Game.CardsOnAuction.Items.Count - 1)
                                </div>
                            </div>
                        }

                    </td>

                    <td class="align-top">

                        @if (!h.IsObserver && h.Player.Faction != Faction.None)
                        {
                            <CheckboxComponent @bind-Value="@h.Autopass">Auto-pass</CheckboxComponent>
                            @if (h.Autopass)
                            {
                                <SelectResourcesComponent @bind-Value="@h.BidAutoPassThreshold" Min="0" Max="50" Label="When above:" />
                            }
                            <CheckboxComponent @bind-Value="@h.KeepAutopassSetting">Repeat auto-pass every round</CheckboxComponent>


                            @if (CanBid)
                            {
                                <hr style="border-color:white" />
                            }
                        }

                        @if (CanBid)
                        {
                            @if (Karma.CanKarma(Game, Player))
                            {
                                <SelectCardComponent @bind-Value="karmaCard" Values="Karma.ValidKarmaCards(Game, Player)" Required="false">
                                    <Label>Use @Skin.Current.Describe(TreacheryCardType.Karma) to bid without limit or win immediately? <InfoComponent Contents="@InfoMessage" /></Label>
                                </SelectCardComponent>
                            }

                            @if (Player.Ally == Faction.None)
                            {
                                <SelectResourcesComponent @bind-Value="amount" Min="0" Max="Bid.ValidMaxAmount(Player, karmaCard != null)" />
                            }
                            else
                            {
                                <SelectResourcesFromFactionComponent @bind-Value="amount" Min="0" Max="Bid.ValidMaxAmount(Player, karmaCard != null)" Faction="Faction" />
                                <SelectResourcesFromFactionComponent @bind-Value="allyContributionAmount" Min="0" Max="Bid.ValidMaxAllyAmount(Game, Player)" Faction="Player.Ally" />
                            }

                            @if (Game.SpiceForBidsRedCanPay(Faction) > 0)
                            {
                                <SelectResourcesFromFactionComponent @bind-Value="redContributionAmount" Min="0" Max="Game.SpiceForBidsRedCanPay(Faction)" Faction="Faction.Red" />
                            }

                            @if (karmaCard != null)
                            {
                                <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError="@Validation" Pass="Pass" PassText="Pass" Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                            }
                            else
                            {
                                <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError="@Validation" Pass="Pass" PassText="Pass" Alignment="justify-content-start" />
                            }
                        }

                    </td>
                </tr>
            </table>

        </div>
    </div>
}

@code {

    protected override bool IsUrgent => true;

    [Parameter]
    public bool CanBid { get; set; }

    private int amount;
    private int allyContributionAmount;
    private int redContributionAmount;
    private TreacheryCard karmaCard;

    private string BidLabel => "Bid " + (amount + allyContributionAmount + redContributionAmount);

    private async Task Autopass()
    {
        if (Game.CurrentBid != null && h.Autopass && Game.CurrentBid.TotalAmount + 1 > h.BidAutoPassThreshold ||
            Game.CurrentBid == null && h.Autopass && h.BidAutoPassThreshold == 0)
        {
            await Pass();
        }
    }

    protected override void OnParametersSet()
    {
        int allyResources = Player.Ally == Faction.None ? 0 : Game.GetPermittedUseOfAllySpice(Faction);
        int playerResources = Player.Resources;
        int bidToDo = Game.CurrentBid != null ? Game.CurrentBid.TotalAmount + 1 : 1;
        allyContributionAmount = Math.Min(bidToDo, allyResources);
        amount = Math.Min(bidToDo - allyContributionAmount, playerResources);

        _ = Task.Delay(1000).ContinueWith(e => Autopass());
    }

    protected override Bid ConfirmedResult => new Bid(Game) { Initiator = Faction, Passed = false, Amount = amount, KarmaBid = false, KarmaCard = karmaCard, AllyContributionAmount = allyContributionAmount, RedContributionAmount = redContributionAmount };

    protected override Bid OtherResult => new Bid(Game) { Initiator = Faction, Passed = false, KarmaBid = true, KarmaCard = karmaCard };

    protected override Bid PassedResult => new Bid(Game) { Initiator = Faction, Passed = true, KarmaBid = false };

    private string InfoMessage => Skin.Current.Format("If you use a {0} card to bid any amount of {1} you wish, that card will be set aside until someone outbids you and will be discarded only if you win the auction. If you instead use your {0} card to win immediately, it is immediately discarded.", TreacheryCardType.Karma, Concept.Resource);

    private IEnumerable<Tuple<Player, bool>> PlayersInSequence
    {
        get
        {
            var players = h.Game.BidSequence.Players;
            var result = new List<Tuple<Player, bool>>();
            int currentPlayerPosition = h.Game.BidSequence.RoundStartedAt;

            for (int i = 0; i < h.Game.MaximumNumberOfPlayers; i++)
            {
                var player = players.SingleOrDefault(p => p.PositionAtTable == currentPlayerPosition);
                if (player != null)
                {
                    result.Add(new Tuple<Player, bool>(player, player.PositionAtTable == h.Game.BidSequence.Current));
                }
                currentPlayerPosition = (currentPlayerPosition + 1) % h.Game.MaximumNumberOfPlayers;
            }

            return result;
        }
    }

    private string CurrentCardImageSRC => Game.HasBiddingPrescience(Player) && Game.CardsOnAuction.Top != null ? Skin.Current.GetImageURL(Game.CardsOnAuction.Top) : Skin.Current.CardBack_TreacheryCard_URL;

    private string CurrentCardHover => Game.HasBiddingPrescience(Player) && Game.CardsOnAuction.Top != null ? Support.GetTreacheryCardHoverHTML(h.Game.CardsOnAuction.Top) : "";

    private IEnumerable<int> AutopassAmounts
    {
        get
        {
            return Enumerable.Range(0, 100);
        }
    }
}
